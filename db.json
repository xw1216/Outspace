{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post_top.jpg","path":"img/post_top.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/profile.jpg","path":"img/profile.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"eeb80366a92aad04f88a7b356a743d9473a15fbc","modified":1634979326514},{"_id":"source/README.md","hash":"9fc60b5ce8b74a5e28aab3b118c389fe5178c496","modified":1634979374806},{"_id":"source/_data/link.yml","hash":"51a573468465c5a04bb68f6064554d0d6d17d0ae","modified":1635174105491},{"_id":"source/_posts/Markdown-Function-Usage-Dict.md","hash":"ef0f49bd9f98b1b4ecac045d5965c134e2427747","modified":1635166679283},{"_id":"source/about/index.md","hash":"c376d72c8e103a03f27e40a471a46cf3bb65b37f","modified":1635172272443},{"_id":"source/categories/index.md","hash":"5c504c1902087fec512a9fe394bd6dae9691402f","modified":1635167017622},{"_id":"source/_posts/hello-world.md","hash":"7df195a9dbf8cd137408e22de20a26f0272d18eb","modified":1635165317022},{"_id":"source/link/index.md","hash":"bdf609561a555c65ef4be753d029bc60222a2294","modified":1635075572414},{"_id":"source/tags/index.md","hash":"07e630c963165adb4d9fce33afde8e812a11fb44","modified":1635166999193},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1635066198790},{"_id":"themes/butterfly/README.md","hash":"0f0eaee9c30ef1e9aed588fbb3e8263401348b55","modified":1635066198790},{"_id":"themes/butterfly/README_CN.md","hash":"70ec43a8aa0776b5a0a2a6b6009dd253fa3679eb","modified":1635066198791},{"_id":"themes/butterfly/_config.yml","hash":"d9593b423071020f7b970dd932128be03b9ad3e3","modified":1635066198791},{"_id":"themes/butterfly/package.json","hash":"6a5ddc166980502757c1413b5e04a3a8a91c0a48","modified":1635066198839},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1635066198789},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1635066198798},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1635066198798},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1635066198837},{"_id":"themes/butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1635066198838},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1635066198838},{"_id":"themes/butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1635066198796},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1635066198838},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1635066198796},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1635066198796},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1635066198797},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1635066198788},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1635066198788},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1635066198788},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1635066198789},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"3cdc5e32d0f1e5866bcf86f94a0d76aaf7142937","modified":1635066198799},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1635066198799},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1635066198800},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"f4dcc0a596eb9801c4d3c033d018d0abb413c8e5","modified":1635066198800},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1635066198806},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1635066198810},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1635066198811},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1635066198839},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9b5243385f7a90e0103c25c531a1e7f2f1884c15","modified":1635066198811},{"_id":"themes/butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1635066198840},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1635066198840},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1635066198841},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1635066198841},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1635066198842},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1635066198842},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"98ab13a60413d68bd9d02d54d121c66a6d4634d2","modified":1635066198842},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1635066198843},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1635066198866},{"_id":"themes/butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1635066198867},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"26dd1900e68a3e10a5cf3f3484a93139a0f1340e","modified":1635066198843},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1635066198844},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1635066198844},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1635066198844},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1635066198845},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1635066198845},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1635066198845},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1635066198846},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1635066198867},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1635066198847},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1635066198868},{"_id":"themes/butterfly/source/img/favicon.png","hash":"7f6e1c9837dabb60a450c6efca860e8fbb6fa714","modified":1635148869462},{"_id":"themes/butterfly/source/js/main.js","hash":"53c6df70de6e7949b102ab06fd0cd53b9b39b01c","modified":1635066198871},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1635066198870},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1635066198872},{"_id":"themes/butterfly/source/js/utils.js","hash":"1b8bf1e6d50fa8ffe2aff7548b141cab72540ba0","modified":1635066198873},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1635066198801},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1635066198801},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"73c04d62055840545112dd12d73807835ca62347","modified":1635066198802},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1635066198801},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1635066198802},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1635066198802},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1635066198803},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1635066198803},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1635066198803},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1635066198804},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1635066198804},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1635066198805},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7677911bd3f43edaf8230eea02f60a248eee9934","modified":1635066198805},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1635066198805},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1635066198806},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1635066198807},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1635066198808},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1635066198807},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1635066198808},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1635066198809},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"9aa743b1f6fb7fafabee38f9204ce9c8f1be7f9a","modified":1635066198809},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1635066198809},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1635066198812},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1635066198810},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1635066198811},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1635066198822},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1635066198827},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"ad59dcce32e4e67066303a1ffd1dd95874d9953e","modified":1635066198827},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1635066198828},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"4a2ea9fe59f1dc8cb4f4f6a28cf24a40fc300254","modified":1635066198832},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1635066198832},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1635066198833},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1635066198833},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"6c3449a44ae1a80f71dd4d9d6a85cec1781ceff1","modified":1635066198833},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1635066198834},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1635066198834},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1635066198835},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"0f1a5c356c1ffd47ff49e153226e2d670dc61057","modified":1635066198835},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1635066198836},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1635066198835},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1635066198836},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1635066198837},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"e4c39101d7087066a86f7743985a53d6a246470b","modified":1635066198837},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1635066198848},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"03164bca4546707543828cb2a41bc672b77bfa5a","modified":1635066198848},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2e8e391b211b2416d3c9430ab5361659c073f348","modified":1635066198849},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"23ea60f8becc91f6e9f6cfb1cbfd25689c263b9c","modified":1635066198852},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"f25415a436100688248fef0ad90e3d4397627833","modified":1635066198852},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1635066198853},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1635066198852},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1635066198853},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dd71e34edece4e06b59e941fb3cc5ad9a3ad09cf","modified":1635066198854},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1635066198854},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1635066198854},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"814729d1d71f4326623a4f34b621bf0421503103","modified":1635066198855},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1635066198855},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1635066198856},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1635066198855},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"191ce31ce0f2b1d22a64225801a88cee6054f574","modified":1635066198856},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"943aa34c83c87d0225db65ae90621870472972fa","modified":1635066198856},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1635066198857},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1635066198857},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1635066198858},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"87c576a3361f30eefafec27a872ad76e9fbb2765","modified":1635066198858},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1635066198859},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"5e5c1d6d104cc15314ae365d0da7cb07334a6457","modified":1635066198859},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"48ad198d0ea97a25db4d2a3e587a16ef41617c0b","modified":1635066198860},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1635066198860},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1635066198860},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"25ac939fc57346de07ba9e15a1a760b492baefd7","modified":1635066198861},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"fa2985afd08556b25f5f1a01bc1a7c76b294a962","modified":1635066198862},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e65ed98056e6c91e622f94bad5283d00fdb22142","modified":1635066198861},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1635066198866},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1635066198862},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1635066198863},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1635066198862},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1635066198863},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1635066198864},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1635066198864},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1635066198865},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1635066198865},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"54378d52d275e4ab84173bb02e17ea02ae46e55f","modified":1635066198872},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1635066198871},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1635066198813},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1635066198813},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1635066198814},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1635066198814},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1635066198815},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"f3db5c5e738e097a191dc0de59c61d3e1444f7c3","modified":1635066198815},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1635066198816},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1635066198816},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1635066198816},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1635066198817},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1635066198817},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1635066198818},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1635066198817},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"50126b2e841b01584b8b65b2f834038e3997b694","modified":1635066198818},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0bf6a47e804fb793b40f82690a24816b902edd41","modified":1635066198819},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0254203aae73e70b90dfce6ec4f9c9d3be9ac9f8","modified":1635066198819},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1635066198819},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1635066198821},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1635066198820},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1635066198821},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1635066198821},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"8290994cf1ee2faff60214ff245cf513fbbe94aa","modified":1635066198822},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0bf1c53b914443c66be5077ff09cfc218f111e11","modified":1635066198822},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1635066198823},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"266caf985dc0703ff81b871b8f8d206f57db6e79","modified":1635066198823},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"87e40f0c315407ab88571a2b3450d640f15c96bc","modified":1635066198824},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1635066198824},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"8890becd8220c57db2c7451409710942c103a7f4","modified":1635066198825},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0ad766ae491e6fcba2ef3d136a7af6158cd4153e","modified":1635066198825},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1635066198825},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1635066198826},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1635066198826},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"83103bad0db195bce095330c4a84e7529bbd40dd","modified":1635066198827},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1635066198830},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1635066198829},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1635066198829},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1635066198829},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1635066198850},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1635066198830},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1635066198831},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1635066198831},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1635066198850},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1635066198851},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1635066198851},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1635066198851},{"_id":"themes/butterfly/source/img/post_top.jpg","hash":"3d5dcdbcb62af75edae8288286240edc0e339f6f","modified":1635148627743},{"_id":"themes/butterfly/source/img/profile.jpg","hash":"168a4805f962d96c1bf79fc463203f1460a1fa0f","modified":1634993935303},{"_id":"public/search.xml","hash":"9184e58a6ca658bbc2f2c8781c07d146e9e71b64","modified":1635241592087},{"_id":"public/404.html","hash":"a8430d4101f581a8ece33e2601a4ca782a1500e3","modified":1635241592087},{"_id":"public/about/index.html","hash":"bb2094ce166e5688580348ec19e795b5d52fd8f7","modified":1635241592087},{"_id":"public/categories/index.html","hash":"e2f39059c433b4bbb9e5ef9976130087d077748b","modified":1635241592087},{"_id":"public/link/index.html","hash":"ea73efb513ba803d0ce61e376d7a20d8a25ed51d","modified":1635241592087},{"_id":"public/tags/index.html","hash":"e20669023cfb06c72983b3572653d326f5d69438","modified":1635241592087},{"_id":"public/2021/10/Markdown-Function-Usage-Dict/index.html","hash":"f456a42577e1df70fdbaf8af337ce65f72808f93","modified":1635241592087},{"_id":"public/2021/10/hello-world/index.html","hash":"81e2e98dcec830a417df5d13bb8c817a4889d44e","modified":1635241592087},{"_id":"public/archives/index.html","hash":"33554e6452ea16db0fcce39cd5172bc92aec4e7a","modified":1635241592087},{"_id":"public/archives/2021/10/index.html","hash":"03ee9900f3f7accffbea79d5fddffa6045bd641f","modified":1635241592087},{"_id":"public/archives/2021/index.html","hash":"bde41179a7967d67b249f532815d2359e7e57225","modified":1635241592087},{"_id":"public/categories/教程/index.html","hash":"fa27b5650b4fc792ed4c3a73744fce00f027d79d","modified":1635241592087},{"_id":"public/tags/教程/index.html","hash":"2400a8195f1644b4f25b5e50c780b1c8742d8c65","modified":1635241592087},{"_id":"public/tags/Hexo/index.html","hash":"06413a54890775fdaaeb991c01136b29baa41622","modified":1635241592087},{"_id":"public/tags/指南/index.html","hash":"d56323df36ae6129b22508a33c482e4cbb11a9a0","modified":1635241592087},{"_id":"public/index.html","hash":"b1b8b36cc3ba6f30d53fcbf10b9df48635c4fdc4","modified":1635241592087},{"_id":"public/tags/Markdown/index.html","hash":"f78f7741a1dddff8bc6766a3ffab9b01a5429990","modified":1635241592087},{"_id":"public/CNAME","hash":"eeb80366a92aad04f88a7b356a743d9473a15fbc","modified":1635174118834},{"_id":"public/README.md","hash":"9fc60b5ce8b74a5e28aab3b118c389fe5178c496","modified":1635174118834},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1635174118834},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1635174118834},{"_id":"public/img/favicon.png","hash":"7f6e1c9837dabb60a450c6efca860e8fbb6fa714","modified":1635174118834},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1635174118834},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1635174118834},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1635174118834},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1635174118834},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635174118834},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1635174118834},{"_id":"public/css/index.css","hash":"bbfd86227070a687298623c90560b97b85f32253","modified":1635174118834},{"_id":"public/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1635174118834},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1635174118834},{"_id":"public/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1635174118834},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1635174118834},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1635174118834},{"_id":"public/img/post_top.jpg","hash":"3d5dcdbcb62af75edae8288286240edc0e339f6f","modified":1635174118834},{"_id":"public/img/profile.jpg","hash":"168a4805f962d96c1bf79fc463203f1460a1fa0f","modified":1635174118834},{"_id":"source/_posts/vue-advanced.md","hash":"33c153808741a69a9804ed1c264f590c5d65a780","modified":1635241566998},{"_id":"source/_posts/vue-basic.md","hash":"c413bd05b46700d880d64b13c18234b70d648bd0","modified":1635241567809},{"_id":"public/2021/10/vue-advanced/index.html","hash":"f0c6f04ff30a78f36521fc07bd3e38aabac2656f","modified":1635241592087},{"_id":"public/2021/10/vue-basic/index.html","hash":"18c436e70c2a2dde8008f420f3f16f49a23a7599","modified":1635241592087},{"_id":"public/categories/学习/index.html","hash":"0addea7b2521fac8502d4a06346e5c0d634cfd2a","modified":1635241592087},{"_id":"public/tags/笔记/index.html","hash":"e1a476e8734927363e5fc46827659508e9f83dc8","modified":1635241592087},{"_id":"public/tags/前端/index.html","hash":"6d8045f3285fa7b28824d24660e192936652d928","modified":1635241592087},{"_id":"public/tags/Vue/index.html","hash":"b80381e4ac4a571686ef1fe28e675ea51be45916","modified":1635241592087}],"Category":[{"name":"教程","_id":"ckv6sg9o4000308t54kba8xm4"},{"name":"学习","_id":"ckv7wmgew0001yct597925oqu"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}],"Page":[{"title":"目录","date":"2021-10-24T09:09:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 目录\ndate: 2021-10-24 17:09:10\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-10-25T13:03:37.622Z","path":"categories/index.html","layout":"page","_id":"ckv6sg9ny000008t53lfr1eno","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}},"cover":"/img/post_top.jpg","excerpt":"","more":""},{"title":"推荐链接","date":"2021-10-24T09:10:03.000Z","type":"link","_content":"\n","source":"link/index.md","raw":"---\ntitle: 推荐链接\ndate: 2021-10-24 17:10:03\ntype: \"link\"\n---\n\n","updated":"2021-10-24T11:39:32.414Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckv6sg9o3000208t5287w5sz9","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}},"cover":"/img/post_top.jpg","excerpt":"","more":""},{"title":"关于","date":"2021-10-25T14:29:32.000Z","type":"about","_content":"\n# Outspace.\n\n\n\n## 目的 :smile:\n\n- 本 `Repo` 是 `outspace.tech` 的开发项目，存储了 `Outspace` 博客的所有源代码和博文。\n- 博客主要记录 `Wayne Bear` 的日常碎碎念、技术经验和学习笔记。\n\n\n\n## 使用工具 :rofl:\n\n- 使用 `Hexo` 以及对应的 `Butterfly`主题搭建而成。\n- 使用 `npm` 包管理器，依赖包请参考 `package.json`。\n- 使用 `PicGo` 进行以及 `xw1216/ImageHosting` 仓库进行图床管理。\n- 使用 `Gitalk` 进行评论区支持，评论存储于 `xw1216/CommentHosting` 中。\n\n在此对上述开源工具的开发者表示感谢！\n\n\n\n## 部署方式 :detective:\n\n- 该博客使用了 `hexo-deploy-git` 插件， 通过自定义 `SSH Token` 进行远程部署。\n- 请访问 `outspace.tech` 或者 `xw1216.github.io` 进行访问。\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-10-25 22:29:32\ntype: \"about\"\n---\n\n# Outspace.\n\n\n\n## 目的 :smile:\n\n- 本 `Repo` 是 `outspace.tech` 的开发项目，存储了 `Outspace` 博客的所有源代码和博文。\n- 博客主要记录 `Wayne Bear` 的日常碎碎念、技术经验和学习笔记。\n\n\n\n## 使用工具 :rofl:\n\n- 使用 `Hexo` 以及对应的 `Butterfly`主题搭建而成。\n- 使用 `npm` 包管理器，依赖包请参考 `package.json`。\n- 使用 `PicGo` 进行以及 `xw1216/ImageHosting` 仓库进行图床管理。\n- 使用 `Gitalk` 进行评论区支持，评论存储于 `xw1216/CommentHosting` 中。\n\n在此对上述开源工具的开发者表示感谢！\n\n\n\n## 部署方式 :detective:\n\n- 该博客使用了 `hexo-deploy-git` 插件， 通过自定义 `SSH Token` 进行远程部署。\n- 请访问 `outspace.tech` 或者 `xw1216.github.io` 进行访问。\n","updated":"2021-10-25T14:31:12.443Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckv6sg9o6000508t5fom68y2o","content":"<h1>Outspace.</h1>\n<h2 id=\"目的-span-class-github-emoji-alias-smile-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f604-png-v8-😄-span\">目的 <span class=\"github-emoji\" alias=\"smile\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8\">😄</span></h2>\n<ul>\n<li>本 <code>Repo</code> 是 <code>outspace.tech</code> 的开发项目，存储了 <code>Outspace</code> 博客的所有源代码和博文。</li>\n<li>博客主要记录 <code>Wayne Bear</code> 的日常碎碎念、技术经验和学习笔记。</li>\n</ul>\n<h2 id=\"使用工具-span-class-github-emoji-alias-rofl-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f923-png-v8-🤣-span\">使用工具 <span class=\"github-emoji\" alias=\"rofl\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8\">🤣</span></h2>\n<ul>\n<li>使用 <code>Hexo</code> 以及对应的 <code>Butterfly</code>主题搭建而成。</li>\n<li>使用 <code>npm</code> 包管理器，依赖包请参考 <code>package.json</code>。</li>\n<li>使用 <code>PicGo</code> 进行以及 <code>xw1216/ImageHosting</code> 仓库进行图床管理。</li>\n<li>使用 <code>Gitalk</code> 进行评论区支持，评论存储于 <code>xw1216/CommentHosting</code> 中。</li>\n</ul>\n<p>在此对上述开源工具的开发者表示感谢！</p>\n<h2 id=\"部署方式-span-class-github-emoji-alias-detective-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f575-png-v8-🕵-span\">部署方式 <span class=\"github-emoji\" alias=\"detective\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f575.png?v8\">🕵</span></h2>\n<ul>\n<li>该博客使用了 <code>hexo-deploy-git</code> 插件， 通过自定义 <code>SSH Token</code> 进行远程部署。</li>\n<li>请访问 <code>outspace.tech</code> 或者 <code>xw1216.github.io</code> 进行访问。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}},"cover":"/img/post_top.jpg","excerpt":"","more":"<h1>Outspace.</h1>\n<h2 id=\"目的-span-class-github-emoji-alias-smile-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f604-png-v8-😄-span\">目的 <span class=\"github-emoji\" alias=\"smile\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8\">😄</span></h2>\n<ul>\n<li>本 <code>Repo</code> 是 <code>outspace.tech</code> 的开发项目，存储了 <code>Outspace</code> 博客的所有源代码和博文。</li>\n<li>博客主要记录 <code>Wayne Bear</code> 的日常碎碎念、技术经验和学习笔记。</li>\n</ul>\n<h2 id=\"使用工具-span-class-github-emoji-alias-rofl-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f923-png-v8-🤣-span\">使用工具 <span class=\"github-emoji\" alias=\"rofl\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8\">🤣</span></h2>\n<ul>\n<li>使用 <code>Hexo</code> 以及对应的 <code>Butterfly</code>主题搭建而成。</li>\n<li>使用 <code>npm</code> 包管理器，依赖包请参考 <code>package.json</code>。</li>\n<li>使用 <code>PicGo</code> 进行以及 <code>xw1216/ImageHosting</code> 仓库进行图床管理。</li>\n<li>使用 <code>Gitalk</code> 进行评论区支持，评论存储于 <code>xw1216/CommentHosting</code> 中。</li>\n</ul>\n<p>在此对上述开源工具的开发者表示感谢！</p>\n<h2 id=\"部署方式-span-class-github-emoji-alias-detective-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f575-png-v8-🕵-span\">部署方式 <span class=\"github-emoji\" alias=\"detective\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f575.png?v8\">🕵</span></h2>\n<ul>\n<li>该博客使用了 <code>hexo-deploy-git</code> 插件， 通过自定义 <code>SSH Token</code> 进行远程部署。</li>\n<li>请访问 <code>outspace.tech</code> 或者 <code>xw1216.github.io</code> 进行访问。</li>\n</ul>\n"},{"title":"标签","date":"2021-10-24T09:08:21.000Z","type":"tags","comments":0,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-10-24 17:08:21\ntype: \"tags\"\ncomments: false\n---\n\n","updated":"2021-10-25T13:03:19.193Z","path":"tags/index.html","layout":"page","_id":"ckv6sg9o6000608t57hgy5bqk","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}},"cover":"/img/post_top.jpg","excerpt":"","more":""}],"Post":[{"title":"Hexo 基本使用","date":"2021-10-24T04:03:41.000Z","_content":"\n\n> Hello World! :smile:\n\n\n\n欢迎使用 [Hexo](https://hexo.io/)！ 这是自动生成的第一篇博文。 请查看 [文档](https://hexo.io/docs/) 来获得更多信息。如果你在使用 Hexo 的时候有任何问题， 你可以在文档的 [troubleshooting](https://hexo.io/docs/troubleshooting.html) 部分找到答案或者你可以来 [GitHub](https://github.com/hexojs/hexo/issues) 来直接问我。\n\n## 快速上手\n\n### 创建新博文\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多信息： [写作](https://hexo.io/docs/writing.html)\n\n### 运行服务器\n\n``` bash\n$ hexo server\n```\n\n更多信息：[服务器](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多信息：[文件生成](https://hexo.io/docs/generating.html)\n\n### 部署至远端\n\n``` bash\n$ hexo deploy\n```\n\n更多信息：[部署](https://hexo.io/docs/one-command-deployment.html)\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo 基本使用\ndate: 2021-10-24 12:03:41\ncategories: 教程\ntags:\n  - 教程\n  - Hexo\n---\n\n\n> Hello World! :smile:\n\n\n\n欢迎使用 [Hexo](https://hexo.io/)！ 这是自动生成的第一篇博文。 请查看 [文档](https://hexo.io/docs/) 来获得更多信息。如果你在使用 Hexo 的时候有任何问题， 你可以在文档的 [troubleshooting](https://hexo.io/docs/troubleshooting.html) 部分找到答案或者你可以来 [GitHub](https://github.com/hexojs/hexo/issues) 来直接问我。\n\n## 快速上手\n\n### 创建新博文\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多信息： [写作](https://hexo.io/docs/writing.html)\n\n### 运行服务器\n\n``` bash\n$ hexo server\n```\n\n更多信息：[服务器](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多信息：[文件生成](https://hexo.io/docs/generating.html)\n\n### 部署至远端\n\n``` bash\n$ hexo deploy\n```\n\n更多信息：[部署](https://hexo.io/docs/one-command-deployment.html)\n\n","slug":"hello-world","published":1,"updated":"2021-10-25T12:35:17.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6sg9o0000108t5b8rgacny","content":"<blockquote>\n<p>Hello World! <span class=\"github-emoji\" alias=\"smile\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8\">😄</span></p>\n</blockquote>\n<p>欢迎使用 <a href=\"https://hexo.io/\">Hexo</a>！ 这是自动生成的第一篇博文。 请查看 <a href=\"https://hexo.io/docs/\">文档</a> 来获得更多信息。如果你在使用 Hexo 的时候有任何问题， 你可以在文档的 <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> 部分找到答案或者你可以来 <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a> 来直接问我。</p>\n<h2 id=\"快速上手\">快速上手</h2>\n<h3 id=\"创建新博文\">创建新博文</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>更多信息： <a href=\"https://hexo.io/docs/writing.html\">写作</a></p>\n<h3 id=\"运行服务器\">运行服务器</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/server.html\">服务器</a></p>\n<h3 id=\"生成静态文件\">生成静态文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/generating.html\">文件生成</a></p>\n<h3 id=\"部署至远端\">部署至远端</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/one-command-deployment.html\">部署</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}},"cover":"/img/post_top.jpg","excerpt":"","more":"<blockquote>\n<p>Hello World! <span class=\"github-emoji\" alias=\"smile\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8\">😄</span></p>\n</blockquote>\n<p>欢迎使用 <a href=\"https://hexo.io/\">Hexo</a>！ 这是自动生成的第一篇博文。 请查看 <a href=\"https://hexo.io/docs/\">文档</a> 来获得更多信息。如果你在使用 Hexo 的时候有任何问题， 你可以在文档的 <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> 部分找到答案或者你可以来 <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a> 来直接问我。</p>\n<h2 id=\"快速上手\">快速上手</h2>\n<h3 id=\"创建新博文\">创建新博文</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>更多信息： <a href=\"https://hexo.io/docs/writing.html\">写作</a></p>\n<h3 id=\"运行服务器\">运行服务器</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/server.html\">服务器</a></p>\n<h3 id=\"生成静态文件\">生成静态文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/generating.html\">文件生成</a></p>\n<h3 id=\"部署至远端\">部署至远端</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/one-command-deployment.html\">部署</a></p>\n"},{"title":"Markdown 写法使用案例库说明","date":"2021-10-25T09:52:19.000Z","cover":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg","katex":true,"_content":"\n\n\n# Markdown 写法使用案例说明\n\n\n\n> 本案例使用 类 `Atx` 格式标准。\n\n\n\n## Chapter 1 Markdown 基本文字语法\n\n\n\n### 1.1 标题\n\n共有 `1~6` 不同级别的标题。\n\n```markdown\n# 这是一个一级标题\n## 这是一个二级标题\n###### 这是一个六级标题\n```\n\n\n\n\n\n### 1.2 字体效果\n\n可以显示**加粗**，*斜体*，~~删除线效果~~ 。\n\n```markdown\n**加粗**\n*斜体*\n~~删除线~~\n```\n\n如需加入普通符号，使用 `\\` 进行转义。\n\n\n\n\n\n### 1.3 分割线\n\n使用 `3` 个以上的 `*` ,  `-` ，`_` 建立分割线。\n\n```markdown\n___\n***\n---\n```\n\n___\n\n\n\n\n\n### 1.4 引用块\n\n使用 `>` 标识一个引用块。\n\n```markdown\n> This is a blockquote. It can contains a paragraph.\n\n> > This a nested blockquote.\n```\n\n> This is a blockquote. It can contains a paragraph.\n>\n> > This a nested blockquote.\n\n引用块内可以嵌套其他 Markdown 语法元素。\n\n\n\n\n\n### 1.5 列表\n\n> 所有的列表项都会嵌套并改变多级列表前的指示符号。\n>\n> 定义列表不被 \t`Typora` 支持。\n\n\n\n#### 1.5.1 无序列表\n\n```markdown\n- 列表项\n- 列表项\n- 列表项\n```\n\n- 列表项\n- 列表项\n- 列表项\n\n\n\n#### 1.5.2 有序列表\n\n```markdown\n1. 列表项\n2. 列表项\n3. 列表项\n```\n\n1. 列表项\n2. 列表项\n3. 列表项\n\n\n\n\n\n### 1.6 表格\n\n```markdown\n| 表头 | 表头 | 表头 |\n| :--: | :--: | :--: |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n```\n\n| 表头 | 表头 | 表头 |\n| :--: | :--: | :--: |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n\n\n\n使用冒号表示该列的对齐方式。\n\n\n\n\n\n### 1.7 代码\n\n#### 1.7.1 单行代码\n\n```markdown\n`#include <iostream>`\n```\n\n`#include <iostream>`\n\n\n\n#### 1.7.2 多行代码\n\n````markdown\n```c++\n#include <iostream>\nusing namespace std;\n```\n````\n\n\n\n```c++\n#include <iostream>\nusing namespace std;\n```\n\n\n\n\n\n### 1.8 段落与换行\n\n`Markdown` 段落前后要有一个以上的空行。\n\n- 使用 <kbd>Shift</kbd> + <kbd>Enter</kbd> 可以实现段内换行。源码表现为一个空行。\n- 使用 <kbd>Enter</kbd> 可以实现文本块的换行。源码表现为两个空行。\n\n<br>\n\n\n\n## Chapter 2  Markdown 扩展功能语法\n\n\n\n### 2.1 超链接\n\n#### 2.1.1 基本方式\n\n```markdown\n这是一个指向 [必应](https://www.bing.com) 的链接。\n```\n\n这是一个指向 [必应](https://www.bing.com) 的链接。\n\n\n\n#### 2.1.2 参考方式\n\n```markdown\n这是一个先使用，后定义的 [必应][Bing] 脚注链接。\n[Bing]: https://www.bing.com \"Bing Link\"\n```\n\n只是一个先使用，后定义的 [必应][Bing] 链接。\n\n[Bing]: https://www.bing.com \"Bing Link\"\n\n\n\n#### 2.1.3 简洁方式\n\n```markdown\n<https://bing.com>\n```\n\n<https://bing.com>\n\n\n\n- 注意超链接内部没有空格。\n- 同样支持 `HTML` 中的 `<a>` 标签。\n\n\n\n\n\n### 2.2 图片\n\n#### 2.2.1 基本方式\n\n```markdown\n![替换内容](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg)\n```\n\n![替换内容](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg)\n\n\n\n- 图片也可以使用上文中超链接一样的参考方式引入。\n- 通常将图片上传至图床网站，然后以 `URL` 链接引入。\n- 此外还可以将图片放置在指定位置，使用相对路径或绝对路径访问。\n- 图片也支持 `HTML` 中`<img>`标签，并设置对齐方式，大小以及缩放比。\n\n\n\n\n\n### 2.3 公式\n\n#### 2.3.1 行内公式\n\n```markdown\n$ \\sum_{i=1}^{n}{\\log{\\alpha}} $\n```\n\n> 似乎博客的渲染器不支持行内公式渲染。 :cry:\n\n\n\n#### 2.3.2 块级公式\n\n```markdown\nR_{\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad -\\sin{\\theta} \\\\\n\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad \\sin{\\theta} \\\\\n-\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = R_{\\theta}^{T}\\\\\nR_{-\\theta} = R_{\\theta}^{-1}\n```\n\n$$\nR_{\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad -\\sin{\\theta} \\\\\n\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad \\sin{\\theta} \\\\\n-\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = R_{\\theta}^{T}\\\\\nR_{-\\theta} = R_{\\theta}^{-1}\n$$\n\n关于 `Latex` 公式的详细语法请参考 [LateX公式手册](https://www.cnblogs.com/1024th/p/11623258.html) 。\n\n\n\n\n\n### 2.4 脚注\n\n```markdown\nHere's a sentence with a footnote. [^1]\n[^1]: This is the footnote.\n```\n\nHere's a sentence with a footnote. [^1]\n\n[^1]: This is the footnote.\n\n>  似乎博客的渲染器不支持脚注。 :cry: 但是该功能对于论文引用十分有利。\n\n\n\n\n\n### 2.5 任务列表\n\n```markdown\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n```\n\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n> 似乎博客的渲染器不支持任务列表渲染。 :cry:\n\n\n\n\n\n### 2.6 使用 `emoji` 表情\n\n```mark\n:tent:  很快回来。\n:joy: very funny.\n```\n\n:tent:  很快回来。\n\n:joy: very funny.\n\n\n\n> 关于更多 Markdown 规范，请参考 [GitHub Flavored Markdown 规范](https://github.github.com/gfm/#emphasis-and-strong-emphasis)\n\n<br>\n\n\n\n## Chapter 3 Hexo 内置 `Tags` 标签\n\n\n\n> 下面的内容多数参考自：\n>\n> - [Hexo 官方文档](https://hexo.io/zh-cn/docs/tag-plugins.html)\n> - [Butterfly 主题文档](https://butterfly.js.org/)\n>\n> 其中 `Tag Plugin` 只能在网页中得到渲染效果。\n\n\n\n### 3.1 `Front-matter`\n\n#### 3.1.1 `Post Front-matter`\n\n在 `.markdown` 文件的头部声明对应的键值，博客系统将按照响应的方法进行操作。\n\n```markdown\n---\ntitle:\ndate:\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\n---\n```\n\n|                    键 | 值                                                           |\n| --------------------: | :----------------------------------------------------------- |\n|                 title | 【必需】文章标题                                             |\n|                  date | 【必需】文章创建日期                                         |\n|               updated | 【可选】文章更新日期                                         |\n|                  tags | 【可选】文章标籤                                             |\n|            categories | 【可选】文章分类                                             |\n|              keywords | 【可选】文章关键字                                           |\n|           description | 【可选】文章描述                                             |\n|               top_img | 【可选】文章顶部图片                                         |\n|                 cover | 【可选】文章缩略图<br />(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空) |\n|              comments | 【可选】显示文章评论模块<br />(默认 true)                    |\n|                   toc | 【可选】显示文章TOC<br />(默认为设置中toc的enable配置)       |\n|            toc_number | 【可选】显示toc_number<br />(默认为设置中toc的number配置)    |\n|             copyright | 【可选】显示文章版权模块<br />(默认为设置中post_copyright的enable配置) |\n|      copyright_author | 【可选】文章版权模块的文章作者                               |\n| copyright_author_href | 【可选】文章版权模块的文章作者链接                           |\n|         copyright_url | 【可选】文章版权模块的文章连结链接                           |\n|        copyright_info | 【可选】文章版权模块的版权声明文字                           |\n|               mathjax | 【可选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false) |\n|                 katex | 【可选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false) |\n|               aplayer | 【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置 |\n|      highlight_shrink | 【可选】配置代码框是否展开<br />(true/false)(默认为设置中highlight_shrink的配置) |\n|                 aside | 【可选】显示侧边栏<br /> (默认 true)                         |\n\n\n\n#### 3.1.2 `Post Front-matter`\n\n```markdown\n---\ntitle:\ndate:\nupdated:\ntype:\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n```\n\n|               键 | 值                                                           |\n| ---------------: | :----------------------------------------------------------- |\n|            title | 【必需】文章标题                                             |\n|             date | 【必需】文章创建日期                                         |\n|             type | 【必需】标籤、分类和友情链接三个页面需要配置                 |\n|          updated | 【可选】文章更新日期                                         |\n|      description | 【可选】页面描述                                             |\n|         keywords | 【可选】文章关键字                                           |\n|         comments | 【可选】显示页面评论模块<br />(默认 true)                    |\n|          top_img | 【可选】页面顶部图片                                         |\n|          mathjax | 【可选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false) |\n|            katex | 【可选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false) |\n|          aplayer | 【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置 |\n| highlight_shrink | 【可选】配置代码框是否展开<br />(true/false)(默认为设置中highlight_shrink的配置) |\n|            aside | 【可选】显示侧边栏<br /> (默认 true)                         |\n\n\n\n\n\n### 3.2 标签外挂\n\n```markdown\n{% note [class] [no-icon] [style] %}\nAny content (support inline tags too.io).\n{% endnote %}\n```\n\n| 名称    | 用法                                                         |\n| ------- | ------------------------------------------------------------ |\n| class   | 【可选】标识，不同的标识有不同的配色<br/>（ default / primary / success / info / warning / danger ） |\n| no-icon | 【可选】不显示 icon                                          |\n| style   | 【可选】可以覆盖配置中的 style<br/>（simple/modern/flat/disabled） |\n\n{% note simple %}\n默认 提示标签块\n{% endnote %}\n\n{% note default simple %}\ndefault 提示标签块\n{% endnote %}\n\n{% note primary simple %}\nprimary 提示标签块\n{% endnote %}\n\n{% note success simple %}\nsuccess 提示标签块\n{% endnote %}\n\n{% note info simple %}\ninfo 提示标签块\n{% endnote %}\n\n{% note warning simple %}\nwarning 提示标签块\n{% endnote %}\n\n{% note danger simple %}\ndanger 提示标签块\n{% endnote %}\n\n\n\n\n\n### `Gallary` 相册图库\n\n```markdown\n<div class=\"gallery-group-main\">\n{% galleryGroup name description link img-url %}\n{% galleryGroup name description link img-url %}\n{% galleryGroup name description link img-url %}\n</div>\n```\n\n| 键          | 值                   |\n| ----------- | -------------------- |\n| name        | 图库名               |\n| description | 图库描述             |\n| link        | 链接到对应的相册地址 |\n| img-url     | 图库封面的地址       |\n\n\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '插画' 收藏的优雅二次元！ '/gallary/inset/' https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg %}\n{% galleryGroup '照片' 收藏的好康摄影！ '/gallary/photo/' https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/background.png %}\n</div>\n\n\n\n\n\n### 3.3 `Gallary` 相册\n\n```markdown\n{% gallery %}\n![]()\n{% endgallery %}\n```\n\n{% gallery %}\n![](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/background.png)\n![](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/e6e09d1b09711bb40fa672450aafd3405690bb121080.png)\n\n{% endgallery %}\n\n\n\n\n\n### 3.4 文字隐藏\n\n```markdown\n{% hideInline content,display,bg,color %}\n\n{% hideBlock display,bg,color %}\ncontent\n{% endhideBlock %}\n\n{% hideToggle display,bg,color %}\ncontent\n{% endhideToggle %}\n```\n\n{% hideToggle Butterfly安装方法 %}\n在你的博客根目录里\n\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly\n\n如果想要安装比较新的dev分支，可以\n\ngit clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly\n\n{% endhideToggle %}\n\n\n\n\n\n### 3.5 页内标签\n\n```markdown\n{% tabs Unique name, [index] %}\n<!-- tab [Tab caption] [@icon] -->\nAny content (support inline tags too).\n<!-- endtab -->\n{% endtabs %}\n\nUnique name   : Unique name of tabs block tag without comma.\n                Will be used in #id's as prefix for each tab with their index numbers.\n                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.\n                Only for current url of post/page must be unique!\n[index]       : Index number of active tab.\n                If not specified, first tab (1) will be selected.\n                If index is -1, no tab will be selected. It's will be something like spoiler.\n                Optional parameter.\n[Tab caption] : Caption of current tab.\n                If not caption specified, unique name with tab index suffix will be used as caption of tab.\n                If not caption specified, but specified icon, caption will empty.\n                Optional parameter.\n[@icon]       : FontAwesome icon name (full-name, look like 'fas fa-font')\n                Can be specified with or without space; e.g. 'Tab caption @icon' similar to 'Tab caption@icon'.\n                Optional parameter.\n```\n\n{% tabs test1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n\n\n\n\n\n### 3.6 页内按钮\n\n```markdown\n{% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %}\n\n[url]         : 链接\n[text]        : 按钮文字\n[icon]        : [可选] 图标\n[color]       : [可选] 按钮背景顔色(默认style时）\n                      按钮字体和边框顔色(outline时)\n                      default/blue/pink/red/purple/orange/green\n[style]       : [可选] 按钮样式 默认实心\n                      outline/留空\n[layout]      : [可选] 按钮佈局 默认为line\n                      block/留空\n[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边\n                      center/right/留空\n[size]        : [可选] 按钮大小\n                      larger/留空\n```\n\n<div class=\"btn-center\">\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline blue larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline pink larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline red larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline purple larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline orange larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline green larger %}\n</div>\n\n\n\n\n### 3.7 页内文字标签\n\n```markdown\n{% label [text] [color] %}\n\n[text] 文字\n[color] [可选] 背景颜色，默认为 default/blue/pink/red/purple/orange/green\n```\n\n臣亮言：{% label 先帝 %}创业未半，而{% label 中道崩殂 blue %}。今天下三分，{% label 益州疲敝 pink %}，此诚{% label 危急存亡之秋 red %}也！然侍衞之臣，不懈于内；{% label 忠志之士 purple %}，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。\n宫中、府中，俱为一体；陟罚臧否，不宜异同。若有{% label 作奸 orange %}、{% label 犯科 green %}，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。\n\n<br>\n\n\n\n## Chapter 4 结语\n\n到这里，博客内使用的绝大多数 Markdown 语法以及 Tag Plugin 语法均有提及。这一篇文章将作为写作参考，供未来的我使用。:raised_hands:\n\n也欢迎各位来访的朋友参考！:rocket: \n\n \n","source":"_posts/Markdown-Function-Usage-Dict.md","raw":"---\ntitle: Markdown 写法使用案例库说明\ndate: 2021-10-25 17:52:19\ncategories: 教程\ntags:\n  - 指南\n  - 教程\n  - Markdown\ncover: https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg\nkatex: true\n---\n\n\n\n# Markdown 写法使用案例说明\n\n\n\n> 本案例使用 类 `Atx` 格式标准。\n\n\n\n## Chapter 1 Markdown 基本文字语法\n\n\n\n### 1.1 标题\n\n共有 `1~6` 不同级别的标题。\n\n```markdown\n# 这是一个一级标题\n## 这是一个二级标题\n###### 这是一个六级标题\n```\n\n\n\n\n\n### 1.2 字体效果\n\n可以显示**加粗**，*斜体*，~~删除线效果~~ 。\n\n```markdown\n**加粗**\n*斜体*\n~~删除线~~\n```\n\n如需加入普通符号，使用 `\\` 进行转义。\n\n\n\n\n\n### 1.3 分割线\n\n使用 `3` 个以上的 `*` ,  `-` ，`_` 建立分割线。\n\n```markdown\n___\n***\n---\n```\n\n___\n\n\n\n\n\n### 1.4 引用块\n\n使用 `>` 标识一个引用块。\n\n```markdown\n> This is a blockquote. It can contains a paragraph.\n\n> > This a nested blockquote.\n```\n\n> This is a blockquote. It can contains a paragraph.\n>\n> > This a nested blockquote.\n\n引用块内可以嵌套其他 Markdown 语法元素。\n\n\n\n\n\n### 1.5 列表\n\n> 所有的列表项都会嵌套并改变多级列表前的指示符号。\n>\n> 定义列表不被 \t`Typora` 支持。\n\n\n\n#### 1.5.1 无序列表\n\n```markdown\n- 列表项\n- 列表项\n- 列表项\n```\n\n- 列表项\n- 列表项\n- 列表项\n\n\n\n#### 1.5.2 有序列表\n\n```markdown\n1. 列表项\n2. 列表项\n3. 列表项\n```\n\n1. 列表项\n2. 列表项\n3. 列表项\n\n\n\n\n\n### 1.6 表格\n\n```markdown\n| 表头 | 表头 | 表头 |\n| :--: | :--: | :--: |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n```\n\n| 表头 | 表头 | 表头 |\n| :--: | :--: | :--: |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n\n\n\n使用冒号表示该列的对齐方式。\n\n\n\n\n\n### 1.7 代码\n\n#### 1.7.1 单行代码\n\n```markdown\n`#include <iostream>`\n```\n\n`#include <iostream>`\n\n\n\n#### 1.7.2 多行代码\n\n````markdown\n```c++\n#include <iostream>\nusing namespace std;\n```\n````\n\n\n\n```c++\n#include <iostream>\nusing namespace std;\n```\n\n\n\n\n\n### 1.8 段落与换行\n\n`Markdown` 段落前后要有一个以上的空行。\n\n- 使用 <kbd>Shift</kbd> + <kbd>Enter</kbd> 可以实现段内换行。源码表现为一个空行。\n- 使用 <kbd>Enter</kbd> 可以实现文本块的换行。源码表现为两个空行。\n\n<br>\n\n\n\n## Chapter 2  Markdown 扩展功能语法\n\n\n\n### 2.1 超链接\n\n#### 2.1.1 基本方式\n\n```markdown\n这是一个指向 [必应](https://www.bing.com) 的链接。\n```\n\n这是一个指向 [必应](https://www.bing.com) 的链接。\n\n\n\n#### 2.1.2 参考方式\n\n```markdown\n这是一个先使用，后定义的 [必应][Bing] 脚注链接。\n[Bing]: https://www.bing.com \"Bing Link\"\n```\n\n只是一个先使用，后定义的 [必应][Bing] 链接。\n\n[Bing]: https://www.bing.com \"Bing Link\"\n\n\n\n#### 2.1.3 简洁方式\n\n```markdown\n<https://bing.com>\n```\n\n<https://bing.com>\n\n\n\n- 注意超链接内部没有空格。\n- 同样支持 `HTML` 中的 `<a>` 标签。\n\n\n\n\n\n### 2.2 图片\n\n#### 2.2.1 基本方式\n\n```markdown\n![替换内容](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg)\n```\n\n![替换内容](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg)\n\n\n\n- 图片也可以使用上文中超链接一样的参考方式引入。\n- 通常将图片上传至图床网站，然后以 `URL` 链接引入。\n- 此外还可以将图片放置在指定位置，使用相对路径或绝对路径访问。\n- 图片也支持 `HTML` 中`<img>`标签，并设置对齐方式，大小以及缩放比。\n\n\n\n\n\n### 2.3 公式\n\n#### 2.3.1 行内公式\n\n```markdown\n$ \\sum_{i=1}^{n}{\\log{\\alpha}} $\n```\n\n> 似乎博客的渲染器不支持行内公式渲染。 :cry:\n\n\n\n#### 2.3.2 块级公式\n\n```markdown\nR_{\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad -\\sin{\\theta} \\\\\n\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad \\sin{\\theta} \\\\\n-\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = R_{\\theta}^{T}\\\\\nR_{-\\theta} = R_{\\theta}^{-1}\n```\n\n$$\nR_{\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad -\\sin{\\theta} \\\\\n\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad \\sin{\\theta} \\\\\n-\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = R_{\\theta}^{T}\\\\\nR_{-\\theta} = R_{\\theta}^{-1}\n$$\n\n关于 `Latex` 公式的详细语法请参考 [LateX公式手册](https://www.cnblogs.com/1024th/p/11623258.html) 。\n\n\n\n\n\n### 2.4 脚注\n\n```markdown\nHere's a sentence with a footnote. [^1]\n[^1]: This is the footnote.\n```\n\nHere's a sentence with a footnote. [^1]\n\n[^1]: This is the footnote.\n\n>  似乎博客的渲染器不支持脚注。 :cry: 但是该功能对于论文引用十分有利。\n\n\n\n\n\n### 2.5 任务列表\n\n```markdown\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n```\n\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n> 似乎博客的渲染器不支持任务列表渲染。 :cry:\n\n\n\n\n\n### 2.6 使用 `emoji` 表情\n\n```mark\n:tent:  很快回来。\n:joy: very funny.\n```\n\n:tent:  很快回来。\n\n:joy: very funny.\n\n\n\n> 关于更多 Markdown 规范，请参考 [GitHub Flavored Markdown 规范](https://github.github.com/gfm/#emphasis-and-strong-emphasis)\n\n<br>\n\n\n\n## Chapter 3 Hexo 内置 `Tags` 标签\n\n\n\n> 下面的内容多数参考自：\n>\n> - [Hexo 官方文档](https://hexo.io/zh-cn/docs/tag-plugins.html)\n> - [Butterfly 主题文档](https://butterfly.js.org/)\n>\n> 其中 `Tag Plugin` 只能在网页中得到渲染效果。\n\n\n\n### 3.1 `Front-matter`\n\n#### 3.1.1 `Post Front-matter`\n\n在 `.markdown` 文件的头部声明对应的键值，博客系统将按照响应的方法进行操作。\n\n```markdown\n---\ntitle:\ndate:\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\n---\n```\n\n|                    键 | 值                                                           |\n| --------------------: | :----------------------------------------------------------- |\n|                 title | 【必需】文章标题                                             |\n|                  date | 【必需】文章创建日期                                         |\n|               updated | 【可选】文章更新日期                                         |\n|                  tags | 【可选】文章标籤                                             |\n|            categories | 【可选】文章分类                                             |\n|              keywords | 【可选】文章关键字                                           |\n|           description | 【可选】文章描述                                             |\n|               top_img | 【可选】文章顶部图片                                         |\n|                 cover | 【可选】文章缩略图<br />(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空) |\n|              comments | 【可选】显示文章评论模块<br />(默认 true)                    |\n|                   toc | 【可选】显示文章TOC<br />(默认为设置中toc的enable配置)       |\n|            toc_number | 【可选】显示toc_number<br />(默认为设置中toc的number配置)    |\n|             copyright | 【可选】显示文章版权模块<br />(默认为设置中post_copyright的enable配置) |\n|      copyright_author | 【可选】文章版权模块的文章作者                               |\n| copyright_author_href | 【可选】文章版权模块的文章作者链接                           |\n|         copyright_url | 【可选】文章版权模块的文章连结链接                           |\n|        copyright_info | 【可选】文章版权模块的版权声明文字                           |\n|               mathjax | 【可选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false) |\n|                 katex | 【可选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false) |\n|               aplayer | 【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置 |\n|      highlight_shrink | 【可选】配置代码框是否展开<br />(true/false)(默认为设置中highlight_shrink的配置) |\n|                 aside | 【可选】显示侧边栏<br /> (默认 true)                         |\n\n\n\n#### 3.1.2 `Post Front-matter`\n\n```markdown\n---\ntitle:\ndate:\nupdated:\ntype:\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n```\n\n|               键 | 值                                                           |\n| ---------------: | :----------------------------------------------------------- |\n|            title | 【必需】文章标题                                             |\n|             date | 【必需】文章创建日期                                         |\n|             type | 【必需】标籤、分类和友情链接三个页面需要配置                 |\n|          updated | 【可选】文章更新日期                                         |\n|      description | 【可选】页面描述                                             |\n|         keywords | 【可选】文章关键字                                           |\n|         comments | 【可选】显示页面评论模块<br />(默认 true)                    |\n|          top_img | 【可选】页面顶部图片                                         |\n|          mathjax | 【可选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false) |\n|            katex | 【可选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false) |\n|          aplayer | 【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置 |\n| highlight_shrink | 【可选】配置代码框是否展开<br />(true/false)(默认为设置中highlight_shrink的配置) |\n|            aside | 【可选】显示侧边栏<br /> (默认 true)                         |\n\n\n\n\n\n### 3.2 标签外挂\n\n```markdown\n{% note [class] [no-icon] [style] %}\nAny content (support inline tags too.io).\n{% endnote %}\n```\n\n| 名称    | 用法                                                         |\n| ------- | ------------------------------------------------------------ |\n| class   | 【可选】标识，不同的标识有不同的配色<br/>（ default / primary / success / info / warning / danger ） |\n| no-icon | 【可选】不显示 icon                                          |\n| style   | 【可选】可以覆盖配置中的 style<br/>（simple/modern/flat/disabled） |\n\n{% note simple %}\n默认 提示标签块\n{% endnote %}\n\n{% note default simple %}\ndefault 提示标签块\n{% endnote %}\n\n{% note primary simple %}\nprimary 提示标签块\n{% endnote %}\n\n{% note success simple %}\nsuccess 提示标签块\n{% endnote %}\n\n{% note info simple %}\ninfo 提示标签块\n{% endnote %}\n\n{% note warning simple %}\nwarning 提示标签块\n{% endnote %}\n\n{% note danger simple %}\ndanger 提示标签块\n{% endnote %}\n\n\n\n\n\n### `Gallary` 相册图库\n\n```markdown\n<div class=\"gallery-group-main\">\n{% galleryGroup name description link img-url %}\n{% galleryGroup name description link img-url %}\n{% galleryGroup name description link img-url %}\n</div>\n```\n\n| 键          | 值                   |\n| ----------- | -------------------- |\n| name        | 图库名               |\n| description | 图库描述             |\n| link        | 链接到对应的相册地址 |\n| img-url     | 图库封面的地址       |\n\n\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '插画' 收藏的优雅二次元！ '/gallary/inset/' https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg %}\n{% galleryGroup '照片' 收藏的好康摄影！ '/gallary/photo/' https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/background.png %}\n</div>\n\n\n\n\n\n### 3.3 `Gallary` 相册\n\n```markdown\n{% gallery %}\n![]()\n{% endgallery %}\n```\n\n{% gallery %}\n![](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/background.png)\n![](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/e6e09d1b09711bb40fa672450aafd3405690bb121080.png)\n\n{% endgallery %}\n\n\n\n\n\n### 3.4 文字隐藏\n\n```markdown\n{% hideInline content,display,bg,color %}\n\n{% hideBlock display,bg,color %}\ncontent\n{% endhideBlock %}\n\n{% hideToggle display,bg,color %}\ncontent\n{% endhideToggle %}\n```\n\n{% hideToggle Butterfly安装方法 %}\n在你的博客根目录里\n\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly\n\n如果想要安装比较新的dev分支，可以\n\ngit clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly\n\n{% endhideToggle %}\n\n\n\n\n\n### 3.5 页内标签\n\n```markdown\n{% tabs Unique name, [index] %}\n<!-- tab [Tab caption] [@icon] -->\nAny content (support inline tags too).\n<!-- endtab -->\n{% endtabs %}\n\nUnique name   : Unique name of tabs block tag without comma.\n                Will be used in #id's as prefix for each tab with their index numbers.\n                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.\n                Only for current url of post/page must be unique!\n[index]       : Index number of active tab.\n                If not specified, first tab (1) will be selected.\n                If index is -1, no tab will be selected. It's will be something like spoiler.\n                Optional parameter.\n[Tab caption] : Caption of current tab.\n                If not caption specified, unique name with tab index suffix will be used as caption of tab.\n                If not caption specified, but specified icon, caption will empty.\n                Optional parameter.\n[@icon]       : FontAwesome icon name (full-name, look like 'fas fa-font')\n                Can be specified with or without space; e.g. 'Tab caption @icon' similar to 'Tab caption@icon'.\n                Optional parameter.\n```\n\n{% tabs test1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n\n\n\n\n\n### 3.6 页内按钮\n\n```markdown\n{% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %}\n\n[url]         : 链接\n[text]        : 按钮文字\n[icon]        : [可选] 图标\n[color]       : [可选] 按钮背景顔色(默认style时）\n                      按钮字体和边框顔色(outline时)\n                      default/blue/pink/red/purple/orange/green\n[style]       : [可选] 按钮样式 默认实心\n                      outline/留空\n[layout]      : [可选] 按钮佈局 默认为line\n                      block/留空\n[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边\n                      center/right/留空\n[size]        : [可选] 按钮大小\n                      larger/留空\n```\n\n<div class=\"btn-center\">\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline blue larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline pink larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline red larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline purple larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline orange larger %}\n{% btn 'https://butterfly.js.org/',Butterfly,far fa-hand-point-right,outline green larger %}\n</div>\n\n\n\n\n### 3.7 页内文字标签\n\n```markdown\n{% label [text] [color] %}\n\n[text] 文字\n[color] [可选] 背景颜色，默认为 default/blue/pink/red/purple/orange/green\n```\n\n臣亮言：{% label 先帝 %}创业未半，而{% label 中道崩殂 blue %}。今天下三分，{% label 益州疲敝 pink %}，此诚{% label 危急存亡之秋 red %}也！然侍衞之臣，不懈于内；{% label 忠志之士 purple %}，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。\n宫中、府中，俱为一体；陟罚臧否，不宜异同。若有{% label 作奸 orange %}、{% label 犯科 green %}，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。\n\n<br>\n\n\n\n## Chapter 4 结语\n\n到这里，博客内使用的绝大多数 Markdown 语法以及 Tag Plugin 语法均有提及。这一篇文章将作为写作参考，供未来的我使用。:raised_hands:\n\n也欢迎各位来访的朋友参考！:rocket: \n\n \n","slug":"Markdown-Function-Usage-Dict","published":1,"updated":"2021-10-25T12:57:59.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6sg9oe000b08t52j4m00v7","content":"<h1>Markdown 写法使用案例说明</h1>\n<blockquote>\n<p>本案例使用 类 <code>Atx</code> 格式标准。</p>\n</blockquote>\n<h2 id=\"Chapter-1-Markdown-基本文字语法\">Chapter 1 Markdown 基本文字语法</h2>\n<h3 id=\"1-1-标题\">1.1 标题</h3>\n<p>共有 <code>1~6</code> 不同级别的标题。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 这是一个一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 这是一个二级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 这是一个六级标题</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-字体效果\">1.2 字体效果</h3>\n<p>可以显示<strong>加粗</strong>，<em>斜体</em>，<s>删除线效果</s> 。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**加粗**</span></span><br><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br><span class=\"line\">~~删除线~~</span><br></pre></td></tr></table></figure>\n<p>如需加入普通符号，使用 <code>\\</code> 进行转义。</p>\n<h3 id=\"1-3-分割线\">1.3 分割线</h3>\n<p>使用 <code>3</code> 个以上的 <code>*</code> ,  <code>-</code> ，<code>_</code> 建立分割线。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">__<span class=\"emphasis\">_</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\">---</span></span></span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-4-引用块\">1.4 引用块</h3>\n<p>使用 <code>&gt;</code> 标识一个引用块。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; This is a blockquote. It can contains a paragraph.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; This a nested blockquote.</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>This is a blockquote. It can contains a paragraph.</p>\n<blockquote>\n<p>This a nested blockquote.</p>\n</blockquote>\n</blockquote>\n<p>引用块内可以嵌套其他 Markdown 语法元素。</p>\n<h3 id=\"1-5-列表\">1.5 列表</h3>\n<blockquote>\n<p>所有的列表项都会嵌套并改变多级列表前的指示符号。</p>\n<p>定义列表不被 \t<code>Typora</code> 支持。</p>\n</blockquote>\n<h4 id=\"1-5-1-无序列表\">1.5.1 无序列表</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 列表项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 列表项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 列表项</span><br></pre></td></tr></table></figure>\n<ul>\n<li>列表项</li>\n<li>列表项</li>\n<li>列表项</li>\n</ul>\n<h4 id=\"1-5-2-有序列表\">1.5.2 有序列表</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 列表项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 列表项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 列表项</span><br></pre></td></tr></table></figure>\n<ol>\n<li>列表项</li>\n<li>列表项</li>\n<li>列表项</li>\n</ol>\n<h3 id=\"1-6-表格\">1.6 表格</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 表头 | 表头 | 表头 |</span><br><span class=\"line\">| :--: | :--: | :--: |</span><br><span class=\"line\">| 内容 | 内容 | 内容 |</span><br><span class=\"line\">| 内容 | 内容 | 内容 |</span><br><span class=\"line\">| 内容 | 内容 | 内容 |</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:center\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n</tr>\n</tbody>\n</table>\n<p>使用冒号表示该列的对齐方式。</p>\n<h3 id=\"1-7-代码\">1.7 代码</h3>\n<h4 id=\"1-7-1-单行代码\">1.7.1 单行代码</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`#include &lt;iostream&gt;`</span></span><br></pre></td></tr></table></figure>\n<p><code>#include &lt;iostream&gt;</code></p>\n<h4 id=\"1-7-2-多行代码\">1.7.2 多行代码</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">```c++</span></span><br><span class=\"line\"><span class=\"code\">#include &lt;iostream&gt;</span></span><br><span class=\"line\"><span class=\"code\">using namespace std;</span></span><br><span class=\"line\"><span class=\"code\">```</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-8-段落与换行\">1.8 段落与换行</h3>\n<p><code>Markdown</code> 段落前后要有一个以上的空行。</p>\n<ul>\n<li>使用 <kbd>Shift</kbd> + <kbd>Enter</kbd> 可以实现段内换行。源码表现为一个空行。</li>\n<li>使用 <kbd>Enter</kbd> 可以实现文本块的换行。源码表现为两个空行。</li>\n</ul>\n<br>\n<h2 id=\"Chapter-2-Markdown-扩展功能语法\">Chapter 2  Markdown 扩展功能语法</h2>\n<h3 id=\"2-1-超链接\">2.1 超链接</h3>\n<h4 id=\"2-1-1-基本方式\">2.1.1 基本方式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个指向 [<span class=\"string\">必应</span>](<span class=\"link\">https://www.bing.com</span>) 的链接。</span><br></pre></td></tr></table></figure>\n<p>这是一个指向 <a href=\"https://www.bing.com\">必应</a> 的链接。</p>\n<h4 id=\"2-1-2-参考方式\">2.1.2 参考方式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个先使用，后定义的 [<span class=\"string\">必应</span>][<span class=\"symbol\">Bing</span>] 脚注链接。</span><br><span class=\"line\">[<span class=\"symbol\">Bing</span>]: <span class=\"link\">https://www.bing.com &quot;Bing Link&quot;</span></span><br></pre></td></tr></table></figure>\n<p>只是一个先使用，后定义的 <a href=\"https://www.bing.com\" title=\"Bing Link\">必应</a> 链接。</p>\n<h4 id=\"2-1-3-简洁方式\">2.1.3 简洁方式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">&lt;https://bing.com&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://bing.com\">https://bing.com</a></p>\n<ul>\n<li>注意超链接内部没有空格。</li>\n<li>同样支持 <code>HTML</code> 中的 <code>&lt;a&gt;</code> 标签。</li>\n</ul>\n<h3 id=\"2-2-图片\">2.2 图片</h3>\n<h4 id=\"2-2-1-基本方式\">2.2.1 基本方式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">替换内容</span>](<span class=\"link\">https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg\" alt=\"替换内容\"></p>\n<ul>\n<li>图片也可以使用上文中超链接一样的参考方式引入。</li>\n<li>通常将图片上传至图床网站，然后以 <code>URL</code> 链接引入。</li>\n<li>此外还可以将图片放置在指定位置，使用相对路径或绝对路径访问。</li>\n<li>图片也支持 <code>HTML</code> 中<code>&lt;img&gt;</code>标签，并设置对齐方式，大小以及缩放比。</li>\n</ul>\n<h3 id=\"2-3-公式\">2.3 公式</h3>\n<h4 id=\"2-3-1-行内公式\">2.3.1 行内公式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ \\sum<span class=\"emphasis\">_&#123;i=1&#125;^&#123;n&#125;&#123;\\log&#123;\\alpha&#125;&#125; $</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>似乎博客的渲染器不支持行内公式渲染。 <span class=\"github-emoji\" alias=\"cry\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8\">😢</span></p>\n</blockquote>\n<h4 id=\"2-3-2-块级公式\">2.3.2 块级公式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R<span class=\"emphasis\">_&#123;\\theta&#125; = \\begin&#123;bmatrix&#125; </span></span><br><span class=\"line\"><span class=\"emphasis\">\\cos&#123;\\theta&#125; \\quad -\\sin&#123;\\theta&#125; \\\\</span></span><br><span class=\"line\"><span class=\"emphasis\">\\sin&#123;\\theta&#125; \\quad \\cos&#123;\\theta&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">\\end&#123;bmatrix&#125;\\\\</span></span><br><span class=\"line\"><span class=\"emphasis\">R_</span>&#123;-\\theta&#125; = \\begin&#123;bmatrix&#125; </span><br><span class=\"line\">\\cos&#123;\\theta&#125; \\quad \\sin&#123;\\theta&#125; \\\\</span><br><span class=\"line\">-\\sin&#123;\\theta&#125; \\quad \\cos&#123;\\theta&#125;</span><br><span class=\"line\">\\end&#123;bmatrix&#125;\\\\</span><br><span class=\"line\">R<span class=\"emphasis\">_&#123;-\\theta&#125; = R_</span>&#123;\\theta&#125;^&#123;T&#125;\\\\</span><br><span class=\"line\">R<span class=\"emphasis\">_&#123;-\\theta&#125; = R_</span>&#123;\\theta&#125;^&#123;-1&#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>R</mi><mi>θ</mi></msub><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.1600em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mspace width=\"1em\"/><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mspace width=\"1em\"/><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mspace linebreak=\"newline\"></mspace><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.1600em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mspace width=\"1em\"/><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mspace width=\"1em\"/><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mspace linebreak=\"newline\"></mspace><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><msubsup><mi>R</mi><mi>θ</mi><mi>T</mi></msubsup><mspace linebreak=\"newline\"></mspace><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><msubsup><mi>R</mi><mi>θ</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">R_{\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad -\\sin{\\theta} \\\\\n\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad \\sin{\\theta} \\\\\n-\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = R_{\\theta}^{T}\\\\\nR_{-\\theta} = R_{\\theta}^{-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138331em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1555469999999999em;vertical-align:-0.2914389999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.408561em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2914389999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>关于 <code>Latex</code> 公式的详细语法请参考 <a href=\"https://www.cnblogs.com/1024th/p/11623258.html\">LateX公式手册</a> 。</p>\n<h3 id=\"2-4-脚注\">2.4 脚注</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&#x27;s a sentence with a footnote. [^1]</span><br><span class=\"line\">[<span class=\"symbol\">^1</span>]: <span class=\"link\">This is the footnote.</span></span><br></pre></td></tr></table></figure>\n<p>Here’s a sentence with a footnote. [^1]</p>\n<p>[^1]: This is the footnote.</p>\n<blockquote>\n<p>似乎博客的渲染器不支持脚注。 <span class=\"github-emoji\" alias=\"cry\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8\">😢</span> 但是该功能对于论文引用十分有利。</p>\n</blockquote>\n<h3 id=\"2-5-任务列表\">2.5 任务列表</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> [x] Write the press release</span><br><span class=\"line\"><span class=\"bullet\">-</span> [ ] Update the website</span><br><span class=\"line\"><span class=\"bullet\">-</span> [ ] Contact the media</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[x] Write the press release</li>\n<li>[ ] Update the website</li>\n<li>[ ] Contact the media</li>\n</ul>\n<blockquote>\n<p>似乎博客的渲染器不支持任务列表渲染。 <span class=\"github-emoji\" alias=\"cry\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8\">😢</span></p>\n</blockquote>\n<h3 id=\"2-6-使用-emoji-表情\">2.6 使用 <code>emoji</code> 表情</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"github-emoji\" alias=\"tent\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8\">&#x26fa;</span>  很快回来。</span><br><span class=\"line\"><span class=\"github-emoji\" alias=\"joy\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8\">&#x1f602;</span> very funny.</span><br></pre></td></tr></table></figure>\n<p><span class=\"github-emoji\" alias=\"tent\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8\">⛺</span>  很快回来。</p>\n<p><span class=\"github-emoji\" alias=\"joy\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8\">😂</span> very funny.</p>\n<blockquote>\n<p>关于更多 Markdown 规范，请参考 <a href=\"https://github.github.com/gfm/#emphasis-and-strong-emphasis\">GitHub Flavored Markdown 规范</a></p>\n</blockquote>\n<br>\n<h2 id=\"Chapter-3-Hexo-内置-Tags-标签\">Chapter 3 Hexo 内置 <code>Tags</code> 标签</h2>\n<blockquote>\n<p>下面的内容多数参考自：</p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\">Hexo 官方文档</a></li>\n<li><a href=\"https://butterfly.js.org/\">Butterfly 主题文档</a></li>\n</ul>\n<p>其中 <code>Tag Plugin</code> 只能在网页中得到渲染效果。</p>\n</blockquote>\n<h3 id=\"3-1-Front-matter\">3.1 <code>Front-matter</code></h3>\n<h4 id=\"3-1-1-Post-Front-matter\">3.1.1 <code>Post Front-matter</code></h4>\n<p>在 <code>.markdown</code> 文件的头部声明对应的键值，博客系统将按照响应的方法进行操作。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:</span><br><span class=\"line\">date:</span><br><span class=\"line\">updated:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">description:</span><br><span class=\"line\">top<span class=\"emphasis\">_img:</span></span><br><span class=\"line\"><span class=\"emphasis\">comments:</span></span><br><span class=\"line\"><span class=\"emphasis\">cover:</span></span><br><span class=\"line\"><span class=\"emphasis\">toc:</span></span><br><span class=\"line\"><span class=\"emphasis\">toc_</span>number:</span><br><span class=\"line\">copyright:</span><br><span class=\"line\">copyright<span class=\"emphasis\">_author:</span></span><br><span class=\"line\"><span class=\"emphasis\">copyright_</span>author<span class=\"emphasis\">_href:</span></span><br><span class=\"line\"><span class=\"emphasis\">copyright_</span>url:</span><br><span class=\"line\">copyright<span class=\"emphasis\">_info:</span></span><br><span class=\"line\"><span class=\"emphasis\">mathjax:</span></span><br><span class=\"line\"><span class=\"emphasis\">katex:</span></span><br><span class=\"line\"><span class=\"emphasis\">aplayer:</span></span><br><span class=\"line\"><span class=\"emphasis\">highlight_</span>shrink:</span><br><span class=\"line\"><span class=\"section\">aside:</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">键</th>\n<th style=\"text-align:left\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">title</td>\n<td style=\"text-align:left\">【必需】文章标题</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">date</td>\n<td style=\"text-align:left\">【必需】文章创建日期</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">updated</td>\n<td style=\"text-align:left\">【可选】文章更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">tags</td>\n<td style=\"text-align:left\">【可选】文章标籤</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">categories</td>\n<td style=\"text-align:left\">【可选】文章分类</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">keywords</td>\n<td style=\"text-align:left\">【可选】文章关键字</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">description</td>\n<td style=\"text-align:left\">【可选】文章描述</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">top_img</td>\n<td style=\"text-align:left\">【可选】文章顶部图片</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">cover</td>\n<td style=\"text-align:left\">【可选】文章缩略图<br />(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">comments</td>\n<td style=\"text-align:left\">【可选】显示文章评论模块<br />(默认 true)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">toc</td>\n<td style=\"text-align:left\">【可选】显示文章TOC<br />(默认为设置中toc的enable配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">toc_number</td>\n<td style=\"text-align:left\">【可选】显示toc_number<br />(默认为设置中toc的number配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright</td>\n<td style=\"text-align:left\">【可选】显示文章版权模块<br />(默认为设置中post_copyright的enable配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright_author</td>\n<td style=\"text-align:left\">【可选】文章版权模块的文章作者</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright_author_href</td>\n<td style=\"text-align:left\">【可选】文章版权模块的文章作者链接</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright_url</td>\n<td style=\"text-align:left\">【可选】文章版权模块的文章连结链接</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright_info</td>\n<td style=\"text-align:left\">【可选】文章版权模块的版权声明文字</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">mathjax</td>\n<td style=\"text-align:left\">【可选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">katex</td>\n<td style=\"text-align:left\">【可选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">aplayer</td>\n<td style=\"text-align:left\">【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">highlight_shrink</td>\n<td style=\"text-align:left\">【可选】配置代码框是否展开<br />(true/false)(默认为设置中highlight_shrink的配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">aside</td>\n<td style=\"text-align:left\">【可选】显示侧边栏<br /> (默认 true)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-1-2-Post-Front-matter\">3.1.2 <code>Post Front-matter</code></h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:</span><br><span class=\"line\">date:</span><br><span class=\"line\">updated:</span><br><span class=\"line\">type:</span><br><span class=\"line\">comments:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">top<span class=\"emphasis\">_img:</span></span><br><span class=\"line\"><span class=\"emphasis\">mathjax:</span></span><br><span class=\"line\"><span class=\"emphasis\">katex:</span></span><br><span class=\"line\"><span class=\"emphasis\">aside:</span></span><br><span class=\"line\"><span class=\"emphasis\">aplayer:</span></span><br><span class=\"line\"><span class=\"emphasis\">highlight_</span>shrink:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">键</th>\n<th style=\"text-align:left\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">title</td>\n<td style=\"text-align:left\">【必需】文章标题</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">date</td>\n<td style=\"text-align:left\">【必需】文章创建日期</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">type</td>\n<td style=\"text-align:left\">【必需】标籤、分类和友情链接三个页面需要配置</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">updated</td>\n<td style=\"text-align:left\">【可选】文章更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">description</td>\n<td style=\"text-align:left\">【可选】页面描述</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">keywords</td>\n<td style=\"text-align:left\">【可选】文章关键字</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">comments</td>\n<td style=\"text-align:left\">【可选】显示页面评论模块<br />(默认 true)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">top_img</td>\n<td style=\"text-align:left\">【可选】页面顶部图片</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">mathjax</td>\n<td style=\"text-align:left\">【可选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">katex</td>\n<td style=\"text-align:left\">【可选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">aplayer</td>\n<td style=\"text-align:left\">【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">highlight_shrink</td>\n<td style=\"text-align:left\">【可选】配置代码框是否展开<br />(true/false)(默认为设置中highlight_shrink的配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">aside</td>\n<td style=\"text-align:left\">【可选】显示侧边栏<br /> (默认 true)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-2-标签外挂\">3.2 标签外挂</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class=\"line\">Any content (support inline tags too.io).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>class</td>\n<td>【可选】标识，不同的标识有不同的配色<br/>（ default / primary / success / info / warning / danger ）</td>\n</tr>\n<tr>\n<td>no-icon</td>\n<td>【可选】不显示 icon</td>\n</tr>\n<tr>\n<td>style</td>\n<td>【可选】可以覆盖配置中的 style<br/>（simple/modern/flat/disabled）</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note simple\"><p>默认 提示标签块</p>\n</div>\n<div class=\"note default simple\"><p>default 提示标签块</p>\n</div>\n<div class=\"note primary simple\"><p>primary 提示标签块</p>\n</div>\n<div class=\"note success simple\"><p>success 提示标签块</p>\n</div>\n<div class=\"note info simple\"><p>info 提示标签块</p>\n</div>\n<div class=\"note warning simple\"><p>warning 提示标签块</p>\n</div>\n<div class=\"note danger simple\"><p>danger 提示标签块</p>\n</div>\n<h3 id=\"Gallary-相册图库\"><code>Gallary</code> 相册图库</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>键</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>图库名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>图库描述</td>\n</tr>\n<tr>\n<td>link</td>\n<td>链接到对应的相册地址</td>\n</tr>\n<tr>\n<td>img-url</td>\n<td>图库封面的地址</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">插画</div>\n  <p>收藏的优雅二次元！</p>\n  <a href='/gallary/inset/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/background.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">照片</div>\n  <p>收藏的好康摄影！</p>\n  <a href='/gallary/photo/'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n<h3 id=\"3-3-Gallary-相册\">3.3 <code>Gallary</code> 相册</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gallery %&#125;</span><br><span class=\"line\">![]()</span><br><span class=\"line\">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"justified-gallery\"><p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/background.png\" alt=\"\"><br><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/e6e09d1b09711bb40fa672450aafd3405690bb121080.png\" alt=\"\"></p>\n          </div>\n<h3 id=\"3-4-文字隐藏\">3.4 文字隐藏</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% hideInline content,display,bg,color %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% hideBlock display,bg,color %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endhideBlock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% hideToggle display,bg,color %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Butterfly安装方法</span></div>\n    <div class=\"hide-content\"><p>在你的博客根目录里</p>\n<p>git clone -b master <a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>\n<p>如果想要安装比较新的dev分支，可以</p>\n<p>git clone -b dev <a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>\n</div></div>\n<h3 id=\"3-5-页内标签\">3.5 页内标签</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Unique name, [index] %&#125;</span><br><span class=\"line\">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class=\"line\">Any content (support inline tags too).</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Unique name   : Unique name of tabs block tag without comma.</span><br><span class=\"line\"><span class=\"code\">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class=\"line\"><span class=\"code\">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class=\"line\"><span class=\"code\">                Only for current url of post/page must be unique!</span></span><br><span class=\"line\"><span class=\"code\">[index]       : Index number of active tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not specified, first tab (1) will be selected.</span></span><br><span class=\"line\"><span class=\"code\">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">[Tab caption] : Caption of current tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class=\"line\"><span class=\"code\">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br></pre></td></tr></table></figure>\n<div class=\"tabs\" id=\"test1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#test1-1\">test1 1</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#test1-2\">test1 2</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#test1-3\">test1 3</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test1-1\"><p><strong>This is Tab 1.</strong></p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"test1-2\"><p><strong>This is Tab 2.</strong></p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"test1-3\"><p><strong>This is Tab 3.</strong></p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h3 id=\"3-6-页内按钮\">3.6 页内按钮</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[url]         : 链接</span><br><span class=\"line\">[text]        : 按钮文字</span><br><span class=\"line\">[icon]        : [可选] 图标</span><br><span class=\"line\">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class=\"line\"><span class=\"code\">                      按钮字体和边框顔色(outline时)</span></span><br><span class=\"line\"><span class=\"code\">                      default/blue/pink/red/purple/orange/green</span></span><br><span class=\"line\"><span class=\"code\">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class=\"line\"><span class=\"code\">                      outline/留空</span></span><br><span class=\"line\"><span class=\"code\">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class=\"line\"><span class=\"code\">                      block/留空</span></span><br><span class=\"line\"><span class=\"code\">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class=\"line\"><span class=\"code\">                      center/right/留空</span></span><br><span class=\"line\"><span class=\"code\">[size]        : [可选] 按钮大小</span></span><br><span class=\"line\"><span class=\"code\">                      larger/留空</span></span><br></pre></td></tr></table></figure>\n<div class=\"btn-center\">\n<a class=\"btn-beautify button--animated outline larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline blue larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline pink larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline red larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline purple larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline orange larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline green larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n</div>\n<h3 id=\"3-7-页内文字标签\">3.7 页内文字标签</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label [text] [color] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[text] 文字</span><br><span class=\"line\">[color] [可选] 背景颜色，默认为 default/blue/pink/red/purple/orange/green</span><br></pre></td></tr></table></figure>\n<p>臣亮言：<mark class=\"hl-label default\">先帝</mark> 创业未半，而<mark class=\"hl-label blue\">中道崩殂</mark> 。今天下三分，<mark class=\"hl-label pink\">益州疲敝</mark> ，此诚<mark class=\"hl-label red\">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class=\"hl-label purple\">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>\n宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class=\"hl-label orange\">作奸</mark> 、<mark class=\"hl-label green\">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>\n<br>\n<h2 id=\"Chapter-4-结语\">Chapter 4 结语</h2>\n<p>到这里，博客内使用的绝大多数 Markdown 语法以及 Tag Plugin 语法均有提及。这一篇文章将作为写作参考，供未来的我使用。<span class=\"github-emoji\" alias=\"raised_hands\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png?v8\">🙌</span></p>\n<p>也欢迎各位来访的朋友参考！<span class=\"github-emoji\" alias=\"rocket\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8\">🚀</span></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}},"excerpt":"","more":"<h1>Markdown 写法使用案例说明</h1>\n<blockquote>\n<p>本案例使用 类 <code>Atx</code> 格式标准。</p>\n</blockquote>\n<h2 id=\"Chapter-1-Markdown-基本文字语法\">Chapter 1 Markdown 基本文字语法</h2>\n<h3 id=\"1-1-标题\">1.1 标题</h3>\n<p>共有 <code>1~6</code> 不同级别的标题。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 这是一个一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 这是一个二级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 这是一个六级标题</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-字体效果\">1.2 字体效果</h3>\n<p>可以显示<strong>加粗</strong>，<em>斜体</em>，<s>删除线效果</s> 。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**加粗**</span></span><br><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br><span class=\"line\">~~删除线~~</span><br></pre></td></tr></table></figure>\n<p>如需加入普通符号，使用 <code>\\</code> 进行转义。</p>\n<h3 id=\"1-3-分割线\">1.3 分割线</h3>\n<p>使用 <code>3</code> 个以上的 <code>*</code> ,  <code>-</code> ，<code>_</code> 建立分割线。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">__<span class=\"emphasis\">_</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\">---</span></span></span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-4-引用块\">1.4 引用块</h3>\n<p>使用 <code>&gt;</code> 标识一个引用块。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; This is a blockquote. It can contains a paragraph.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; This a nested blockquote.</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>This is a blockquote. It can contains a paragraph.</p>\n<blockquote>\n<p>This a nested blockquote.</p>\n</blockquote>\n</blockquote>\n<p>引用块内可以嵌套其他 Markdown 语法元素。</p>\n<h3 id=\"1-5-列表\">1.5 列表</h3>\n<blockquote>\n<p>所有的列表项都会嵌套并改变多级列表前的指示符号。</p>\n<p>定义列表不被 \t<code>Typora</code> 支持。</p>\n</blockquote>\n<h4 id=\"1-5-1-无序列表\">1.5.1 无序列表</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 列表项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 列表项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 列表项</span><br></pre></td></tr></table></figure>\n<ul>\n<li>列表项</li>\n<li>列表项</li>\n<li>列表项</li>\n</ul>\n<h4 id=\"1-5-2-有序列表\">1.5.2 有序列表</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 列表项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 列表项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 列表项</span><br></pre></td></tr></table></figure>\n<ol>\n<li>列表项</li>\n<li>列表项</li>\n<li>列表项</li>\n</ol>\n<h3 id=\"1-6-表格\">1.6 表格</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 表头 | 表头 | 表头 |</span><br><span class=\"line\">| :--: | :--: | :--: |</span><br><span class=\"line\">| 内容 | 内容 | 内容 |</span><br><span class=\"line\">| 内容 | 内容 | 内容 |</span><br><span class=\"line\">| 内容 | 内容 | 内容 |</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:center\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:center\">内容</td>\n</tr>\n</tbody>\n</table>\n<p>使用冒号表示该列的对齐方式。</p>\n<h3 id=\"1-7-代码\">1.7 代码</h3>\n<h4 id=\"1-7-1-单行代码\">1.7.1 单行代码</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`#include &lt;iostream&gt;`</span></span><br></pre></td></tr></table></figure>\n<p><code>#include &lt;iostream&gt;</code></p>\n<h4 id=\"1-7-2-多行代码\">1.7.2 多行代码</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">```c++</span></span><br><span class=\"line\"><span class=\"code\">#include &lt;iostream&gt;</span></span><br><span class=\"line\"><span class=\"code\">using namespace std;</span></span><br><span class=\"line\"><span class=\"code\">```</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-8-段落与换行\">1.8 段落与换行</h3>\n<p><code>Markdown</code> 段落前后要有一个以上的空行。</p>\n<ul>\n<li>使用 <kbd>Shift</kbd> + <kbd>Enter</kbd> 可以实现段内换行。源码表现为一个空行。</li>\n<li>使用 <kbd>Enter</kbd> 可以实现文本块的换行。源码表现为两个空行。</li>\n</ul>\n<br>\n<h2 id=\"Chapter-2-Markdown-扩展功能语法\">Chapter 2  Markdown 扩展功能语法</h2>\n<h3 id=\"2-1-超链接\">2.1 超链接</h3>\n<h4 id=\"2-1-1-基本方式\">2.1.1 基本方式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个指向 [<span class=\"string\">必应</span>](<span class=\"link\">https://www.bing.com</span>) 的链接。</span><br></pre></td></tr></table></figure>\n<p>这是一个指向 <a href=\"https://www.bing.com\">必应</a> 的链接。</p>\n<h4 id=\"2-1-2-参考方式\">2.1.2 参考方式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个先使用，后定义的 [<span class=\"string\">必应</span>][<span class=\"symbol\">Bing</span>] 脚注链接。</span><br><span class=\"line\">[<span class=\"symbol\">Bing</span>]: <span class=\"link\">https://www.bing.com &quot;Bing Link&quot;</span></span><br></pre></td></tr></table></figure>\n<p>只是一个先使用，后定义的 <a href=\"https://www.bing.com\" title=\"Bing Link\">必应</a> 链接。</p>\n<h4 id=\"2-1-3-简洁方式\">2.1.3 简洁方式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">&lt;https://bing.com&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://bing.com\">https://bing.com</a></p>\n<ul>\n<li>注意超链接内部没有空格。</li>\n<li>同样支持 <code>HTML</code> 中的 <code>&lt;a&gt;</code> 标签。</li>\n</ul>\n<h3 id=\"2-2-图片\">2.2 图片</h3>\n<h4 id=\"2-2-1-基本方式\">2.2.1 基本方式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">替换内容</span>](<span class=\"link\">https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg\" alt=\"替换内容\"></p>\n<ul>\n<li>图片也可以使用上文中超链接一样的参考方式引入。</li>\n<li>通常将图片上传至图床网站，然后以 <code>URL</code> 链接引入。</li>\n<li>此外还可以将图片放置在指定位置，使用相对路径或绝对路径访问。</li>\n<li>图片也支持 <code>HTML</code> 中<code>&lt;img&gt;</code>标签，并设置对齐方式，大小以及缩放比。</li>\n</ul>\n<h3 id=\"2-3-公式\">2.3 公式</h3>\n<h4 id=\"2-3-1-行内公式\">2.3.1 行内公式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ \\sum<span class=\"emphasis\">_&#123;i=1&#125;^&#123;n&#125;&#123;\\log&#123;\\alpha&#125;&#125; $</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>似乎博客的渲染器不支持行内公式渲染。 <span class=\"github-emoji\" alias=\"cry\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8\">😢</span></p>\n</blockquote>\n<h4 id=\"2-3-2-块级公式\">2.3.2 块级公式</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R<span class=\"emphasis\">_&#123;\\theta&#125; = \\begin&#123;bmatrix&#125; </span></span><br><span class=\"line\"><span class=\"emphasis\">\\cos&#123;\\theta&#125; \\quad -\\sin&#123;\\theta&#125; \\\\</span></span><br><span class=\"line\"><span class=\"emphasis\">\\sin&#123;\\theta&#125; \\quad \\cos&#123;\\theta&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">\\end&#123;bmatrix&#125;\\\\</span></span><br><span class=\"line\"><span class=\"emphasis\">R_</span>&#123;-\\theta&#125; = \\begin&#123;bmatrix&#125; </span><br><span class=\"line\">\\cos&#123;\\theta&#125; \\quad \\sin&#123;\\theta&#125; \\\\</span><br><span class=\"line\">-\\sin&#123;\\theta&#125; \\quad \\cos&#123;\\theta&#125;</span><br><span class=\"line\">\\end&#123;bmatrix&#125;\\\\</span><br><span class=\"line\">R<span class=\"emphasis\">_&#123;-\\theta&#125; = R_</span>&#123;\\theta&#125;^&#123;T&#125;\\\\</span><br><span class=\"line\">R<span class=\"emphasis\">_&#123;-\\theta&#125; = R_</span>&#123;\\theta&#125;^&#123;-1&#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>R</mi><mi>θ</mi></msub><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.1600em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mspace width=\"1em\"/><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mspace width=\"1em\"/><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mspace linebreak=\"newline\"></mspace><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.1600em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mspace width=\"1em\"/><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mspace width=\"1em\"/><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mspace linebreak=\"newline\"></mspace><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><msubsup><mi>R</mi><mi>θ</mi><mi>T</mi></msubsup><mspace linebreak=\"newline\"></mspace><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><msubsup><mi>R</mi><mi>θ</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">R_{\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad -\\sin{\\theta} \\\\\n\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = \\begin{bmatrix} \n\\cos{\\theta} \\quad \\sin{\\theta} \\\\\n-\\sin{\\theta} \\quad \\cos{\\theta}\n\\end{bmatrix}\\\\\nR_{-\\theta} = R_{\\theta}^{T}\\\\\nR_{-\\theta} = R_{\\theta}^{-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138331em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1555469999999999em;vertical-align:-0.2914389999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.408561em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2914389999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>关于 <code>Latex</code> 公式的详细语法请参考 <a href=\"https://www.cnblogs.com/1024th/p/11623258.html\">LateX公式手册</a> 。</p>\n<h3 id=\"2-4-脚注\">2.4 脚注</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&#x27;s a sentence with a footnote. [^1]</span><br><span class=\"line\">[<span class=\"symbol\">^1</span>]: <span class=\"link\">This is the footnote.</span></span><br></pre></td></tr></table></figure>\n<p>Here’s a sentence with a footnote. [^1]</p>\n<p>[^1]: This is the footnote.</p>\n<blockquote>\n<p>似乎博客的渲染器不支持脚注。 <span class=\"github-emoji\" alias=\"cry\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8\">😢</span> 但是该功能对于论文引用十分有利。</p>\n</blockquote>\n<h3 id=\"2-5-任务列表\">2.5 任务列表</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> [x] Write the press release</span><br><span class=\"line\"><span class=\"bullet\">-</span> [ ] Update the website</span><br><span class=\"line\"><span class=\"bullet\">-</span> [ ] Contact the media</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[x] Write the press release</li>\n<li>[ ] Update the website</li>\n<li>[ ] Contact the media</li>\n</ul>\n<blockquote>\n<p>似乎博客的渲染器不支持任务列表渲染。 <span class=\"github-emoji\" alias=\"cry\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8\">😢</span></p>\n</blockquote>\n<h3 id=\"2-6-使用-emoji-表情\">2.6 使用 <code>emoji</code> 表情</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"github-emoji\" alias=\"tent\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8\">&#x26fa;</span>  很快回来。</span><br><span class=\"line\"><span class=\"github-emoji\" alias=\"joy\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8\">&#x1f602;</span> very funny.</span><br></pre></td></tr></table></figure>\n<p><span class=\"github-emoji\" alias=\"tent\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8\">⛺</span>  很快回来。</p>\n<p><span class=\"github-emoji\" alias=\"joy\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8\">😂</span> very funny.</p>\n<blockquote>\n<p>关于更多 Markdown 规范，请参考 <a href=\"https://github.github.com/gfm/#emphasis-and-strong-emphasis\">GitHub Flavored Markdown 规范</a></p>\n</blockquote>\n<br>\n<h2 id=\"Chapter-3-Hexo-内置-Tags-标签\">Chapter 3 Hexo 内置 <code>Tags</code> 标签</h2>\n<blockquote>\n<p>下面的内容多数参考自：</p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\">Hexo 官方文档</a></li>\n<li><a href=\"https://butterfly.js.org/\">Butterfly 主题文档</a></li>\n</ul>\n<p>其中 <code>Tag Plugin</code> 只能在网页中得到渲染效果。</p>\n</blockquote>\n<h3 id=\"3-1-Front-matter\">3.1 <code>Front-matter</code></h3>\n<h4 id=\"3-1-1-Post-Front-matter\">3.1.1 <code>Post Front-matter</code></h4>\n<p>在 <code>.markdown</code> 文件的头部声明对应的键值，博客系统将按照响应的方法进行操作。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:</span><br><span class=\"line\">date:</span><br><span class=\"line\">updated:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">description:</span><br><span class=\"line\">top<span class=\"emphasis\">_img:</span></span><br><span class=\"line\"><span class=\"emphasis\">comments:</span></span><br><span class=\"line\"><span class=\"emphasis\">cover:</span></span><br><span class=\"line\"><span class=\"emphasis\">toc:</span></span><br><span class=\"line\"><span class=\"emphasis\">toc_</span>number:</span><br><span class=\"line\">copyright:</span><br><span class=\"line\">copyright<span class=\"emphasis\">_author:</span></span><br><span class=\"line\"><span class=\"emphasis\">copyright_</span>author<span class=\"emphasis\">_href:</span></span><br><span class=\"line\"><span class=\"emphasis\">copyright_</span>url:</span><br><span class=\"line\">copyright<span class=\"emphasis\">_info:</span></span><br><span class=\"line\"><span class=\"emphasis\">mathjax:</span></span><br><span class=\"line\"><span class=\"emphasis\">katex:</span></span><br><span class=\"line\"><span class=\"emphasis\">aplayer:</span></span><br><span class=\"line\"><span class=\"emphasis\">highlight_</span>shrink:</span><br><span class=\"line\"><span class=\"section\">aside:</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">键</th>\n<th style=\"text-align:left\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">title</td>\n<td style=\"text-align:left\">【必需】文章标题</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">date</td>\n<td style=\"text-align:left\">【必需】文章创建日期</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">updated</td>\n<td style=\"text-align:left\">【可选】文章更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">tags</td>\n<td style=\"text-align:left\">【可选】文章标籤</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">categories</td>\n<td style=\"text-align:left\">【可选】文章分类</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">keywords</td>\n<td style=\"text-align:left\">【可选】文章关键字</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">description</td>\n<td style=\"text-align:left\">【可选】文章描述</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">top_img</td>\n<td style=\"text-align:left\">【可选】文章顶部图片</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">cover</td>\n<td style=\"text-align:left\">【可选】文章缩略图<br />(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">comments</td>\n<td style=\"text-align:left\">【可选】显示文章评论模块<br />(默认 true)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">toc</td>\n<td style=\"text-align:left\">【可选】显示文章TOC<br />(默认为设置中toc的enable配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">toc_number</td>\n<td style=\"text-align:left\">【可选】显示toc_number<br />(默认为设置中toc的number配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright</td>\n<td style=\"text-align:left\">【可选】显示文章版权模块<br />(默认为设置中post_copyright的enable配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright_author</td>\n<td style=\"text-align:left\">【可选】文章版权模块的文章作者</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright_author_href</td>\n<td style=\"text-align:left\">【可选】文章版权模块的文章作者链接</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright_url</td>\n<td style=\"text-align:left\">【可选】文章版权模块的文章连结链接</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copyright_info</td>\n<td style=\"text-align:left\">【可选】文章版权模块的版权声明文字</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">mathjax</td>\n<td style=\"text-align:left\">【可选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">katex</td>\n<td style=\"text-align:left\">【可选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">aplayer</td>\n<td style=\"text-align:left\">【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">highlight_shrink</td>\n<td style=\"text-align:left\">【可选】配置代码框是否展开<br />(true/false)(默认为设置中highlight_shrink的配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">aside</td>\n<td style=\"text-align:left\">【可选】显示侧边栏<br /> (默认 true)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-1-2-Post-Front-matter\">3.1.2 <code>Post Front-matter</code></h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:</span><br><span class=\"line\">date:</span><br><span class=\"line\">updated:</span><br><span class=\"line\">type:</span><br><span class=\"line\">comments:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">top<span class=\"emphasis\">_img:</span></span><br><span class=\"line\"><span class=\"emphasis\">mathjax:</span></span><br><span class=\"line\"><span class=\"emphasis\">katex:</span></span><br><span class=\"line\"><span class=\"emphasis\">aside:</span></span><br><span class=\"line\"><span class=\"emphasis\">aplayer:</span></span><br><span class=\"line\"><span class=\"emphasis\">highlight_</span>shrink:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">键</th>\n<th style=\"text-align:left\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">title</td>\n<td style=\"text-align:left\">【必需】文章标题</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">date</td>\n<td style=\"text-align:left\">【必需】文章创建日期</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">type</td>\n<td style=\"text-align:left\">【必需】标籤、分类和友情链接三个页面需要配置</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">updated</td>\n<td style=\"text-align:left\">【可选】文章更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">description</td>\n<td style=\"text-align:left\">【可选】页面描述</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">keywords</td>\n<td style=\"text-align:left\">【可选】文章关键字</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">comments</td>\n<td style=\"text-align:left\">【可选】显示页面评论模块<br />(默认 true)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">top_img</td>\n<td style=\"text-align:left\">【可选】页面顶部图片</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">mathjax</td>\n<td style=\"text-align:left\">【可选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">katex</td>\n<td style=\"text-align:left\">【可选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">aplayer</td>\n<td style=\"text-align:left\">【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">highlight_shrink</td>\n<td style=\"text-align:left\">【可选】配置代码框是否展开<br />(true/false)(默认为设置中highlight_shrink的配置)</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">aside</td>\n<td style=\"text-align:left\">【可选】显示侧边栏<br /> (默认 true)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-2-标签外挂\">3.2 标签外挂</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class=\"line\">Any content (support inline tags too.io).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>class</td>\n<td>【可选】标识，不同的标识有不同的配色<br/>（ default / primary / success / info / warning / danger ）</td>\n</tr>\n<tr>\n<td>no-icon</td>\n<td>【可选】不显示 icon</td>\n</tr>\n<tr>\n<td>style</td>\n<td>【可选】可以覆盖配置中的 style<br/>（simple/modern/flat/disabled）</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note simple\"><p>默认 提示标签块</p>\n</div>\n<div class=\"note default simple\"><p>default 提示标签块</p>\n</div>\n<div class=\"note primary simple\"><p>primary 提示标签块</p>\n</div>\n<div class=\"note success simple\"><p>success 提示标签块</p>\n</div>\n<div class=\"note info simple\"><p>info 提示标签块</p>\n</div>\n<div class=\"note warning simple\"><p>warning 提示标签块</p>\n</div>\n<div class=\"note danger simple\"><p>danger 提示标签块</p>\n</div>\n<h3 id=\"Gallary-相册图库\"><code>Gallary</code> 相册图库</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>键</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>图库名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>图库描述</td>\n</tr>\n<tr>\n<td>link</td>\n<td>链接到对应的相册地址</td>\n</tr>\n<tr>\n<td>img-url</td>\n<td>图库封面的地址</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/20201110_101713.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">插画</div>\n  <p>收藏的优雅二次元！</p>\n  <a href='/gallary/inset/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/background.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">照片</div>\n  <p>收藏的好康摄影！</p>\n  <a href='/gallary/photo/'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n<h3 id=\"3-3-Gallary-相册\">3.3 <code>Gallary</code> 相册</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gallery %&#125;</span><br><span class=\"line\">![]()</span><br><span class=\"line\">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"justified-gallery\"><p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/background.png\" alt=\"\"><br><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/e6e09d1b09711bb40fa672450aafd3405690bb121080.png\" alt=\"\"></p>\n          </div>\n<h3 id=\"3-4-文字隐藏\">3.4 文字隐藏</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% hideInline content,display,bg,color %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% hideBlock display,bg,color %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endhideBlock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% hideToggle display,bg,color %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Butterfly安装方法</span></div>\n    <div class=\"hide-content\"><p>在你的博客根目录里</p>\n<p>git clone -b master <a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>\n<p>如果想要安装比较新的dev分支，可以</p>\n<p>git clone -b dev <a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>\n</div></div>\n<h3 id=\"3-5-页内标签\">3.5 页内标签</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Unique name, [index] %&#125;</span><br><span class=\"line\">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class=\"line\">Any content (support inline tags too).</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Unique name   : Unique name of tabs block tag without comma.</span><br><span class=\"line\"><span class=\"code\">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class=\"line\"><span class=\"code\">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class=\"line\"><span class=\"code\">                Only for current url of post/page must be unique!</span></span><br><span class=\"line\"><span class=\"code\">[index]       : Index number of active tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not specified, first tab (1) will be selected.</span></span><br><span class=\"line\"><span class=\"code\">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">[Tab caption] : Caption of current tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class=\"line\"><span class=\"code\">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br></pre></td></tr></table></figure>\n<div class=\"tabs\" id=\"test1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#test1-1\">test1 1</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#test1-2\">test1 2</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#test1-3\">test1 3</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test1-1\"><p><strong>This is Tab 1.</strong></p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"test1-2\"><p><strong>This is Tab 2.</strong></p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"test1-3\"><p><strong>This is Tab 3.</strong></p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h3 id=\"3-6-页内按钮\">3.6 页内按钮</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[url]         : 链接</span><br><span class=\"line\">[text]        : 按钮文字</span><br><span class=\"line\">[icon]        : [可选] 图标</span><br><span class=\"line\">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class=\"line\"><span class=\"code\">                      按钮字体和边框顔色(outline时)</span></span><br><span class=\"line\"><span class=\"code\">                      default/blue/pink/red/purple/orange/green</span></span><br><span class=\"line\"><span class=\"code\">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class=\"line\"><span class=\"code\">                      outline/留空</span></span><br><span class=\"line\"><span class=\"code\">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class=\"line\"><span class=\"code\">                      block/留空</span></span><br><span class=\"line\"><span class=\"code\">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class=\"line\"><span class=\"code\">                      center/right/留空</span></span><br><span class=\"line\"><span class=\"code\">[size]        : [可选] 按钮大小</span></span><br><span class=\"line\"><span class=\"code\">                      larger/留空</span></span><br></pre></td></tr></table></figure>\n<div class=\"btn-center\">\n<a class=\"btn-beautify button--animated outline larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline blue larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline pink larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline red larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline purple larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline orange larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated outline green larger\" href=\"https://butterfly.js.org/\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n</div>\n<h3 id=\"3-7-页内文字标签\">3.7 页内文字标签</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label [text] [color] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[text] 文字</span><br><span class=\"line\">[color] [可选] 背景颜色，默认为 default/blue/pink/red/purple/orange/green</span><br></pre></td></tr></table></figure>\n<p>臣亮言：<mark class=\"hl-label default\">先帝</mark> 创业未半，而<mark class=\"hl-label blue\">中道崩殂</mark> 。今天下三分，<mark class=\"hl-label pink\">益州疲敝</mark> ，此诚<mark class=\"hl-label red\">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class=\"hl-label purple\">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>\n宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class=\"hl-label orange\">作奸</mark> 、<mark class=\"hl-label green\">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>\n<br>\n<h2 id=\"Chapter-4-结语\">Chapter 4 结语</h2>\n<p>到这里，博客内使用的绝大多数 Markdown 语法以及 Tag Plugin 语法均有提及。这一篇文章将作为写作参考，供未来的我使用。<span class=\"github-emoji\" alias=\"raised_hands\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png?v8\">🙌</span></p>\n<p>也欢迎各位来访的朋友参考！<span class=\"github-emoji\" alias=\"rocket\" style=\"\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8\">🚀</span></p>\n"},{"title":"Vue 高级部分","date":"2021-10-26T09:37:24.000Z","cover":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/6c8e4c06e7fadeb548154c5577ad66254afcf0db.jpg","_content":"\n# Vue 学习 (高级部分)\n\n<br>\n\n\n\n## Chapter 4 Vue中的AJAX\n\n### 4.1 跨域代理\n\n通过在浏览器与跨域的目标服务器之间增加一个代理服务器规避浏览器因跨域引起的安全策略问题。\n\n浏览器与代理服务器在同一域下，所以可以避免跨域问题。经典的代理方法有`vue-cli`配置与`nginx`配置。\n\n```vue\n<script>\n\timport axios from 'axios';\n    export default {\n        name : 'App',\n        methods : {\n            getStudents() {\n                axios.get('http://localhost:8080/students').then(\n                response => {\n                    console.log(response.data);\n                },\n                    error => {\n                        console.log(error.message);\n                    }\n                ) \n            }\n        }\n    }\n</script>\n```\n\n```js\n// vue.config.js\nmodule.exports = {\n    pages: {\n        index: {\n            entry: 'src/main.js',\n        },\n    },\n    lintOnSave: false,\n    // 开启跨域代理服务器（方式一）\n    // 直接指向目标服务器 当且仅当8080端口处没有请求的资源时\n    // 代理服务器才会转发请求\n    devServer: {\n        proxy: 'http://localhost:5000',\n    },\n    \n    // 方式二\n    devServer: {\n        proxy: {\n            // 请求前缀路径一\n            'prefix' : {\n                target: 'http://localhost:5000',\n                // 重写路径以免目标服务器无法访问\n                pathRewrite: {'^/prefix' : ''},\n                // 用于支持 websocket\n                ws: true,\n                // 改变代理服务器向目标服务器的跨域回应\n                // 控制请求头中的 host 值\n                changeOrigin: true,\n            },\n            // 可以配置多台以不同前缀区分的代理转发\n            '/foo' : {\n                target: '',\n            },\n        },\n    },\n}\n```\n\n`vue`插件库中`vue-resource`为前官方的AJAX库，低版本`Vue`可以使用。\n\n\n\n### 4.2 插槽\n\n插槽可以让父组件往子组件指定位置插入html结构，是一种组件间通信方式。\n\n当在外部组件内需要添加自定义内容时：\n\n```vue\n<template>\n\t<div class=\"container\">\n        <Category>\n            <img slot=\"center\" src=\"./image/1.jpg\" alt=\"\">\n            <a slot=\"footer\" href=\"cn.bing.com\">...</a>\n    \t</Category>\n    </div>\n</template>\n```\n\n1. 默认插槽与具名插槽\n\n```vue\n<template>\n\t<!-- 设置插槽指定Vue将组件外部传入的自定义内容放置于此 -->\n\t<slot name=\"center\"></slot>\n\t<!-- 若外部没有插槽 则会显示slot.innerHTML -->\n\t<slot name=\"footer\">!!!</slot>\n</template>\n```\n\n2. `template`写法\n\n```html\n<template v-slot:footer></template>\n```\n\n3. 作用域插槽\n   作用域插槽可以通过标签属性向插槽的外部使用者传递内部数据，是一种控制反转与作用域变化的思想：\n\n```html\n<slot :games=\"games\"></slot>\n```\n\n```html\n<Category title=\"game\">\n    <template scope=\"yourScope\">\n    <!-- 或者 slot-scop=\"{games}\" -->\n    \t<ol>\n        \t<!-- 设置了一个数据域调用从插槽内部传来的数据 -->\n        \t<li v-for=\"(g, index) in yourScope.games\" :key=\"index\">\n        \t\t{{g}}\n        \t</li>\n    \t</ol>\n    </template>\n\t\n</Category>\n```\n\n<br>\n\n\n\n## Chapter 5 `Vuex`\n\n### 5.1 简介\n\n`Vuex`是专门实现集中式状态/数据管理的插件，对应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件通信方式，适用于任意组件间通信。\n\n![vuex](https://vuex.vuejs.org/vuex.png)\n\n\n\n### 5.2 使用\n\n#### 5.2.1 引入\n\n```js\n// main.js\nimport store from './store'\n\n const vm = new Vue( {\n     el: '#app',\n     render: h => h(App),\n     // 引入 Vuex store\n     store: store,\n     beforeCreate() {\n         Vue.prototype.$bus = this;\n     }\n })\n```\n\n\n\n#### 5.2.2 `store`结构编写\n\n```js\n// ./vuex/index.js 创建vuex中的store\nimport Vue form 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex);\n\n// 响应组件中的动作 通常action中用于获取其他所需数据\nconst actions = {\n    // 该函数参数自动加入了 store 上下文\n    add: function(context, value) {\n        context.commit('ADD', value);\n    }\n}\n// 操作数据 不要在此进行异步操作\nconst mutations = {\n    // 自动传入了数据\n    ADD: function(state, value) {\n        state.sum += value;\n    }\n}\n// 存储数据\nconst state = {\n    sum: 0,\n}\n\nexport default new Vuex.Store({\n    actions, \n    mutations,\n    state,\n})\n```\n\n若共享数据操作中没有网络请求或者其他业务逻辑，可以直接越过`actions`调用`commit`。\n\n\n\n#### 5.2.3 调用驱动事件\n\n在需要进行共享数据操作处调用`Vuex`：\n\n```js\nmethods: {\n    increment() {\n        this.$store.dispatch('add', this.n);\n    }\n}\n```\n\n此外`Vue`开发者工具可以每个`Vuex`操作进行记录。\n\n\n\n### 5.3 `store getters`\n\n相当于在`Vuex`级别上的计算属性\n\n```js\nimport Vue form 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex);\n\nconst actions = {\n    add: function(context, value) {\n        context.commit('ADD', value);\n    }\n}\n\nconst mutations = {\n    ADD: function(state, value) {\n        state.sum += value;\n    }\n}\n\nconst state = {\n    sum: 0,\n}\n\n// 相当于关于state的计算属性\nconst getters = {\n    bisSum(state) {\n        return state.sum * 10;\n    }\n}\n\nexport default new Vuex.Store({\n    actions, \n    mutations,\n    state,\n    getters,\n})\n```\n\n\n\n### 5.4 `maps`系列优化\n\n#### 5.4.1 `mapState` 与`mapGetters`\n\n其中若需要对`this.$store.state`之类的调用做优化，其中`vuex`已经使用了映射方法做了API优化调用，可以使用如下方式：\n\n```js\nimport {mapState} from 'veux';\n\nexport default {\n    name : 'App',\n    computed: {\n        // 该写法直接将生成的键值对全部拆包放入计算属性中\n        ...mapState({\n            total: 'sum',\n            school: 'school',\n        }),\n        // 对于同名的state 与 获取函数名 可以直接使用数组\n        ...mapState(['sum', 'school']);\n    },\n}\n```\n\n对于`getters`，使用`mapGetters`即可，方法类似。\n\n\n\n#### 5.4.2 `mapActions`与`mapMutations`\n\n```vue\n<template>\n\t<button @click=\"increment(sum)\">\n        Press\n    </button>\n</template>\n\n<script>\n\tmethods: {\n        ...mapMutations({\n            increment: 'INC',\n            decrement: 'DEC',\n        })\n    }\n</script>\n```\n\n该方法可以生成快捷`commit`方法联系`mutations`，但是需要在`html`内传入需要处理的参数，否则是默认的触发事件。\n\n`mapActions`提供`dispatch`函数的快捷生成，使用方法类似。\n\n\n\n### 5.5 多组件共享与模块化\n\n对于`vuex`的`store`可以对各个不同功能的数据域方法进行模块化操作：\n\n```js\nconst personOptins = {\n    // 设置按名称查找模块开启\n    namespaced: true,\n    actions: {},\n    mutations: {},\n    state: {},\n    getters: {},\n}\n\nexport default new Vuex.Store({\n    modules: {\n        // 产生store 的模块化\n        'yourModuleName': personOptions,\n        // 'other': options\n    }\n})\n```\n\n```js\ncomputed: {\n    // 引入时注意指定模块查找名\n    // 其他的 map 方法也类似\n    ...mapState('yourModuleName',['sum','school']);\n}\n```\n\n另外`mapGetters` `mapActions` 由于内部的设计结构不同，使用手动方法获取模块化内容时注意使用对应的方式。\n\n<br>\n\n\n\n## Chapter 6 路由\n\n### 6.1 简介\n\n`vue-router`是专门用于单应用页面的路由功能。单击页面中的导航不会刷新页面，只会做页面的局部更新，且数据需要进行`AJAX`获取。\n\n而**路由**指一对映射关系，根据请求路径展示对应页面或者匹配的处理函数。\n\n\n\n### 6.2 基本路由\n\n引入`router`\n\n```js\nimport Vue from 'vue';\nimport App from './App';\nimport Router from 'vue-router';\nimport router from './router/index.js';\nVue.use(Router);\n\nnew Vue({\n    el: '#app',\n    render: h => h(App),\n    router: router,\n})\n```\n\n创建路由\n\n```js\n// ./router/index.js\nimport Router from 'vue-router';\nimport Home from '../components/Home'\n\nconst router = new Router({\n    routes: [\n        {\n        \tpath:'/home',\n            component: Home,\n    \t},\n    ],\n})\n```\n\n配置路径变化\n\n```html\n<!-- 靠该标签实现路由的切换 -->\n<router-link to=\"/home\">To Home</router-link>\n\n<!-- 指定组建的额呈现位置 -->\n<router-view></router-view>\n```\n\n注意：\n\n1. 当路由时需要重新渲染加入的组件称为路由组件置于`pages`文件夹中，一般组件仍然放置于`components`。\n2. 组件实例上添加了`$route`路由对象与`$router`全局路由器对象。\n3. 每次路由切换时，对应路由组件都会被销毁或创建。\n\n\n\n### 6.3 多级路由\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            // 一级路由加 / \n        \tpath:'/home',\n            component: Home,\n            children: [\n                {\n                    path:'news',\n                    component: 'News',\n                }\n            ]\n    \t},\n    ],\n})\n```\n\n```html\n<router-link to=\"/home/news\">To Home</router-link>\n```\n\n\n\n### 6.4 路由传参\n\n跳转路由并携带`query`参数\n\n```html\n<!-- 字符串写法 模板字符串-->\n<router-link :to=\"`/home/message/detail?id=${m.id}&title=${m.title}`\">{{m.title}}</router-link>\n<!-- 对象写法 -->\n<router-link :to=\"{\n                  \tpath:'/home/massege/detail',\n                  \tquery: {\n                  \t\tid: m.id,\n                  \t\ttitle: m.title,\n                  \t},\n                  }\">\n\t{{m.title}}\n</router-link>\n```\n\n内部接收时使用`$route.query`接收所有参数。\n\n\n\n### 6.5 路由细节技术\n\n#### 6.5.1 命名路由\n\n另外对于路由可以进行别名的设置：\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            name: 'index'\n            // 一级路由加 / \n        \tpath:'/home',\n            component: Home,\n    \t},\n    ],\n})\n```\n\n该方法可以简写路由，在`html`可以直接使用：\n\n```html\n<router-link class=\"list-group-item\" active-class=\"active\" :to=\"{name: 'index'}\">Home Page</router-link>\n```\n\n\n\n#### 6.5.2 路由`params`参数\n\n**路由配置**\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            name: 'index'\n            // 使用 : 设置路由解析 params参数\n        \tpath:'/home/:id/:page',\n            component: Home,\n    \t},\n    ],\n})\n```\n\n传参方法与前文类似：\n\n```html\n<!-- 字符串写法 模板字符串-->\n<router-link :to=\"`/home/message/detail/${m.id}/${m.title}`\">\t{{m.title}}\n</router-link>\n<!-- 对象写法 此处path必须使用name配置-->\n<router-link :to=\"{\n                  \tpath:'routeName',\n                  \tparams: {\n                  \t\tid: m.id,\n                  \t\ttitle: m.title,\n                  \t},\n                  }\">\n\t{{m.title}}\n</router-link>\n```\n\n\n\n#### 6.5.3 路由的`props`配置\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            name: 'index'\n        \tpath:'/home/:id/:page',\n            component: Home,\n            // 直接传递对象 该对象中所有键值对均以props参数传给Home组件\n            props: {},\n        \t// 设置开关 若开则将params参数注入到组件props属性中\n        \tprops: true,\n        \t// 设置函数\n        \tprops($route) {\n    \t\t\treturn {id:$route.query.id, title:$route.query.title};\n\t\t\t}\n    \t},\n    ],\n})\n```\n\n\n\n#### 6.5.4 `router-link`的`replace`方法\n\n在浏览器的历史记录中`Vue`默认开启了`push`记录模式，即每一次地址变动都会被记录。\n\n`replace`方法即在跳转时，清除当前栈顶的历史项。\n\n```html\n<router-link replace :to=\"`/home/message/detail/${m.id}/${m.title}`\">\t{{m.title}}\n</router-link>\n```\n\n\n\n#### 6.5.5 缓存路由组件\n\n```html\n<!-- 使得内部指定的组件名在路由改变后保持不被销毁 -->\n<keep-alive :include=\"['News','Home']\">\n\t<router-view></router-view>\n</keep-alive>\n```\n\n\n\n#### 6.5.6 生命周期钩子补充\n\n**`activated` 与 `deactivated`两个生命周期**钩子用于 `keep-alive`的组件在路由改变后调用，捕获路由组件的激活状态。\n\n\n\n### 6.6 编程式路由导航\n\n不适用`<router-link>`，实现导航与历史记录操作。\n\n```html\n<button @click=\"pushShow(m)\">\n    Press\n</button>\n```\n\n```js\nmethods: {\n    pushShow(m) {\n        // 使用全局的路由器对象 调用全局方法跳转\n        this.$router.push({\n            name: 'hello',\n            query: {\n                id: m.id,\n                title: m.title,\n            }\n        })\n    },\n    back() {\n        this.$router.back();\n    },\n    forward() {\n        this.$router.forward();\n    }\n    // 还有 $router.go 能够根据传入的数字决定历史记录前进后退几步\n}\n```\n\n\n\n### 6.7 路由守卫\n\n相当于后端的拦截器权限管理，主要用于根据后端的返回信息动态决定页面的加载。\n\n#### 6.7.1 全局前置与后置\n\n```js\n// 在每次路由切换前调用回调\n// 参数为跳转前路由与跳转后路由\nrouter.beforeEach((to, from, next) => {\n    if(to.meta.isAuth) {\n       // 符合条件则调用next放行\n        if(localStorage.getItem('school') === '') {\n            next();\n        }\n    } \n})\n```\n\n在`$route`内有`meta`对象属性，用于放置自定义内容，可以在内部确定如页面是否需要权限才能查看。\n\n```js\nrouter.beforeEach((to, from) => {\n    // 通常在此进行完成页面切换的初始化工作\n    document.title = \"新标签页\";\n}\n```\n\n\n\n#### 6.7.2 独享守卫\n\n直接在路由配置处配置`beforeEnter`，注意独享路由守卫只有前置。\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            name: 'index'\n        \tpath:'/home/:id/:page',\n            component: Home,\n        \tprops($route) {\n    \t\t\treturn {id:$route.query.id, title:$route.query.title};\n\t\t\t},\n    \t\t// 直接在router内配置\n    \t\tbeforeEnter(to, from, next) {\n                // .......\n            }\n    \t},\n    ],\n})\n```\n\n\n\n#### 6.7.3 组件内路由守卫\n\n```js\nexport default {\n    name: 'about',\n    // 通过路由规则进入该组件时被调用\n    beforeRouteEnter (to, from, next) {\n        // ...\n    },\n    // 通过路由规则离开该组件时被调用\n    beforeRouteLeave (to, from, next) {\n        // ... \n    }\n}\n```\n\n\n\n### 6.8 路由工作模式\n\n1. `hash`工作模式\n   - 路径中有`#`号，且后续的路径内容不会发送给服务器\n   - 兼容性好\n   - 部署时不会造成404问题\n   - 路径可能会造成APP分享时地址检验不合法\n2. `history`工作模式\n   - 路径中无`#`号\n   - 兼容性略差\n   - 部署时需要根据路由路径配置刷新资源不存在问题\n     - nginx\n     - nodejs 后端适配\n     - java 类库\n\n```js\nconst router = new Router({\n    // 在 mode 模式中配置\n    mode: 'history',\n    routes: [],\n})\n```\n\n<br>\n\n\n\n## Chapter 7 Vue UI 组件库\n\n### 7.1 UI库介绍\n\n- 移动端\n  - Vant\n  - Cube UI\n  - Mint UI\n- PC端\n  - Element UI\n  - IView UI\n  - Ant Design\n\n一般UI库均可以按需引入。\n\n<br>\n\n\n\n## Chpater 8  `Vue3` 特性\n\n### 8.1 简介\n\n新的`Vue3`内容可以使用`Vue-CLI`与`Vite`官方构建工具创建。\n\n使用了`Proxy`代替`defineProperty`实现更好的响应式，以及重写了虚拟DOM实现，新增了`Tree-Shaking`，更好支持`TypeScript`。\n\n`vue-cli`新工程的创建：\n\n```shell\nvue create vue_test\ncd vue_test\nnpm run serve\n```\n\n`vite`创建：\n\n其是官方提供的前端构建工具，开发环境中无需重新打包，快速冷启动，热重载，按需编译。\n\n```shell\nnpm init vite-app\ncd <project-name>\nnpm install\nnpm run dev\n```\n\n\n\n### 8.2 `Vue3`工程分析\n\n首先不再引入Vue构造函数，而是新的封装函数。\n\n```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n// 创建应用实例对象app 类似于vm但是少了一部分成员\ncreateApp(App).mount('#app');\n\n// 对比 Vue 2 方式\nconst vm = new Vue({\n    render: (h) => {\n        h(App);\n    }\n})\nvm.$mount('#app');\n```\n\n此外`vue`文件中的模板结构可以没有根标签`<div>`包裹。\n\n\n\n### 8.3 常用组合式`Composition API`\n\n#### 8.3.1 `Setup`\n\n- 是一个新的配置项，值为函数。\n- 所有的数据方法均配置在`Setup`函数中。\n- 可以有两种返回值：\n  - 若返回对象，则对象中的属性、方法、内容均可在模板中直接使用；\n  - 若返回一个渲染函数，则可以直接自定义渲染内容。（将覆盖所有的`<template>`模板内容）\n\n```vue\n<script>\n\timport {h} from 'vue';\n    export default {\n        name: 'App',\n        setup() {\n            let name = \"Alan\";\n            let age = 20;\n            \n            function sayHello() {\n                console.log(`Hi, I'm ${name}, ${age}, how are you?`);\n            }\n            \n            return {\n                name,\n                age,\n                sayHello,\n            }\n            \n            // 或者返回自定义渲染函数\n            return () => h('h1', 'Outspace');\n        },\n        \n        // vue的配置方式也可以使用\n        // 但是这样定义的内容 Vue3 无法调用\n        data() {\n            return {\n                gender: 'male',\n            }\n        },\n        methods: {\n            sayHi() {},\n        }\n    }\n\n</script>\n```\n\n注意：\n\n- 不要两种版本混用；\n- 有重名内容时，`Vue3`中的`Setup`内容由于后生成所以会覆盖，加入到`_data`中；\n- `Setup`不能为`async`异步，因为模板无法解析返回值的`promise`对象。（`Vue3`新版本已经解决）\n\n#### 8.3.2 `ref`函数\n\n```js\nimport {ref} from 'vue';\n// 直接调用 ref 传入内容 指定一个响应式对象\n// ref 将对数据进行加工装箱\nlet age = ref(18);\n```\n\n其通过模板与`defineProperty`进行原型上的数据代理，使用了`RefImpl`实例对象包装，当需要响应式时：\n\n```js\nage.value = 19;\n```\n\n这样就能够触发`getter`，`setter`从而实现响应式。但是在`<template>`模板中直接使用变量名就可以实现值的引用。\n\n```html\n<h2>\n    {{age}}\n</h2>\n```\n\n但是对于**传入对象**的`ref`函数，其将该对象包装为`Proxy`，实际上调用了`reactive`新内部函数进行数据加工。实际上完成了对于基本类型与对象的接口统一。\n\n`proxy`是新的ES标准中规定的访问拦截器，其将数据包装为可以调用特定`handler`方法的包装对象，根据代码运行时动作自动调用`handler`内部的相应自定义方法。\n\n\n\n#### 8.3.3 `reative`函数\n\n该函数可以定义一个数组，对象类型的响应式数据（无法处理基本类型），并且可以嵌套响应式。\n\n```js\nlet person = reactive({\n    name: 'Wayne',\n    age: '20',\n    job: {\n        type: 'Student',\n        subject: 'CS',\n    },\n});\n```\n\n返回`Proxy`的实例对象。数组可以直接通过下标处理数据，同样能够实现响应式。\n\n\n\n#### 8.3.4 `Vue3`响应式原理\n\n`Vue2`对比：通过`Object.defineProperty`进行递归的数据劫持，对数组重写常用方法，并且在总的`Vue`实例中添加了全局的`$set`，`$delete`函数，从而实现了响应式。\n\n而在`Vue3`中，响应式的原理直接通过ES新规范中的`Proxy`进行包装。\n\n- 通过`Proxy`直接从语言层面拦截`Proxy`对象中的任意变化，包括属性值的增删改查等。\n- 通过`Reflect`对被代理对象的属性进行操作。\n\n```js\nlet person = {\n    name: 'wayne',\n    age: 20,\n}\n\n// 以下均为\nconst p = new Proxy(person, {\n    // 函数直接得到源对象与被访问的属性名\n    // 查\n    get(target, propName) {\n        // do something....\n        return target[propName];\n    },\n    // 增 改\n    set(target, propName, value) {\n        // rerender the page\n        target[propName] = value;\n    },\n    // 删\n    deleteProperty(target, propName) {\n        // do something \n        return delete target[propName];\n    }\n})\n```\n\n另外可以通过ES6新增的类似Java 的反射机制进行，属性的更改：\n\n```js\nReflect.set(target, propName, value);\n```\n\n这样能够避免原实现中可能造成的抛出异常，重载等问题。\n\n\n\n#### 8.3.5 `Setup`注意\n\n- `Setup`会在`beforeCreate`生命周期函数前执行，且`this`为`undefined`；\n- `Setup`内部无法通过`this`获取数据，所以`props`参数与`context`由框架从外部传入\n  - `props`值为对象，包含组件外传入且内部声明接受了的属性；\n  - `context`上下文含：\n    - `attrs`为对象，包含组件外传入但未接受的属性；\n    - `slot`收到的插槽内容，含虚拟DOM；\n    - `emit`分发自定义事件的函数。\n\n```js\nexport default {\n    name: 'demo',\n    props: ['msg'],\n    emits: ['hello'],\n    setup(props, context) {\n        function btnClick() {\n            context.emit('hello', msg);\n        }\n        \n        console.log(props, context.attrs, context.emit, context.slots);\n        return {btnClick};\n    }\n}\n```\n\n```vue\n<template>\n\t<demo @hello='showMsg' msg=\"HelloComponent\">\n        <template v-slot:logo>\n    \t\t<span>Outspace</span>\n\t\t</template>\n    </demo>\n</template>\n\n<script>\n\timport demo from './components/demo';\n    export default {\n        name: 'App',\n        components: {demo},\n        setup() {\n            function showMsg(value){\n                alert(value);\n            }\n            \n            \n            return {\n                showMsg,\n            };\n        }\n    }\n</script>\n```\n\n\n\n#### 8.3.6 计算属性与监视\n\n**计算属性**\n\n仍可以使用`vue2`计算属性的风格，但是可以按需在`Setup`内引入`computed`函数实现计算属性。\n\n```js\n// 只读简写\nperson.fullName = computed(()=>{\n    return person.firstName + '-' + person.lastName;\n})\n\n// 读写\nperson.fullName = computed({\n    get() {\n        // do something \n    },\n    set(value) {\n        // do something\n    }\n})\n```\n\n**监视**\n\n```js\nsetup() {\n    let sum = ref(0);\n    let msg = reactive({msg : 'hello',});\n    // 单个监视\n    watch(sum, (newVal, oldVal) => {\n        // do something...\n    });\n    \n    // 多个监视\n    watch([sum, msg], \n          (newVal, oldVal) => {\n        \t// 多个监视参数时\n        \t// 传入的值也为数组\n    \t  }, \n          // 还可以传入配置\n          {immediate: true, deep: true},\n    );\n}\n```\n\n注意，目前的`watch`函数对于`reactive`创建的响应式数据，仍有`bug`：\n\n- 传入的`oldValue`是无法正确获取的，原因为新旧数据均指向同一对象。\n\n- 深度监视是无法关闭的（`Proxy`机制仍会响应）。\n\n- 监视响应式对象内部的某一些内容，需要：\n\n  ```js\n  watch([()=>person.name, ()=>person.age], (newVal, oldVal)=> {\n      console.log();\n  })\n  ```\n\n  且对于对象的内部数据，需要开启`deep`深度监视属性。因为`Proxy`机制实际上只在对象顶层进行处理。\n\n对于`ref`定义的对象，若需要深度监视，仍需要开启`deep`。\n\n**`watchEffect`函数**\n\n该函数可以实现，在回调中使用了哪个属性，就监视哪个属性，但是不需要像计算属性一样写函数的返回值。\n\n只要内部使用的某属性变化，整个`watchEffect`函数都会重新调用。\n\n```js\nwatchEffect(()=> {\n    const x1 = sum.value;\n    const x2 = person.name;\n    console.log(x1, x2);\n})\n```\n\n\n\n#### 8.3.7 生命周期\n\n<img src=\"https://vue3js.cn/docs/zh/images/lifecycle.png\" alt=\"实例的生命周期\" style=\"zoom: 50%;\" />\n\n所有的生命周期钩子可以使用`vue2`风格使用，也可以通过组合式API使用。\n\n- `beforeCreate`与`created`两个函数对应`setup`；\n- 所有其他的钩子在组合式时在函数前加`On`。\n- 组合式钩子加载早于函数式。\n\n\n\n#### 8.3.8 自定义`Hook`函数\n\n其本质是函数，将`setup`中的组合式API进行封装，类似于`mixin`混入，可以复用代码，让`setup`中的逻辑更清晰。\n\n```js\n// ../hooks/useHook.js\nimport {reactive, onMounted, onBeforeMounted} from 'vue'\nexport default function () {\n    // do something\n    return point;\n}\n```\n\n```vue\n<script>\n\timport useHook from '../hooks/usePoint';\n    export default {\n        name: 'Test',\n        setup() {\n            point = usePoint();\n        }\n    }\n</script>\n```\n\n这样实际上就是一种代码逻辑的拆分方法，并且能够快捷得调用。\n\n\n\n#### 8.3.9 `toRefs`\n\n该函数可以将某响应式对象中的属性单独作为响应式变量提供外部使用时调用。\n\n```js\nconst reactiveMember = toRef(reactiveObj, 'attributeStr');\n\n// 多个直接指定响应式对象本身\n// 其内部所有成员将被包装为响应式\ntoRefs(reactiveObj)\n```\n\n该函数的产生原因为：由于`Vue3`对于对象的响应式实现方法`proxy`只在被处理对象层做出响应而非成员，所以当仅需要暴露对象成员时，使用`toRefs`实现（而非手动重写`proxy`的`getter`与`setter`）。\n\n其中`reactiveMember`已经被包装为`ObjectRefImpl`类，并进行数据代理，直接对原`reactiveObj`进行修改操作，是一种引用的响应式实现。\n\n\n\n### 8.4 其他的组合式API\n\n#### 8.4.1 浅层次响应式对象\n\n- `shallowReative`，该函数指定对于一个嵌套层次较深的对象类型，只检测对象最外层属性的变化。\n- `shallowRef`，该函数指定只处理基本类型的响应式，也可用于对象整体的替换监测。\n\n\n\n#### 8.4.2 只读\n\n- `readonly` 使嵌套的响应式数据全部只读；\n- `shallowReadonly` 使一个响应式数据变为浅层只读；\n\n适用于不得对数据进行更改时。\n\n\n\n#### 8.4.3 `toRaw`与`markRaw`\n\n上述两个API可以使对象由响应式变为普通数据，以及标记该对象永不成为响应式数据。\n\n`toRaw`可以读取响应式对象对应的普通对象，对这个普通对象的所有操作不会引起页面更新。\n\n`markRaw`由于某些第三方类库或者有不可变数据源的大列表不宜成为响应式对象，所以可以标记其不能成为响应式。\n\n\n\n#### 8.4.4 `customRef` \n\n创建一个自定义的`ref`，并对其依赖项跟踪和更新触发进行显式控制。\n\n```vue\n<template>\n\t<input type=\"text\" v-model=\"keyword\">\n\t<h3>\n        {{keyword}}\n    </h3>\n</template>\n\n<script>\n\timport {ref, customRef} from 'vue';\n    export default {\n        name: 'App',\n        setup() {\n            function myRef(value, delay) {\n                let timer;\n                // 相当于写 proxy 的 handle 处理函数\n                // 用于覆盖框架默认的 ref 行为\n                const myRef = customRef((track, trigger) => {\n                    get() {\n                        // 追踪数据变化而非忽略\n                        track();\n                        return value;\n                    },\n                    set(newVal) {\n                        clearTimeout(timer);\n                        // 定时器用于防抖\n                        timer = setTimeout(()=> {\n                            value = newVal;\n                        // 使Vue重新解析模板\n                        \ttrigger();\n                        }, delay);\n                    },\n                });\n            };\n            \n            let keyword = myRef('hello', 500);\n            return {keyword};\n        }\n    }\n\n</script>\n```\n\n\n\n#### 8.4.5 `provide`与`inject`\n\n上述API可实现祖先后代（跨级）间组件通信，父组件使用`provide`提供数据，子组件使用`inject`使用数据。\n\n使用如下简单API，即可跨级传递响应式对象：\n\n```js\nprovide('car', car); // 标明传输名与对象名\n\ninject('car'); // 直接使用传输名获取对象\n```\n\n\n\n#### 8.4.6 响应式API的判断\n\n- `isRef`\n- `isReactive`\n- `isReadOnly`\n- `isProxy`\n\n分别用于检查对象是否具有上述属性。需要注意的是`readonly`方法创建的对象也属于`proxy`类别。\n\n\n\n### 8.5 组合式API的优势\n\n- 首先原`options`API中会导致各个方法的耦合在同一的`options`中。\n- 组合式API可以将同一个功能中的实现全部组合到同一的`hook`中，同时可以按需引入。\n\n\n\n### 8.6 新组件特性\n\n#### 8.6.1 `Fragment`\n\n`Vue3`中组件可以没有根标签，内部会将多个标签包含在同一个`Fragment`虚拟元素中，最后不参与渲染。\n\n\n\n#### 8.6.2 `Teleport`\n\n该方法能够直接将组件的`html`内容直接移动到指定的位置，如述内容在渲染完成后将直接挂载到`body`标签而非父组件上。\n\n```vue\n<template>\n\t<!-- 此处可以直接使用CSS选择器 -->\n\t<teleport to=\"body\">\n    \t<div v-if=\"isShow\" class=\"dialog\">\n            <button @click=\"isShow = false00\">\n\t\t\t\t关闭                \n    \t\t</button>\n    \t</div>\n    </teleport>\n</template>\n```\n\n\n\n#### 8.6.3 `Suspense`\n\n```js\nimport {defineAsyncComponent} from 'vue';\n// 异步引入组件 可以避免主组件对所有子组件的载入等待\nconst Child = defineAsyncComponent(()=>import('./components/Child'));\n```\n\n```vue\n<template>\n\t<Suspense>\n    \t<template v-slot:default>\n\t\t\t<Child/>\n\t\t</template>\n\t\t<template v-slot:fallback>\n\t\t\t<h3>\n                加载中...\n            </h3>\n\t\t</template>\n    </Suspense>\n</template>\n```\n\n提供了动态等待异步引入的方法，且组件`setup`使用`async await`返回值可以为`promise`了。\n\n\n\n### 8.7 其他新特性\n\n- 全局API转移；\n  原部分`Vue`内的配置项没有完全移动到组合式的API中。\n  且原来向`Vue.prototype`中添加内容实现跨组件通讯的方式被转移到`app.config.globalProperties`中。\n- `Vue3`中`data`应当一直被写为函数\n- 移除`keyCode`键盘编码作为事件触发以及移除`v-on.native`；\n- 移除过滤器。\n","source":"_posts/vue-advanced.md","raw":"---\ntitle: Vue 高级部分\ndate: 2021-10-26 17:37:24\ncategories: 学习\ntags:\n  - 笔记\n  - 前端\n  - Vue\ncover: https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/6c8e4c06e7fadeb548154c5577ad66254afcf0db.jpg\n---\n\n# Vue 学习 (高级部分)\n\n<br>\n\n\n\n## Chapter 4 Vue中的AJAX\n\n### 4.1 跨域代理\n\n通过在浏览器与跨域的目标服务器之间增加一个代理服务器规避浏览器因跨域引起的安全策略问题。\n\n浏览器与代理服务器在同一域下，所以可以避免跨域问题。经典的代理方法有`vue-cli`配置与`nginx`配置。\n\n```vue\n<script>\n\timport axios from 'axios';\n    export default {\n        name : 'App',\n        methods : {\n            getStudents() {\n                axios.get('http://localhost:8080/students').then(\n                response => {\n                    console.log(response.data);\n                },\n                    error => {\n                        console.log(error.message);\n                    }\n                ) \n            }\n        }\n    }\n</script>\n```\n\n```js\n// vue.config.js\nmodule.exports = {\n    pages: {\n        index: {\n            entry: 'src/main.js',\n        },\n    },\n    lintOnSave: false,\n    // 开启跨域代理服务器（方式一）\n    // 直接指向目标服务器 当且仅当8080端口处没有请求的资源时\n    // 代理服务器才会转发请求\n    devServer: {\n        proxy: 'http://localhost:5000',\n    },\n    \n    // 方式二\n    devServer: {\n        proxy: {\n            // 请求前缀路径一\n            'prefix' : {\n                target: 'http://localhost:5000',\n                // 重写路径以免目标服务器无法访问\n                pathRewrite: {'^/prefix' : ''},\n                // 用于支持 websocket\n                ws: true,\n                // 改变代理服务器向目标服务器的跨域回应\n                // 控制请求头中的 host 值\n                changeOrigin: true,\n            },\n            // 可以配置多台以不同前缀区分的代理转发\n            '/foo' : {\n                target: '',\n            },\n        },\n    },\n}\n```\n\n`vue`插件库中`vue-resource`为前官方的AJAX库，低版本`Vue`可以使用。\n\n\n\n### 4.2 插槽\n\n插槽可以让父组件往子组件指定位置插入html结构，是一种组件间通信方式。\n\n当在外部组件内需要添加自定义内容时：\n\n```vue\n<template>\n\t<div class=\"container\">\n        <Category>\n            <img slot=\"center\" src=\"./image/1.jpg\" alt=\"\">\n            <a slot=\"footer\" href=\"cn.bing.com\">...</a>\n    \t</Category>\n    </div>\n</template>\n```\n\n1. 默认插槽与具名插槽\n\n```vue\n<template>\n\t<!-- 设置插槽指定Vue将组件外部传入的自定义内容放置于此 -->\n\t<slot name=\"center\"></slot>\n\t<!-- 若外部没有插槽 则会显示slot.innerHTML -->\n\t<slot name=\"footer\">!!!</slot>\n</template>\n```\n\n2. `template`写法\n\n```html\n<template v-slot:footer></template>\n```\n\n3. 作用域插槽\n   作用域插槽可以通过标签属性向插槽的外部使用者传递内部数据，是一种控制反转与作用域变化的思想：\n\n```html\n<slot :games=\"games\"></slot>\n```\n\n```html\n<Category title=\"game\">\n    <template scope=\"yourScope\">\n    <!-- 或者 slot-scop=\"{games}\" -->\n    \t<ol>\n        \t<!-- 设置了一个数据域调用从插槽内部传来的数据 -->\n        \t<li v-for=\"(g, index) in yourScope.games\" :key=\"index\">\n        \t\t{{g}}\n        \t</li>\n    \t</ol>\n    </template>\n\t\n</Category>\n```\n\n<br>\n\n\n\n## Chapter 5 `Vuex`\n\n### 5.1 简介\n\n`Vuex`是专门实现集中式状态/数据管理的插件，对应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件通信方式，适用于任意组件间通信。\n\n![vuex](https://vuex.vuejs.org/vuex.png)\n\n\n\n### 5.2 使用\n\n#### 5.2.1 引入\n\n```js\n// main.js\nimport store from './store'\n\n const vm = new Vue( {\n     el: '#app',\n     render: h => h(App),\n     // 引入 Vuex store\n     store: store,\n     beforeCreate() {\n         Vue.prototype.$bus = this;\n     }\n })\n```\n\n\n\n#### 5.2.2 `store`结构编写\n\n```js\n// ./vuex/index.js 创建vuex中的store\nimport Vue form 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex);\n\n// 响应组件中的动作 通常action中用于获取其他所需数据\nconst actions = {\n    // 该函数参数自动加入了 store 上下文\n    add: function(context, value) {\n        context.commit('ADD', value);\n    }\n}\n// 操作数据 不要在此进行异步操作\nconst mutations = {\n    // 自动传入了数据\n    ADD: function(state, value) {\n        state.sum += value;\n    }\n}\n// 存储数据\nconst state = {\n    sum: 0,\n}\n\nexport default new Vuex.Store({\n    actions, \n    mutations,\n    state,\n})\n```\n\n若共享数据操作中没有网络请求或者其他业务逻辑，可以直接越过`actions`调用`commit`。\n\n\n\n#### 5.2.3 调用驱动事件\n\n在需要进行共享数据操作处调用`Vuex`：\n\n```js\nmethods: {\n    increment() {\n        this.$store.dispatch('add', this.n);\n    }\n}\n```\n\n此外`Vue`开发者工具可以每个`Vuex`操作进行记录。\n\n\n\n### 5.3 `store getters`\n\n相当于在`Vuex`级别上的计算属性\n\n```js\nimport Vue form 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex);\n\nconst actions = {\n    add: function(context, value) {\n        context.commit('ADD', value);\n    }\n}\n\nconst mutations = {\n    ADD: function(state, value) {\n        state.sum += value;\n    }\n}\n\nconst state = {\n    sum: 0,\n}\n\n// 相当于关于state的计算属性\nconst getters = {\n    bisSum(state) {\n        return state.sum * 10;\n    }\n}\n\nexport default new Vuex.Store({\n    actions, \n    mutations,\n    state,\n    getters,\n})\n```\n\n\n\n### 5.4 `maps`系列优化\n\n#### 5.4.1 `mapState` 与`mapGetters`\n\n其中若需要对`this.$store.state`之类的调用做优化，其中`vuex`已经使用了映射方法做了API优化调用，可以使用如下方式：\n\n```js\nimport {mapState} from 'veux';\n\nexport default {\n    name : 'App',\n    computed: {\n        // 该写法直接将生成的键值对全部拆包放入计算属性中\n        ...mapState({\n            total: 'sum',\n            school: 'school',\n        }),\n        // 对于同名的state 与 获取函数名 可以直接使用数组\n        ...mapState(['sum', 'school']);\n    },\n}\n```\n\n对于`getters`，使用`mapGetters`即可，方法类似。\n\n\n\n#### 5.4.2 `mapActions`与`mapMutations`\n\n```vue\n<template>\n\t<button @click=\"increment(sum)\">\n        Press\n    </button>\n</template>\n\n<script>\n\tmethods: {\n        ...mapMutations({\n            increment: 'INC',\n            decrement: 'DEC',\n        })\n    }\n</script>\n```\n\n该方法可以生成快捷`commit`方法联系`mutations`，但是需要在`html`内传入需要处理的参数，否则是默认的触发事件。\n\n`mapActions`提供`dispatch`函数的快捷生成，使用方法类似。\n\n\n\n### 5.5 多组件共享与模块化\n\n对于`vuex`的`store`可以对各个不同功能的数据域方法进行模块化操作：\n\n```js\nconst personOptins = {\n    // 设置按名称查找模块开启\n    namespaced: true,\n    actions: {},\n    mutations: {},\n    state: {},\n    getters: {},\n}\n\nexport default new Vuex.Store({\n    modules: {\n        // 产生store 的模块化\n        'yourModuleName': personOptions,\n        // 'other': options\n    }\n})\n```\n\n```js\ncomputed: {\n    // 引入时注意指定模块查找名\n    // 其他的 map 方法也类似\n    ...mapState('yourModuleName',['sum','school']);\n}\n```\n\n另外`mapGetters` `mapActions` 由于内部的设计结构不同，使用手动方法获取模块化内容时注意使用对应的方式。\n\n<br>\n\n\n\n## Chapter 6 路由\n\n### 6.1 简介\n\n`vue-router`是专门用于单应用页面的路由功能。单击页面中的导航不会刷新页面，只会做页面的局部更新，且数据需要进行`AJAX`获取。\n\n而**路由**指一对映射关系，根据请求路径展示对应页面或者匹配的处理函数。\n\n\n\n### 6.2 基本路由\n\n引入`router`\n\n```js\nimport Vue from 'vue';\nimport App from './App';\nimport Router from 'vue-router';\nimport router from './router/index.js';\nVue.use(Router);\n\nnew Vue({\n    el: '#app',\n    render: h => h(App),\n    router: router,\n})\n```\n\n创建路由\n\n```js\n// ./router/index.js\nimport Router from 'vue-router';\nimport Home from '../components/Home'\n\nconst router = new Router({\n    routes: [\n        {\n        \tpath:'/home',\n            component: Home,\n    \t},\n    ],\n})\n```\n\n配置路径变化\n\n```html\n<!-- 靠该标签实现路由的切换 -->\n<router-link to=\"/home\">To Home</router-link>\n\n<!-- 指定组建的额呈现位置 -->\n<router-view></router-view>\n```\n\n注意：\n\n1. 当路由时需要重新渲染加入的组件称为路由组件置于`pages`文件夹中，一般组件仍然放置于`components`。\n2. 组件实例上添加了`$route`路由对象与`$router`全局路由器对象。\n3. 每次路由切换时，对应路由组件都会被销毁或创建。\n\n\n\n### 6.3 多级路由\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            // 一级路由加 / \n        \tpath:'/home',\n            component: Home,\n            children: [\n                {\n                    path:'news',\n                    component: 'News',\n                }\n            ]\n    \t},\n    ],\n})\n```\n\n```html\n<router-link to=\"/home/news\">To Home</router-link>\n```\n\n\n\n### 6.4 路由传参\n\n跳转路由并携带`query`参数\n\n```html\n<!-- 字符串写法 模板字符串-->\n<router-link :to=\"`/home/message/detail?id=${m.id}&title=${m.title}`\">{{m.title}}</router-link>\n<!-- 对象写法 -->\n<router-link :to=\"{\n                  \tpath:'/home/massege/detail',\n                  \tquery: {\n                  \t\tid: m.id,\n                  \t\ttitle: m.title,\n                  \t},\n                  }\">\n\t{{m.title}}\n</router-link>\n```\n\n内部接收时使用`$route.query`接收所有参数。\n\n\n\n### 6.5 路由细节技术\n\n#### 6.5.1 命名路由\n\n另外对于路由可以进行别名的设置：\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            name: 'index'\n            // 一级路由加 / \n        \tpath:'/home',\n            component: Home,\n    \t},\n    ],\n})\n```\n\n该方法可以简写路由，在`html`可以直接使用：\n\n```html\n<router-link class=\"list-group-item\" active-class=\"active\" :to=\"{name: 'index'}\">Home Page</router-link>\n```\n\n\n\n#### 6.5.2 路由`params`参数\n\n**路由配置**\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            name: 'index'\n            // 使用 : 设置路由解析 params参数\n        \tpath:'/home/:id/:page',\n            component: Home,\n    \t},\n    ],\n})\n```\n\n传参方法与前文类似：\n\n```html\n<!-- 字符串写法 模板字符串-->\n<router-link :to=\"`/home/message/detail/${m.id}/${m.title}`\">\t{{m.title}}\n</router-link>\n<!-- 对象写法 此处path必须使用name配置-->\n<router-link :to=\"{\n                  \tpath:'routeName',\n                  \tparams: {\n                  \t\tid: m.id,\n                  \t\ttitle: m.title,\n                  \t},\n                  }\">\n\t{{m.title}}\n</router-link>\n```\n\n\n\n#### 6.5.3 路由的`props`配置\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            name: 'index'\n        \tpath:'/home/:id/:page',\n            component: Home,\n            // 直接传递对象 该对象中所有键值对均以props参数传给Home组件\n            props: {},\n        \t// 设置开关 若开则将params参数注入到组件props属性中\n        \tprops: true,\n        \t// 设置函数\n        \tprops($route) {\n    \t\t\treturn {id:$route.query.id, title:$route.query.title};\n\t\t\t}\n    \t},\n    ],\n})\n```\n\n\n\n#### 6.5.4 `router-link`的`replace`方法\n\n在浏览器的历史记录中`Vue`默认开启了`push`记录模式，即每一次地址变动都会被记录。\n\n`replace`方法即在跳转时，清除当前栈顶的历史项。\n\n```html\n<router-link replace :to=\"`/home/message/detail/${m.id}/${m.title}`\">\t{{m.title}}\n</router-link>\n```\n\n\n\n#### 6.5.5 缓存路由组件\n\n```html\n<!-- 使得内部指定的组件名在路由改变后保持不被销毁 -->\n<keep-alive :include=\"['News','Home']\">\n\t<router-view></router-view>\n</keep-alive>\n```\n\n\n\n#### 6.5.6 生命周期钩子补充\n\n**`activated` 与 `deactivated`两个生命周期**钩子用于 `keep-alive`的组件在路由改变后调用，捕获路由组件的激活状态。\n\n\n\n### 6.6 编程式路由导航\n\n不适用`<router-link>`，实现导航与历史记录操作。\n\n```html\n<button @click=\"pushShow(m)\">\n    Press\n</button>\n```\n\n```js\nmethods: {\n    pushShow(m) {\n        // 使用全局的路由器对象 调用全局方法跳转\n        this.$router.push({\n            name: 'hello',\n            query: {\n                id: m.id,\n                title: m.title,\n            }\n        })\n    },\n    back() {\n        this.$router.back();\n    },\n    forward() {\n        this.$router.forward();\n    }\n    // 还有 $router.go 能够根据传入的数字决定历史记录前进后退几步\n}\n```\n\n\n\n### 6.7 路由守卫\n\n相当于后端的拦截器权限管理，主要用于根据后端的返回信息动态决定页面的加载。\n\n#### 6.7.1 全局前置与后置\n\n```js\n// 在每次路由切换前调用回调\n// 参数为跳转前路由与跳转后路由\nrouter.beforeEach((to, from, next) => {\n    if(to.meta.isAuth) {\n       // 符合条件则调用next放行\n        if(localStorage.getItem('school') === '') {\n            next();\n        }\n    } \n})\n```\n\n在`$route`内有`meta`对象属性，用于放置自定义内容，可以在内部确定如页面是否需要权限才能查看。\n\n```js\nrouter.beforeEach((to, from) => {\n    // 通常在此进行完成页面切换的初始化工作\n    document.title = \"新标签页\";\n}\n```\n\n\n\n#### 6.7.2 独享守卫\n\n直接在路由配置处配置`beforeEnter`，注意独享路由守卫只有前置。\n\n```js\nconst router = new Router({\n    routes: [\n        {\n            name: 'index'\n        \tpath:'/home/:id/:page',\n            component: Home,\n        \tprops($route) {\n    \t\t\treturn {id:$route.query.id, title:$route.query.title};\n\t\t\t},\n    \t\t// 直接在router内配置\n    \t\tbeforeEnter(to, from, next) {\n                // .......\n            }\n    \t},\n    ],\n})\n```\n\n\n\n#### 6.7.3 组件内路由守卫\n\n```js\nexport default {\n    name: 'about',\n    // 通过路由规则进入该组件时被调用\n    beforeRouteEnter (to, from, next) {\n        // ...\n    },\n    // 通过路由规则离开该组件时被调用\n    beforeRouteLeave (to, from, next) {\n        // ... \n    }\n}\n```\n\n\n\n### 6.8 路由工作模式\n\n1. `hash`工作模式\n   - 路径中有`#`号，且后续的路径内容不会发送给服务器\n   - 兼容性好\n   - 部署时不会造成404问题\n   - 路径可能会造成APP分享时地址检验不合法\n2. `history`工作模式\n   - 路径中无`#`号\n   - 兼容性略差\n   - 部署时需要根据路由路径配置刷新资源不存在问题\n     - nginx\n     - nodejs 后端适配\n     - java 类库\n\n```js\nconst router = new Router({\n    // 在 mode 模式中配置\n    mode: 'history',\n    routes: [],\n})\n```\n\n<br>\n\n\n\n## Chapter 7 Vue UI 组件库\n\n### 7.1 UI库介绍\n\n- 移动端\n  - Vant\n  - Cube UI\n  - Mint UI\n- PC端\n  - Element UI\n  - IView UI\n  - Ant Design\n\n一般UI库均可以按需引入。\n\n<br>\n\n\n\n## Chpater 8  `Vue3` 特性\n\n### 8.1 简介\n\n新的`Vue3`内容可以使用`Vue-CLI`与`Vite`官方构建工具创建。\n\n使用了`Proxy`代替`defineProperty`实现更好的响应式，以及重写了虚拟DOM实现，新增了`Tree-Shaking`，更好支持`TypeScript`。\n\n`vue-cli`新工程的创建：\n\n```shell\nvue create vue_test\ncd vue_test\nnpm run serve\n```\n\n`vite`创建：\n\n其是官方提供的前端构建工具，开发环境中无需重新打包，快速冷启动，热重载，按需编译。\n\n```shell\nnpm init vite-app\ncd <project-name>\nnpm install\nnpm run dev\n```\n\n\n\n### 8.2 `Vue3`工程分析\n\n首先不再引入Vue构造函数，而是新的封装函数。\n\n```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n// 创建应用实例对象app 类似于vm但是少了一部分成员\ncreateApp(App).mount('#app');\n\n// 对比 Vue 2 方式\nconst vm = new Vue({\n    render: (h) => {\n        h(App);\n    }\n})\nvm.$mount('#app');\n```\n\n此外`vue`文件中的模板结构可以没有根标签`<div>`包裹。\n\n\n\n### 8.3 常用组合式`Composition API`\n\n#### 8.3.1 `Setup`\n\n- 是一个新的配置项，值为函数。\n- 所有的数据方法均配置在`Setup`函数中。\n- 可以有两种返回值：\n  - 若返回对象，则对象中的属性、方法、内容均可在模板中直接使用；\n  - 若返回一个渲染函数，则可以直接自定义渲染内容。（将覆盖所有的`<template>`模板内容）\n\n```vue\n<script>\n\timport {h} from 'vue';\n    export default {\n        name: 'App',\n        setup() {\n            let name = \"Alan\";\n            let age = 20;\n            \n            function sayHello() {\n                console.log(`Hi, I'm ${name}, ${age}, how are you?`);\n            }\n            \n            return {\n                name,\n                age,\n                sayHello,\n            }\n            \n            // 或者返回自定义渲染函数\n            return () => h('h1', 'Outspace');\n        },\n        \n        // vue的配置方式也可以使用\n        // 但是这样定义的内容 Vue3 无法调用\n        data() {\n            return {\n                gender: 'male',\n            }\n        },\n        methods: {\n            sayHi() {},\n        }\n    }\n\n</script>\n```\n\n注意：\n\n- 不要两种版本混用；\n- 有重名内容时，`Vue3`中的`Setup`内容由于后生成所以会覆盖，加入到`_data`中；\n- `Setup`不能为`async`异步，因为模板无法解析返回值的`promise`对象。（`Vue3`新版本已经解决）\n\n#### 8.3.2 `ref`函数\n\n```js\nimport {ref} from 'vue';\n// 直接调用 ref 传入内容 指定一个响应式对象\n// ref 将对数据进行加工装箱\nlet age = ref(18);\n```\n\n其通过模板与`defineProperty`进行原型上的数据代理，使用了`RefImpl`实例对象包装，当需要响应式时：\n\n```js\nage.value = 19;\n```\n\n这样就能够触发`getter`，`setter`从而实现响应式。但是在`<template>`模板中直接使用变量名就可以实现值的引用。\n\n```html\n<h2>\n    {{age}}\n</h2>\n```\n\n但是对于**传入对象**的`ref`函数，其将该对象包装为`Proxy`，实际上调用了`reactive`新内部函数进行数据加工。实际上完成了对于基本类型与对象的接口统一。\n\n`proxy`是新的ES标准中规定的访问拦截器，其将数据包装为可以调用特定`handler`方法的包装对象，根据代码运行时动作自动调用`handler`内部的相应自定义方法。\n\n\n\n#### 8.3.3 `reative`函数\n\n该函数可以定义一个数组，对象类型的响应式数据（无法处理基本类型），并且可以嵌套响应式。\n\n```js\nlet person = reactive({\n    name: 'Wayne',\n    age: '20',\n    job: {\n        type: 'Student',\n        subject: 'CS',\n    },\n});\n```\n\n返回`Proxy`的实例对象。数组可以直接通过下标处理数据，同样能够实现响应式。\n\n\n\n#### 8.3.4 `Vue3`响应式原理\n\n`Vue2`对比：通过`Object.defineProperty`进行递归的数据劫持，对数组重写常用方法，并且在总的`Vue`实例中添加了全局的`$set`，`$delete`函数，从而实现了响应式。\n\n而在`Vue3`中，响应式的原理直接通过ES新规范中的`Proxy`进行包装。\n\n- 通过`Proxy`直接从语言层面拦截`Proxy`对象中的任意变化，包括属性值的增删改查等。\n- 通过`Reflect`对被代理对象的属性进行操作。\n\n```js\nlet person = {\n    name: 'wayne',\n    age: 20,\n}\n\n// 以下均为\nconst p = new Proxy(person, {\n    // 函数直接得到源对象与被访问的属性名\n    // 查\n    get(target, propName) {\n        // do something....\n        return target[propName];\n    },\n    // 增 改\n    set(target, propName, value) {\n        // rerender the page\n        target[propName] = value;\n    },\n    // 删\n    deleteProperty(target, propName) {\n        // do something \n        return delete target[propName];\n    }\n})\n```\n\n另外可以通过ES6新增的类似Java 的反射机制进行，属性的更改：\n\n```js\nReflect.set(target, propName, value);\n```\n\n这样能够避免原实现中可能造成的抛出异常，重载等问题。\n\n\n\n#### 8.3.5 `Setup`注意\n\n- `Setup`会在`beforeCreate`生命周期函数前执行，且`this`为`undefined`；\n- `Setup`内部无法通过`this`获取数据，所以`props`参数与`context`由框架从外部传入\n  - `props`值为对象，包含组件外传入且内部声明接受了的属性；\n  - `context`上下文含：\n    - `attrs`为对象，包含组件外传入但未接受的属性；\n    - `slot`收到的插槽内容，含虚拟DOM；\n    - `emit`分发自定义事件的函数。\n\n```js\nexport default {\n    name: 'demo',\n    props: ['msg'],\n    emits: ['hello'],\n    setup(props, context) {\n        function btnClick() {\n            context.emit('hello', msg);\n        }\n        \n        console.log(props, context.attrs, context.emit, context.slots);\n        return {btnClick};\n    }\n}\n```\n\n```vue\n<template>\n\t<demo @hello='showMsg' msg=\"HelloComponent\">\n        <template v-slot:logo>\n    \t\t<span>Outspace</span>\n\t\t</template>\n    </demo>\n</template>\n\n<script>\n\timport demo from './components/demo';\n    export default {\n        name: 'App',\n        components: {demo},\n        setup() {\n            function showMsg(value){\n                alert(value);\n            }\n            \n            \n            return {\n                showMsg,\n            };\n        }\n    }\n</script>\n```\n\n\n\n#### 8.3.6 计算属性与监视\n\n**计算属性**\n\n仍可以使用`vue2`计算属性的风格，但是可以按需在`Setup`内引入`computed`函数实现计算属性。\n\n```js\n// 只读简写\nperson.fullName = computed(()=>{\n    return person.firstName + '-' + person.lastName;\n})\n\n// 读写\nperson.fullName = computed({\n    get() {\n        // do something \n    },\n    set(value) {\n        // do something\n    }\n})\n```\n\n**监视**\n\n```js\nsetup() {\n    let sum = ref(0);\n    let msg = reactive({msg : 'hello',});\n    // 单个监视\n    watch(sum, (newVal, oldVal) => {\n        // do something...\n    });\n    \n    // 多个监视\n    watch([sum, msg], \n          (newVal, oldVal) => {\n        \t// 多个监视参数时\n        \t// 传入的值也为数组\n    \t  }, \n          // 还可以传入配置\n          {immediate: true, deep: true},\n    );\n}\n```\n\n注意，目前的`watch`函数对于`reactive`创建的响应式数据，仍有`bug`：\n\n- 传入的`oldValue`是无法正确获取的，原因为新旧数据均指向同一对象。\n\n- 深度监视是无法关闭的（`Proxy`机制仍会响应）。\n\n- 监视响应式对象内部的某一些内容，需要：\n\n  ```js\n  watch([()=>person.name, ()=>person.age], (newVal, oldVal)=> {\n      console.log();\n  })\n  ```\n\n  且对于对象的内部数据，需要开启`deep`深度监视属性。因为`Proxy`机制实际上只在对象顶层进行处理。\n\n对于`ref`定义的对象，若需要深度监视，仍需要开启`deep`。\n\n**`watchEffect`函数**\n\n该函数可以实现，在回调中使用了哪个属性，就监视哪个属性，但是不需要像计算属性一样写函数的返回值。\n\n只要内部使用的某属性变化，整个`watchEffect`函数都会重新调用。\n\n```js\nwatchEffect(()=> {\n    const x1 = sum.value;\n    const x2 = person.name;\n    console.log(x1, x2);\n})\n```\n\n\n\n#### 8.3.7 生命周期\n\n<img src=\"https://vue3js.cn/docs/zh/images/lifecycle.png\" alt=\"实例的生命周期\" style=\"zoom: 50%;\" />\n\n所有的生命周期钩子可以使用`vue2`风格使用，也可以通过组合式API使用。\n\n- `beforeCreate`与`created`两个函数对应`setup`；\n- 所有其他的钩子在组合式时在函数前加`On`。\n- 组合式钩子加载早于函数式。\n\n\n\n#### 8.3.8 自定义`Hook`函数\n\n其本质是函数，将`setup`中的组合式API进行封装，类似于`mixin`混入，可以复用代码，让`setup`中的逻辑更清晰。\n\n```js\n// ../hooks/useHook.js\nimport {reactive, onMounted, onBeforeMounted} from 'vue'\nexport default function () {\n    // do something\n    return point;\n}\n```\n\n```vue\n<script>\n\timport useHook from '../hooks/usePoint';\n    export default {\n        name: 'Test',\n        setup() {\n            point = usePoint();\n        }\n    }\n</script>\n```\n\n这样实际上就是一种代码逻辑的拆分方法，并且能够快捷得调用。\n\n\n\n#### 8.3.9 `toRefs`\n\n该函数可以将某响应式对象中的属性单独作为响应式变量提供外部使用时调用。\n\n```js\nconst reactiveMember = toRef(reactiveObj, 'attributeStr');\n\n// 多个直接指定响应式对象本身\n// 其内部所有成员将被包装为响应式\ntoRefs(reactiveObj)\n```\n\n该函数的产生原因为：由于`Vue3`对于对象的响应式实现方法`proxy`只在被处理对象层做出响应而非成员，所以当仅需要暴露对象成员时，使用`toRefs`实现（而非手动重写`proxy`的`getter`与`setter`）。\n\n其中`reactiveMember`已经被包装为`ObjectRefImpl`类，并进行数据代理，直接对原`reactiveObj`进行修改操作，是一种引用的响应式实现。\n\n\n\n### 8.4 其他的组合式API\n\n#### 8.4.1 浅层次响应式对象\n\n- `shallowReative`，该函数指定对于一个嵌套层次较深的对象类型，只检测对象最外层属性的变化。\n- `shallowRef`，该函数指定只处理基本类型的响应式，也可用于对象整体的替换监测。\n\n\n\n#### 8.4.2 只读\n\n- `readonly` 使嵌套的响应式数据全部只读；\n- `shallowReadonly` 使一个响应式数据变为浅层只读；\n\n适用于不得对数据进行更改时。\n\n\n\n#### 8.4.3 `toRaw`与`markRaw`\n\n上述两个API可以使对象由响应式变为普通数据，以及标记该对象永不成为响应式数据。\n\n`toRaw`可以读取响应式对象对应的普通对象，对这个普通对象的所有操作不会引起页面更新。\n\n`markRaw`由于某些第三方类库或者有不可变数据源的大列表不宜成为响应式对象，所以可以标记其不能成为响应式。\n\n\n\n#### 8.4.4 `customRef` \n\n创建一个自定义的`ref`，并对其依赖项跟踪和更新触发进行显式控制。\n\n```vue\n<template>\n\t<input type=\"text\" v-model=\"keyword\">\n\t<h3>\n        {{keyword}}\n    </h3>\n</template>\n\n<script>\n\timport {ref, customRef} from 'vue';\n    export default {\n        name: 'App',\n        setup() {\n            function myRef(value, delay) {\n                let timer;\n                // 相当于写 proxy 的 handle 处理函数\n                // 用于覆盖框架默认的 ref 行为\n                const myRef = customRef((track, trigger) => {\n                    get() {\n                        // 追踪数据变化而非忽略\n                        track();\n                        return value;\n                    },\n                    set(newVal) {\n                        clearTimeout(timer);\n                        // 定时器用于防抖\n                        timer = setTimeout(()=> {\n                            value = newVal;\n                        // 使Vue重新解析模板\n                        \ttrigger();\n                        }, delay);\n                    },\n                });\n            };\n            \n            let keyword = myRef('hello', 500);\n            return {keyword};\n        }\n    }\n\n</script>\n```\n\n\n\n#### 8.4.5 `provide`与`inject`\n\n上述API可实现祖先后代（跨级）间组件通信，父组件使用`provide`提供数据，子组件使用`inject`使用数据。\n\n使用如下简单API，即可跨级传递响应式对象：\n\n```js\nprovide('car', car); // 标明传输名与对象名\n\ninject('car'); // 直接使用传输名获取对象\n```\n\n\n\n#### 8.4.6 响应式API的判断\n\n- `isRef`\n- `isReactive`\n- `isReadOnly`\n- `isProxy`\n\n分别用于检查对象是否具有上述属性。需要注意的是`readonly`方法创建的对象也属于`proxy`类别。\n\n\n\n### 8.5 组合式API的优势\n\n- 首先原`options`API中会导致各个方法的耦合在同一的`options`中。\n- 组合式API可以将同一个功能中的实现全部组合到同一的`hook`中，同时可以按需引入。\n\n\n\n### 8.6 新组件特性\n\n#### 8.6.1 `Fragment`\n\n`Vue3`中组件可以没有根标签，内部会将多个标签包含在同一个`Fragment`虚拟元素中，最后不参与渲染。\n\n\n\n#### 8.6.2 `Teleport`\n\n该方法能够直接将组件的`html`内容直接移动到指定的位置，如述内容在渲染完成后将直接挂载到`body`标签而非父组件上。\n\n```vue\n<template>\n\t<!-- 此处可以直接使用CSS选择器 -->\n\t<teleport to=\"body\">\n    \t<div v-if=\"isShow\" class=\"dialog\">\n            <button @click=\"isShow = false00\">\n\t\t\t\t关闭                \n    \t\t</button>\n    \t</div>\n    </teleport>\n</template>\n```\n\n\n\n#### 8.6.3 `Suspense`\n\n```js\nimport {defineAsyncComponent} from 'vue';\n// 异步引入组件 可以避免主组件对所有子组件的载入等待\nconst Child = defineAsyncComponent(()=>import('./components/Child'));\n```\n\n```vue\n<template>\n\t<Suspense>\n    \t<template v-slot:default>\n\t\t\t<Child/>\n\t\t</template>\n\t\t<template v-slot:fallback>\n\t\t\t<h3>\n                加载中...\n            </h3>\n\t\t</template>\n    </Suspense>\n</template>\n```\n\n提供了动态等待异步引入的方法，且组件`setup`使用`async await`返回值可以为`promise`了。\n\n\n\n### 8.7 其他新特性\n\n- 全局API转移；\n  原部分`Vue`内的配置项没有完全移动到组合式的API中。\n  且原来向`Vue.prototype`中添加内容实现跨组件通讯的方式被转移到`app.config.globalProperties`中。\n- `Vue3`中`data`应当一直被写为函数\n- 移除`keyCode`键盘编码作为事件触发以及移除`v-on.native`；\n- 移除过滤器。\n","slug":"vue-advanced","published":1,"updated":"2021-10-26T09:46:06.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7wmger0000yct5b20zgl0i","content":"<h1>Vue 学习 (高级部分)</h1>\n<br>\n<h2 id=\"Chapter-4-Vue中的AJAX\">Chapter 4 Vue中的AJAX</h2>\n<h3 id=\"4-1-跨域代理\">4.1 跨域代理</h3>\n<p>通过在浏览器与跨域的目标服务器之间增加一个代理服务器规避浏览器因跨域引起的安全策略问题。</p>\n<p>浏览器与代理服务器在同一域下，所以可以避免跨域问题。经典的代理方法有<code>vue-cli</code>配置与<code>nginx</code>配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport axios from &#x27;axios&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name : &#x27;App&#x27;,</span><br><span class=\"line\">        methods : &#123;</span><br><span class=\"line\">            getStudents() &#123;</span><br><span class=\"line\">                axios.get(&#x27;http://localhost:8080/students&#x27;).then(</span><br><span class=\"line\">                response =&gt; &#123;</span><br><span class=\"line\">                    console.log(response.data);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                    error =&gt; &#123;</span><br><span class=\"line\">                        console.log(error.message);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ) </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">pages</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;src/main.js&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lintOnSave</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 开启跨域代理服务器（方式一）</span></span><br><span class=\"line\">    <span class=\"comment\">// 直接指向目标服务器 当且仅当8080端口处没有请求的资源时</span></span><br><span class=\"line\">    <span class=\"comment\">// 代理服务器才会转发请求</span></span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>: <span class=\"string\">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方式二</span></span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 请求前缀路径一</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;prefix&#x27;</span> : &#123;</span><br><span class=\"line\">                <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class=\"line\">                <span class=\"comment\">// 重写路径以免目标服务器无法访问</span></span><br><span class=\"line\">                <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">&#x27;^/prefix&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>&#125;,</span><br><span class=\"line\">                <span class=\"comment\">// 用于支持 websocket</span></span><br><span class=\"line\">                <span class=\"attr\">ws</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"comment\">// 改变代理服务器向目标服务器的跨域回应</span></span><br><span class=\"line\">                <span class=\"comment\">// 控制请求头中的 host 值</span></span><br><span class=\"line\">                <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 可以配置多台以不同前缀区分的代理转发</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;/foo&#x27;</span> : &#123;</span><br><span class=\"line\">                <span class=\"attr\">target</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>vue</code>插件库中<code>vue-resource</code>为前官方的AJAX库，低版本<code>Vue</code>可以使用。</p>\n<h3 id=\"4-2-插槽\">4.2 插槽</h3>\n<p>插槽可以让父组件往子组件指定位置插入html结构，是一种组件间通信方式。</p>\n<p>当在外部组件内需要添加自定义内容时：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;Category&gt;</span><br><span class=\"line\">            &lt;img slot=&quot;center&quot; src=&quot;./image/1.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;a slot=&quot;footer&quot; href=&quot;cn.bing.com&quot;&gt;...&lt;/a&gt;</span><br><span class=\"line\">    \t&lt;/Category&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>默认插槽与具名插槽</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- 设置插槽指定Vue将组件外部传入的自定义内容放置于此 --&gt;</span><br><span class=\"line\">\t&lt;slot name=&quot;center&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">\t&lt;!-- 若外部没有插槽 则会显示slot.innerHTML --&gt;</span><br><span class=\"line\">\t&lt;slot name=&quot;footer&quot;&gt;!!!&lt;/slot&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>template</code>写法</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>作用域插槽<br>\n作用域插槽可以通过标签属性向插槽的外部使用者传递内部数据，是一种控制反转与作用域变化的思想：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:games</span>=<span class=\"string\">&quot;games&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Category</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;game&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;yourScope&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 或者 slot-scop=&quot;&#123;games&#125;&quot; --&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"comment\">&lt;!-- 设置了一个数据域调用从插槽内部传来的数据 --&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(g, index) in yourScope.games&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">        \t\t&#123;&#123;g&#125;&#125;</span><br><span class=\"line\">        \t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Category</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<br>\n<h2 id=\"Chapter-5-Vuex\">Chapter 5 <code>Vuex</code></h2>\n<h3 id=\"5-1-简介\">5.1 简介</h3>\n<p><code>Vuex</code>是专门实现集中式状态/数据管理的插件，对应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件通信方式，适用于任意组件间通信。</p>\n<p><img src=\"https://vuex.vuejs.org/vuex.png\" alt=\"vuex\"></p>\n<h3 id=\"5-2-使用\">5.2 使用</h3>\n<h4 id=\"5-2-1-引入\">5.2.1 引入</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue( &#123;</span><br><span class=\"line\">     <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">     <span class=\"comment\">// 引入 Vuex store</span></span><br><span class=\"line\">     <span class=\"attr\">store</span>: store,</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">         Vue.prototype.$bus = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-2-store结构编写\">5.2.2 <code>store</code>结构编写</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./vuex/index.js 创建vuex中的store</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue form <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应组件中的动作 通常action中用于获取其他所需数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 该函数参数自动加入了 store 上下文</span></span><br><span class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, value</span>) </span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;ADD&#x27;</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 操作数据 不要在此进行异步操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自动传入了数据</span></span><br><span class=\"line\">    <span class=\"attr\">ADD</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, value</span>) </span>&#123;</span><br><span class=\"line\">        state.sum += value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 存储数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">sum</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    actions, </span><br><span class=\"line\">    mutations,</span><br><span class=\"line\">    state,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>若共享数据操作中没有网络请求或者其他业务逻辑，可以直接越过<code>actions</code>调用<code>commit</code>。</p>\n<h4 id=\"5-2-3-调用驱动事件\">5.2.3 调用驱动事件</h4>\n<p>在需要进行共享数据操作处调用<code>Vuex</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">increment</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"built_in\">this</span>.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外<code>Vue</code>开发者工具可以每个<code>Vuex</code>操作进行记录。</p>\n<h3 id=\"5-3-store-getters\">5.3 <code>store getters</code></h3>\n<p>相当于在<code>Vuex</code>级别上的计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue form <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, value</span>) </span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;ADD&#x27;</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    <span class=\"attr\">ADD</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, value</span>) </span>&#123;</span><br><span class=\"line\">        state.sum += value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">sum</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于关于state的计算属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">bisSum</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state.sum * <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    actions, </span><br><span class=\"line\">    mutations,</span><br><span class=\"line\">    state,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-4-maps系列优化\">5.4 <code>maps</code>系列优化</h3>\n<h4 id=\"5-4-1-mapState-与mapGetters\">5.4.1 <code>mapState</code> 与<code>mapGetters</code></h4>\n<p>其中若需要对<code>this.$store.state</code>之类的调用做优化，其中<code>vuex</code>已经使用了映射方法做了API优化调用，可以使用如下方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;veux&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 该写法直接将生成的键值对全部拆包放入计算属性中</span></span><br><span class=\"line\">        ...mapState(&#123;</span><br><span class=\"line\">            <span class=\"attr\">total</span>: <span class=\"string\">&#x27;sum&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">school</span>: <span class=\"string\">&#x27;school&#x27;</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 对于同名的state 与 获取函数名 可以直接使用数组</span></span><br><span class=\"line\">        ...mapState([<span class=\"string\">&#x27;sum&#x27;</span>, <span class=\"string\">&#x27;school&#x27;</span>]);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于<code>getters</code>，使用<code>mapGetters</code>即可，方法类似。</p>\n<h4 id=\"5-4-2-mapActions与mapMutations\">5.4.2 <code>mapActions</code>与<code>mapMutations</code></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;button @click=&quot;increment(sum)&quot;&gt;</span><br><span class=\"line\">        Press</span><br><span class=\"line\">    &lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tmethods: &#123;</span><br><span class=\"line\">        ...mapMutations(&#123;</span><br><span class=\"line\">            increment: &#x27;INC&#x27;,</span><br><span class=\"line\">            decrement: &#x27;DEC&#x27;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>该方法可以生成快捷<code>commit</code>方法联系<code>mutations</code>，但是需要在<code>html</code>内传入需要处理的参数，否则是默认的触发事件。</p>\n<p><code>mapActions</code>提供<code>dispatch</code>函数的快捷生成，使用方法类似。</p>\n<h3 id=\"5-5-多组件共享与模块化\">5.5 多组件共享与模块化</h3>\n<p>对于<code>vuex</code>的<code>store</code>可以对各个不同功能的数据域方法进行模块化操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> personOptins = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置按名称查找模块开启</span></span><br><span class=\"line\">    <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 产生store 的模块化</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;yourModuleName&#x27;</span>: personOptions,</span><br><span class=\"line\">        <span class=\"comment\">// &#x27;other&#x27;: options</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引入时注意指定模块查找名</span></span><br><span class=\"line\">    <span class=\"comment\">// 其他的 map 方法也类似</span></span><br><span class=\"line\">    ...mapState(<span class=\"string\">&#x27;yourModuleName&#x27;</span>,[<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"string\">&#x27;school&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外<code>mapGetters</code> <code>mapActions</code> 由于内部的设计结构不同，使用手动方法获取模块化内容时注意使用对应的方式。</p>\n<br>\n<h2 id=\"Chapter-6-路由\">Chapter 6 路由</h2>\n<h3 id=\"6-1-简介\">6.1 简介</h3>\n<p><code>vue-router</code>是专门用于单应用页面的路由功能。单击页面中的导航不会刷新页面，只会做页面的局部更新，且数据需要进行<code>AJAX</code>获取。</p>\n<p>而<strong>路由</strong>指一对映射关系，根据请求路径展示对应页面或者匹配的处理函数。</p>\n<h3 id=\"6-2-基本路由\">6.2 基本路由</h3>\n<p>引入<code>router</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router/index.js&#x27;</span>;</span><br><span class=\"line\">Vue.use(Router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">    <span class=\"attr\">router</span>: router,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>创建路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./router/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/Home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>配置路径变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 靠该标签实现路由的切换 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home&quot;</span>&gt;</span>To Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定组建的额呈现位置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>当路由时需要重新渲染加入的组件称为路由组件置于<code>pages</code>文件夹中，一般组件仍然放置于<code>components</code>。</li>\n<li>组件实例上添加了<code>$route</code>路由对象与<code>$router</code>全局路由器对象。</li>\n<li>每次路由切换时，对应路由组件都会被销毁或创建。</li>\n</ol>\n<h3 id=\"6-3-多级路由\">6.3 多级路由</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一级路由加 / </span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>: <span class=\"string\">&#x27;News&#x27;</span>,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home/news&quot;</span>&gt;</span>To Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-路由传参\">6.4 路由传参</h3>\n<p>跳转路由并携带<code>query</code>参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 字符串写法 模板字符串--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;</span>&#123;&#123;m.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 对象写法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \tpath:&#x27;/home/massege/detail&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \tquery: &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t\tid: m.id,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t\ttitle: m.title,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t&#125;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;m.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>内部接收时使用<code>$route.query</code>接收所有参数。</p>\n<h3 id=\"6-5-路由细节技术\">6.5 路由细节技术</h3>\n<h4 id=\"6-5-1-命名路由\">6.5.1 命名路由</h4>\n<p>另外对于路由可以进行别名的设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">// 一级路由加 / </span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>该方法可以简写路由，在<code>html</code>可以直接使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> <span class=\"attr\">active-class</span>=<span class=\"string\">&quot;active&quot;</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;name: &#x27;index&#x27;&#125;&quot;</span>&gt;</span>Home Page<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-2-路由params参数\">6.5.2 路由<code>params</code>参数</h4>\n<p><strong>路由配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用 : 设置路由解析 params参数</span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home/:id/:page&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>传参方法与前文类似：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 字符串写法 模板字符串--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span>&gt;</span>\t&#123;&#123;m.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 对象写法 此处path必须使用name配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \tpath:&#x27;routeName&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \tparams: &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t\tid: m.id,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t\ttitle: m.title,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t&#125;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;m.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-3-路由的props配置\">6.5.3 路由的<code>props</code>配置</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home/:id/:page&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">            <span class=\"comment\">// 直接传递对象 该对象中所有键值对均以props参数传给Home组件</span></span><br><span class=\"line\">            <span class=\"attr\">props</span>: &#123;&#125;,</span><br><span class=\"line\">        \t<span class=\"comment\">// 设置开关 若开则将params参数注入到组件props属性中</span></span><br><span class=\"line\">        \t<span class=\"attr\">props</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        \t<span class=\"comment\">// 设置函数</span></span><br><span class=\"line\">        \t<span class=\"function\"><span class=\"title\">props</span>(<span class=\"params\">$route</span>)</span> &#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">id</span>:$route.query.id, <span class=\"attr\">title</span>:$route.query.title&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-4-router-link的replace方法\">6.5.4 <code>router-link</code>的<code>replace</code>方法</h4>\n<p>在浏览器的历史记录中<code>Vue</code>默认开启了<code>push</code>记录模式，即每一次地址变动都会被记录。</p>\n<p><code>replace</code>方法即在跳转时，清除当前栈顶的历史项。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">replace</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span>&gt;</span>\t&#123;&#123;m.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-5-缓存路由组件\">6.5.5 缓存路由组件</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使得内部指定的组件名在路由改变后保持不被销毁 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;[&#x27;News&#x27;,&#x27;Home&#x27;]&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-6-生命周期钩子补充\">6.5.6 生命周期钩子补充</h4>\n<p><strong><code>activated</code> 与 <code>deactivated</code>两个生命周期</strong>钩子用于 <code>keep-alive</code>的组件在路由改变后调用，捕获路由组件的激活状态。</p>\n<h3 id=\"6-6-编程式路由导航\">6.6 编程式路由导航</h3>\n<p>不适用<code>&lt;router-link&gt;</code>，实现导航与历史记录操作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;pushShow(m)&quot;</span>&gt;</span></span><br><span class=\"line\">    Press</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">pushShow</span>(<span class=\"params\">m</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用全局的路由器对象 调用全局方法跳转</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">id</span>: m.id,</span><br><span class=\"line\">                <span class=\"attr\">title</span>: m.title,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">back</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$router.back();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">forward</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$router.forward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 还有 $router.go 能够根据传入的数字决定历史记录前进后退几步</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-7-路由守卫\">6.7 路由守卫</h3>\n<p>相当于后端的拦截器权限管理，主要用于根据后端的返回信息动态决定页面的加载。</p>\n<h4 id=\"6-7-1-全局前置与后置\">6.7.1 全局前置与后置</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在每次路由切换前调用回调</span></span><br><span class=\"line\"><span class=\"comment\">// 参数为跳转前路由与跳转后路由</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(to.meta.isAuth) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 符合条件则调用next放行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;school&#x27;</span>) === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在<code>$route</code>内有<code>meta</code>对象属性，用于放置自定义内容，可以在内部确定如页面是否需要权限才能查看。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通常在此进行完成页面切换的初始化工作</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = <span class=\"string\">&quot;新标签页&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-7-2-独享守卫\">6.7.2 独享守卫</h4>\n<p>直接在路由配置处配置<code>beforeEnter</code>，注意独享路由守卫只有前置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home/:id/:page&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">        \t<span class=\"function\"><span class=\"title\">props</span>(<span class=\"params\">$route</span>)</span> &#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">id</span>:$route.query.id, <span class=\"attr\">title</span>:$route.query.title&#125;;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 直接在router内配置</span></span><br><span class=\"line\">    \t\t<span class=\"function\"><span class=\"title\">beforeEnter</span>(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// .......</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-7-3-组件内路由守卫\">6.7.3 组件内路由守卫</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 通过路由规则进入该组件时被调用</span></span><br><span class=\"line\">    beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 通过路由规则离开该组件时被调用</span></span><br><span class=\"line\">    beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ... </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-8-路由工作模式\">6.8 路由工作模式</h3>\n<ol>\n<li><code>hash</code>工作模式\n<ul>\n<li>路径中有<code>#</code>号，且后续的路径内容不会发送给服务器</li>\n<li>兼容性好</li>\n<li>部署时不会造成404问题</li>\n<li>路径可能会造成APP分享时地址检验不合法</li>\n</ul>\n</li>\n<li><code>history</code>工作模式\n<ul>\n<li>路径中无<code>#</code>号</li>\n<li>兼容性略差</li>\n<li>部署时需要根据路由路径配置刷新资源不存在问题\n<ul>\n<li>nginx</li>\n<li>nodejs 后端适配</li>\n<li>java 类库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在 mode 模式中配置</span></span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;history&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<br>\n<h2 id=\"Chapter-7-Vue-UI-组件库\">Chapter 7 Vue UI 组件库</h2>\n<h3 id=\"7-1-UI库介绍\">7.1 UI库介绍</h3>\n<ul>\n<li>移动端\n<ul>\n<li>Vant</li>\n<li>Cube UI</li>\n<li>Mint UI</li>\n</ul>\n</li>\n<li>PC端\n<ul>\n<li>Element UI</li>\n<li>IView UI</li>\n<li>Ant Design</li>\n</ul>\n</li>\n</ul>\n<p>一般UI库均可以按需引入。</p>\n<br>\n<h2 id=\"Chpater-8-Vue3-特性\">Chpater 8  <code>Vue3</code> 特性</h2>\n<h3 id=\"8-1-简介\">8.1 简介</h3>\n<p>新的<code>Vue3</code>内容可以使用<code>Vue-CLI</code>与<code>Vite</code>官方构建工具创建。</p>\n<p>使用了<code>Proxy</code>代替<code>defineProperty</code>实现更好的响应式，以及重写了虚拟DOM实现，新增了<code>Tree-Shaking</code>，更好支持<code>TypeScript</code>。</p>\n<p><code>vue-cli</code>新工程的创建：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create vue_test</span><br><span class=\"line\">cd vue_test</span><br><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n<p><code>vite</code>创建：</p>\n<p>其是官方提供的前端构建工具，开发环境中无需重新打包，快速冷启动，热重载，按需编译。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vite-app</span><br><span class=\"line\">cd &lt;project-name&gt;</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-Vue3工程分析\">8.2 <code>Vue3</code>工程分析</h3>\n<p>首先不再引入Vue构造函数，而是新的封装函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建应用实例对象app 类似于vm但是少了一部分成员</span></span><br><span class=\"line\">createApp(App).mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对比 Vue 2 方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        h(App);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.$mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>此外<code>vue</code>文件中的模板结构可以没有根标签<code>&lt;div&gt;</code>包裹。</p>\n<h3 id=\"8-3-常用组合式Composition-API\">8.3 常用组合式<code>Composition API</code></h3>\n<h4 id=\"8-3-1-Setup\">8.3.1 <code>Setup</code></h4>\n<ul>\n<li>是一个新的配置项，值为函数。</li>\n<li>所有的数据方法均配置在<code>Setup</code>函数中。</li>\n<li>可以有两种返回值：\n<ul>\n<li>若返回对象，则对象中的属性、方法、内容均可在模板中直接使用；</li>\n<li>若返回一个渲染函数，则可以直接自定义渲染内容。（将覆盖所有的<code>&lt;template&gt;</code>模板内容）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport &#123;h&#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &#x27;App&#x27;,</span><br><span class=\"line\">        setup() &#123;</span><br><span class=\"line\">            let name = &quot;Alan&quot;;</span><br><span class=\"line\">            let age = 20;</span><br><span class=\"line\">            </span><br><span class=\"line\">            function sayHello() &#123;</span><br><span class=\"line\">                console.log(`Hi, I&#x27;m $&#123;name&#125;, $&#123;age&#125;, how are you?`);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                name,</span><br><span class=\"line\">                age,</span><br><span class=\"line\">                sayHello,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            // 或者返回自定义渲染函数</span><br><span class=\"line\">            return () =&gt; h(&#x27;h1&#x27;, &#x27;Outspace&#x27;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        // vue的配置方式也可以使用</span><br><span class=\"line\">        // 但是这样定义的内容 Vue3 无法调用</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                gender: &#x27;male&#x27;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            sayHi() &#123;&#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>不要两种版本混用；</li>\n<li>有重名内容时，<code>Vue3</code>中的<code>Setup</code>内容由于后生成所以会覆盖，加入到<code>_data</code>中；</li>\n<li><code>Setup</code>不能为<code>async</code>异步，因为模板无法解析返回值的<code>promise</code>对象。（<code>Vue3</code>新版本已经解决）</li>\n</ul>\n<h4 id=\"8-3-2-ref函数\">8.3.2 <code>ref</code>函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;ref&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 直接调用 ref 传入内容 指定一个响应式对象</span></span><br><span class=\"line\"><span class=\"comment\">// ref 将对数据进行加工装箱</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = ref(<span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n<p>其通过模板与<code>defineProperty</code>进行原型上的数据代理，使用了<code>RefImpl</code>实例对象包装，当需要响应式时：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age.value = <span class=\"number\">19</span>;</span><br></pre></td></tr></table></figure>\n<p>这样就能够触发<code>getter</code>，<code>setter</code>从而实现响应式。但是在<code>&lt;template&gt;</code>模板中直接使用变量名就可以实现值的引用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;age&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是对于<strong>传入对象</strong>的<code>ref</code>函数，其将该对象包装为<code>Proxy</code>，实际上调用了<code>reactive</code>新内部函数进行数据加工。实际上完成了对于基本类型与对象的接口统一。</p>\n<p><code>proxy</code>是新的ES标准中规定的访问拦截器，其将数据包装为可以调用特定<code>handler</code>方法的包装对象，根据代码运行时动作自动调用<code>handler</code>内部的相应自定义方法。</p>\n<h4 id=\"8-3-3-reative函数\">8.3.3 <code>reative</code>函数</h4>\n<p>该函数可以定义一个数组，对象类型的响应式数据（无法处理基本类型），并且可以嵌套响应式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = reactive(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Wayne&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"string\">&#x27;20&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">job</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Student&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;CS&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>返回<code>Proxy</code>的实例对象。数组可以直接通过下标处理数据，同样能够实现响应式。</p>\n<h4 id=\"8-3-4-Vue3响应式原理\">8.3.4 <code>Vue3</code>响应式原理</h4>\n<p><code>Vue2</code>对比：通过<code>Object.defineProperty</code>进行递归的数据劫持，对数组重写常用方法，并且在总的<code>Vue</code>实例中添加了全局的<code>$set</code>，<code>$delete</code>函数，从而实现了响应式。</p>\n<p>而在<code>Vue3</code>中，响应式的原理直接通过ES新规范中的<code>Proxy</code>进行包装。</p>\n<ul>\n<li>通过<code>Proxy</code>直接从语言层面拦截<code>Proxy</code>对象中的任意变化，包括属性值的增删改查等。</li>\n<li>通过<code>Reflect</code>对被代理对象的属性进行操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;wayne&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下均为</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数直接得到源对象与被访问的属性名</span></span><br><span class=\"line\">    <span class=\"comment\">// 查</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propName</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something....</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> target[propName];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 增 改</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, propName, value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// rerender the page</span></span><br><span class=\"line\">        target[propName] = value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">deleteProperty</span>(<span class=\"params\">target, propName</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">delete</span> target[propName];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>另外可以通过ES6新增的类似Java 的反射机制进行，属性的更改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.set(target, propName, value);</span><br></pre></td></tr></table></figure>\n<p>这样能够避免原实现中可能造成的抛出异常，重载等问题。</p>\n<h4 id=\"8-3-5-Setup注意\">8.3.5 <code>Setup</code>注意</h4>\n<ul>\n<li><code>Setup</code>会在<code>beforeCreate</code>生命周期函数前执行，且<code>this</code>为<code>undefined</code>；</li>\n<li><code>Setup</code>内部无法通过<code>this</code>获取数据，所以<code>props</code>参数与<code>context</code>由框架从外部传入\n<ul>\n<li><code>props</code>值为对象，包含组件外传入且内部声明接受了的属性；</li>\n<li><code>context</code>上下文含：\n<ul>\n<li><code>attrs</code>为对象，包含组件外传入但未接受的属性；</li>\n<li><code>slot</code>收到的插槽内容，含虚拟DOM；</li>\n<li><code>emit</code>分发自定义事件的函数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;demo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: [<span class=\"string\">&#x27;msg&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">emits</span>: [<span class=\"string\">&#x27;hello&#x27;</span>],</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">btnClick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            context.emit(<span class=\"string\">&#x27;hello&#x27;</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(props, context.attrs, context.emit, context.slots);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;btnClick&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;demo @hello=&#x27;showMsg&#x27; msg=&quot;HelloComponent&quot;&gt;</span><br><span class=\"line\">        &lt;template v-slot:logo&gt;</span><br><span class=\"line\">    \t\t&lt;span&gt;Outspace&lt;/span&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">    &lt;/demo&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport demo from &#x27;./components/demo&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &#x27;App&#x27;,</span><br><span class=\"line\">        components: &#123;demo&#125;,</span><br><span class=\"line\">        setup() &#123;</span><br><span class=\"line\">            function showMsg(value)&#123;</span><br><span class=\"line\">                alert(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                showMsg,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-3-6-计算属性与监视\">8.3.6 计算属性与监视</h4>\n<p><strong>计算属性</strong></p>\n<p>仍可以使用<code>vue2</code>计算属性的风格，但是可以按需在<code>Setup</code>内引入<code>computed</code>函数实现计算属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只读简写</span></span><br><span class=\"line\">person.fullName = computed(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> person.firstName + <span class=\"string\">&#x27;-&#x27;</span> + person.lastName;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读写</span></span><br><span class=\"line\">person.fullName = computed(&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something </span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>监视</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = ref(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = reactive(&#123;<span class=\"attr\">msg</span> : <span class=\"string\">&#x27;hello&#x27;</span>,&#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 单个监视</span></span><br><span class=\"line\">    watch(sum, <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 多个监视</span></span><br><span class=\"line\">    watch([sum, msg], </span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// 多个监视参数时</span></span><br><span class=\"line\">        \t<span class=\"comment\">// 传入的值也为数组</span></span><br><span class=\"line\">    \t  &#125;, </span><br><span class=\"line\">          <span class=\"comment\">// 还可以传入配置</span></span><br><span class=\"line\">          &#123;<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>, <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，目前的<code>watch</code>函数对于<code>reactive</code>创建的响应式数据，仍有<code>bug</code>：</p>\n<ul>\n<li>\n<p>传入的<code>oldValue</code>是无法正确获取的，原因为新旧数据均指向同一对象。</p>\n</li>\n<li>\n<p>深度监视是无法关闭的（<code>Proxy</code>机制仍会响应）。</p>\n</li>\n<li>\n<p>监视响应式对象内部的某一些内容，需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch([<span class=\"function\">()=&gt;</span>person.name, <span class=\"function\">()=&gt;</span>person.age], <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>且对于对象的内部数据，需要开启<code>deep</code>深度监视属性。因为<code>Proxy</code>机制实际上只在对象顶层进行处理。</p>\n</li>\n</ul>\n<p>对于<code>ref</code>定义的对象，若需要深度监视，仍需要开启<code>deep</code>。</p>\n<p><strong><code>watchEffect</code>函数</strong></p>\n<p>该函数可以实现，在回调中使用了哪个属性，就监视哪个属性，但是不需要像计算属性一样写函数的返回值。</p>\n<p>只要内部使用的某属性变化，整个<code>watchEffect</code>函数都会重新调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watchEffect(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x1 = sum.value;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x2 = person.name;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x1, x2);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-3-7-生命周期\">8.3.7 生命周期</h4>\n<img src=\"https://vue3js.cn/docs/zh/images/lifecycle.png\" alt=\"实例的生命周期\" style=\"zoom: 50%;\" />\n<p>所有的生命周期钩子可以使用<code>vue2</code>风格使用，也可以通过组合式API使用。</p>\n<ul>\n<li><code>beforeCreate</code>与<code>created</code>两个函数对应<code>setup</code>；</li>\n<li>所有其他的钩子在组合式时在函数前加<code>On</code>。</li>\n<li>组合式钩子加载早于函数式。</li>\n</ul>\n<h4 id=\"8-3-8-自定义Hook函数\">8.3.8 自定义<code>Hook</code>函数</h4>\n<p>其本质是函数，将<code>setup</code>中的组合式API进行封装，类似于<code>mixin</code>混入，可以复用代码，让<code>setup</code>中的逻辑更清晰。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ../hooks/useHook.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;reactive, onMounted, onBeforeMounted&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> point;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport useHook from &#x27;../hooks/usePoint&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &#x27;Test&#x27;,</span><br><span class=\"line\">        setup() &#123;</span><br><span class=\"line\">            point = usePoint();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这样实际上就是一种代码逻辑的拆分方法，并且能够快捷得调用。</p>\n<h4 id=\"8-3-9-toRefs\">8.3.9 <code>toRefs</code></h4>\n<p>该函数可以将某响应式对象中的属性单独作为响应式变量提供外部使用时调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reactiveMember = toRef(reactiveObj, <span class=\"string\">&#x27;attributeStr&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多个直接指定响应式对象本身</span></span><br><span class=\"line\"><span class=\"comment\">// 其内部所有成员将被包装为响应式</span></span><br><span class=\"line\">toRefs(reactiveObj)</span><br></pre></td></tr></table></figure>\n<p>该函数的产生原因为：由于<code>Vue3</code>对于对象的响应式实现方法<code>proxy</code>只在被处理对象层做出响应而非成员，所以当仅需要暴露对象成员时，使用<code>toRefs</code>实现（而非手动重写<code>proxy</code>的<code>getter</code>与<code>setter</code>）。</p>\n<p>其中<code>reactiveMember</code>已经被包装为<code>ObjectRefImpl</code>类，并进行数据代理，直接对原<code>reactiveObj</code>进行修改操作，是一种引用的响应式实现。</p>\n<h3 id=\"8-4-其他的组合式API\">8.4 其他的组合式API</h3>\n<h4 id=\"8-4-1-浅层次响应式对象\">8.4.1 浅层次响应式对象</h4>\n<ul>\n<li><code>shallowReative</code>，该函数指定对于一个嵌套层次较深的对象类型，只检测对象最外层属性的变化。</li>\n<li><code>shallowRef</code>，该函数指定只处理基本类型的响应式，也可用于对象整体的替换监测。</li>\n</ul>\n<h4 id=\"8-4-2-只读\">8.4.2 只读</h4>\n<ul>\n<li><code>readonly</code> 使嵌套的响应式数据全部只读；</li>\n<li><code>shallowReadonly</code> 使一个响应式数据变为浅层只读；</li>\n</ul>\n<p>适用于不得对数据进行更改时。</p>\n<h4 id=\"8-4-3-toRaw与markRaw\">8.4.3 <code>toRaw</code>与<code>markRaw</code></h4>\n<p>上述两个API可以使对象由响应式变为普通数据，以及标记该对象永不成为响应式数据。</p>\n<p><code>toRaw</code>可以读取响应式对象对应的普通对象，对这个普通对象的所有操作不会引起页面更新。</p>\n<p><code>markRaw</code>由于某些第三方类库或者有不可变数据源的大列表不宜成为响应式对象，所以可以标记其不能成为响应式。</p>\n<h4 id=\"8-4-4-customRef\">8.4.4 <code>customRef</code></h4>\n<p>创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行显式控制。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class=\"line\">\t&lt;h3&gt;</span><br><span class=\"line\">        &#123;&#123;keyword&#125;&#125;</span><br><span class=\"line\">    &lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport &#123;ref, customRef&#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &#x27;App&#x27;,</span><br><span class=\"line\">        setup() &#123;</span><br><span class=\"line\">            function myRef(value, delay) &#123;</span><br><span class=\"line\">                let timer;</span><br><span class=\"line\">                // 相当于写 proxy 的 handle 处理函数</span><br><span class=\"line\">                // 用于覆盖框架默认的 ref 行为</span><br><span class=\"line\">                const myRef = customRef((track, trigger) =&gt; &#123;</span><br><span class=\"line\">                    get() &#123;</span><br><span class=\"line\">                        // 追踪数据变化而非忽略</span><br><span class=\"line\">                        track();</span><br><span class=\"line\">                        return value;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    set(newVal) &#123;</span><br><span class=\"line\">                        clearTimeout(timer);</span><br><span class=\"line\">                        // 定时器用于防抖</span><br><span class=\"line\">                        timer = setTimeout(()=&gt; &#123;</span><br><span class=\"line\">                            value = newVal;</span><br><span class=\"line\">                        // 使Vue重新解析模板</span><br><span class=\"line\">                        \ttrigger();</span><br><span class=\"line\">                        &#125;, delay);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            </span><br><span class=\"line\">            let keyword = myRef(&#x27;hello&#x27;, 500);</span><br><span class=\"line\">            return &#123;keyword&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-4-5-provide与inject\">8.4.5 <code>provide</code>与<code>inject</code></h4>\n<p>上述API可实现祖先后代（跨级）间组件通信，父组件使用<code>provide</code>提供数据，子组件使用<code>inject</code>使用数据。</p>\n<p>使用如下简单API，即可跨级传递响应式对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">provide(<span class=\"string\">&#x27;car&#x27;</span>, car); <span class=\"comment\">// 标明传输名与对象名</span></span><br><span class=\"line\"></span><br><span class=\"line\">inject(<span class=\"string\">&#x27;car&#x27;</span>); <span class=\"comment\">// 直接使用传输名获取对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"8-4-6-响应式API的判断\">8.4.6 响应式API的判断</h4>\n<ul>\n<li><code>isRef</code></li>\n<li><code>isReactive</code></li>\n<li><code>isReadOnly</code></li>\n<li><code>isProxy</code></li>\n</ul>\n<p>分别用于检查对象是否具有上述属性。需要注意的是<code>readonly</code>方法创建的对象也属于<code>proxy</code>类别。</p>\n<h3 id=\"8-5-组合式API的优势\">8.5 组合式API的优势</h3>\n<ul>\n<li>首先原<code>options</code>API中会导致各个方法的耦合在同一的<code>options</code>中。</li>\n<li>组合式API可以将同一个功能中的实现全部组合到同一的<code>hook</code>中，同时可以按需引入。</li>\n</ul>\n<h3 id=\"8-6-新组件特性\">8.6 新组件特性</h3>\n<h4 id=\"8-6-1-Fragment\">8.6.1 <code>Fragment</code></h4>\n<p><code>Vue3</code>中组件可以没有根标签，内部会将多个标签包含在同一个<code>Fragment</code>虚拟元素中，最后不参与渲染。</p>\n<h4 id=\"8-6-2-Teleport\">8.6.2 <code>Teleport</code></h4>\n<p>该方法能够直接将组件的<code>html</code>内容直接移动到指定的位置，如述内容在渲染完成后将直接挂载到<code>body</code>标签而非父组件上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- 此处可以直接使用CSS选择器 --&gt;</span><br><span class=\"line\">\t&lt;teleport to=&quot;body&quot;&gt;</span><br><span class=\"line\">    \t&lt;div v-if=&quot;isShow&quot; class=&quot;dialog&quot;&gt;</span><br><span class=\"line\">            &lt;button @click=&quot;isShow = false00&quot;&gt;</span><br><span class=\"line\">\t\t\t\t关闭                </span><br><span class=\"line\">    \t\t&lt;/button&gt;</span><br><span class=\"line\">    \t&lt;/div&gt;</span><br><span class=\"line\">    &lt;/teleport&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-6-3-Suspense\">8.6.3 <code>Suspense</code></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 异步引入组件 可以避免主组件对所有子组件的载入等待</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child = defineAsyncComponent(<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./components/Child&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;Suspense&gt;</span><br><span class=\"line\">    \t&lt;template v-slot:default&gt;</span><br><span class=\"line\">\t\t\t&lt;Child/&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">\t\t&lt;template v-slot:fallback&gt;</span><br><span class=\"line\">\t\t\t&lt;h3&gt;</span><br><span class=\"line\">                加载中...</span><br><span class=\"line\">            &lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">    &lt;/Suspense&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>提供了动态等待异步引入的方法，且组件<code>setup</code>使用<code>async await</code>返回值可以为<code>promise</code>了。</p>\n<h3 id=\"8-7-其他新特性\">8.7 其他新特性</h3>\n<ul>\n<li>全局API转移；<br>\n原部分<code>Vue</code>内的配置项没有完全移动到组合式的API中。<br>\n且原来向<code>Vue.prototype</code>中添加内容实现跨组件通讯的方式被转移到<code>app.config.globalProperties</code>中。</li>\n<li><code>Vue3</code>中<code>data</code>应当一直被写为函数</li>\n<li>移除<code>keyCode</code>键盘编码作为事件触发以及移除<code>v-on.native</code>；</li>\n<li>移除过滤器。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}},"excerpt":"","more":"<h1>Vue 学习 (高级部分)</h1>\n<br>\n<h2 id=\"Chapter-4-Vue中的AJAX\">Chapter 4 Vue中的AJAX</h2>\n<h3 id=\"4-1-跨域代理\">4.1 跨域代理</h3>\n<p>通过在浏览器与跨域的目标服务器之间增加一个代理服务器规避浏览器因跨域引起的安全策略问题。</p>\n<p>浏览器与代理服务器在同一域下，所以可以避免跨域问题。经典的代理方法有<code>vue-cli</code>配置与<code>nginx</code>配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport axios from &#x27;axios&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name : &#x27;App&#x27;,</span><br><span class=\"line\">        methods : &#123;</span><br><span class=\"line\">            getStudents() &#123;</span><br><span class=\"line\">                axios.get(&#x27;http://localhost:8080/students&#x27;).then(</span><br><span class=\"line\">                response =&gt; &#123;</span><br><span class=\"line\">                    console.log(response.data);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                    error =&gt; &#123;</span><br><span class=\"line\">                        console.log(error.message);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ) </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">pages</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;src/main.js&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lintOnSave</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 开启跨域代理服务器（方式一）</span></span><br><span class=\"line\">    <span class=\"comment\">// 直接指向目标服务器 当且仅当8080端口处没有请求的资源时</span></span><br><span class=\"line\">    <span class=\"comment\">// 代理服务器才会转发请求</span></span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>: <span class=\"string\">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方式二</span></span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 请求前缀路径一</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;prefix&#x27;</span> : &#123;</span><br><span class=\"line\">                <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class=\"line\">                <span class=\"comment\">// 重写路径以免目标服务器无法访问</span></span><br><span class=\"line\">                <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">&#x27;^/prefix&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>&#125;,</span><br><span class=\"line\">                <span class=\"comment\">// 用于支持 websocket</span></span><br><span class=\"line\">                <span class=\"attr\">ws</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"comment\">// 改变代理服务器向目标服务器的跨域回应</span></span><br><span class=\"line\">                <span class=\"comment\">// 控制请求头中的 host 值</span></span><br><span class=\"line\">                <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 可以配置多台以不同前缀区分的代理转发</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;/foo&#x27;</span> : &#123;</span><br><span class=\"line\">                <span class=\"attr\">target</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>vue</code>插件库中<code>vue-resource</code>为前官方的AJAX库，低版本<code>Vue</code>可以使用。</p>\n<h3 id=\"4-2-插槽\">4.2 插槽</h3>\n<p>插槽可以让父组件往子组件指定位置插入html结构，是一种组件间通信方式。</p>\n<p>当在外部组件内需要添加自定义内容时：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;Category&gt;</span><br><span class=\"line\">            &lt;img slot=&quot;center&quot; src=&quot;./image/1.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;a slot=&quot;footer&quot; href=&quot;cn.bing.com&quot;&gt;...&lt;/a&gt;</span><br><span class=\"line\">    \t&lt;/Category&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>默认插槽与具名插槽</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- 设置插槽指定Vue将组件外部传入的自定义内容放置于此 --&gt;</span><br><span class=\"line\">\t&lt;slot name=&quot;center&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">\t&lt;!-- 若外部没有插槽 则会显示slot.innerHTML --&gt;</span><br><span class=\"line\">\t&lt;slot name=&quot;footer&quot;&gt;!!!&lt;/slot&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>template</code>写法</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>作用域插槽<br>\n作用域插槽可以通过标签属性向插槽的外部使用者传递内部数据，是一种控制反转与作用域变化的思想：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:games</span>=<span class=\"string\">&quot;games&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Category</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;game&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;yourScope&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 或者 slot-scop=&quot;&#123;games&#125;&quot; --&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"comment\">&lt;!-- 设置了一个数据域调用从插槽内部传来的数据 --&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(g, index) in yourScope.games&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">        \t\t&#123;&#123;g&#125;&#125;</span><br><span class=\"line\">        \t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Category</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<br>\n<h2 id=\"Chapter-5-Vuex\">Chapter 5 <code>Vuex</code></h2>\n<h3 id=\"5-1-简介\">5.1 简介</h3>\n<p><code>Vuex</code>是专门实现集中式状态/数据管理的插件，对应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件通信方式，适用于任意组件间通信。</p>\n<p><img src=\"https://vuex.vuejs.org/vuex.png\" alt=\"vuex\"></p>\n<h3 id=\"5-2-使用\">5.2 使用</h3>\n<h4 id=\"5-2-1-引入\">5.2.1 引入</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue( &#123;</span><br><span class=\"line\">     <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">     <span class=\"comment\">// 引入 Vuex store</span></span><br><span class=\"line\">     <span class=\"attr\">store</span>: store,</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">         Vue.prototype.$bus = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-2-store结构编写\">5.2.2 <code>store</code>结构编写</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./vuex/index.js 创建vuex中的store</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue form <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应组件中的动作 通常action中用于获取其他所需数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 该函数参数自动加入了 store 上下文</span></span><br><span class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, value</span>) </span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;ADD&#x27;</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 操作数据 不要在此进行异步操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自动传入了数据</span></span><br><span class=\"line\">    <span class=\"attr\">ADD</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, value</span>) </span>&#123;</span><br><span class=\"line\">        state.sum += value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 存储数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">sum</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    actions, </span><br><span class=\"line\">    mutations,</span><br><span class=\"line\">    state,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>若共享数据操作中没有网络请求或者其他业务逻辑，可以直接越过<code>actions</code>调用<code>commit</code>。</p>\n<h4 id=\"5-2-3-调用驱动事件\">5.2.3 调用驱动事件</h4>\n<p>在需要进行共享数据操作处调用<code>Vuex</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">increment</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"built_in\">this</span>.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外<code>Vue</code>开发者工具可以每个<code>Vuex</code>操作进行记录。</p>\n<h3 id=\"5-3-store-getters\">5.3 <code>store getters</code></h3>\n<p>相当于在<code>Vuex</code>级别上的计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue form <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, value</span>) </span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;ADD&#x27;</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    <span class=\"attr\">ADD</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, value</span>) </span>&#123;</span><br><span class=\"line\">        state.sum += value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">sum</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于关于state的计算属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">bisSum</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state.sum * <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    actions, </span><br><span class=\"line\">    mutations,</span><br><span class=\"line\">    state,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-4-maps系列优化\">5.4 <code>maps</code>系列优化</h3>\n<h4 id=\"5-4-1-mapState-与mapGetters\">5.4.1 <code>mapState</code> 与<code>mapGetters</code></h4>\n<p>其中若需要对<code>this.$store.state</code>之类的调用做优化，其中<code>vuex</code>已经使用了映射方法做了API优化调用，可以使用如下方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;veux&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 该写法直接将生成的键值对全部拆包放入计算属性中</span></span><br><span class=\"line\">        ...mapState(&#123;</span><br><span class=\"line\">            <span class=\"attr\">total</span>: <span class=\"string\">&#x27;sum&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">school</span>: <span class=\"string\">&#x27;school&#x27;</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 对于同名的state 与 获取函数名 可以直接使用数组</span></span><br><span class=\"line\">        ...mapState([<span class=\"string\">&#x27;sum&#x27;</span>, <span class=\"string\">&#x27;school&#x27;</span>]);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于<code>getters</code>，使用<code>mapGetters</code>即可，方法类似。</p>\n<h4 id=\"5-4-2-mapActions与mapMutations\">5.4.2 <code>mapActions</code>与<code>mapMutations</code></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;button @click=&quot;increment(sum)&quot;&gt;</span><br><span class=\"line\">        Press</span><br><span class=\"line\">    &lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tmethods: &#123;</span><br><span class=\"line\">        ...mapMutations(&#123;</span><br><span class=\"line\">            increment: &#x27;INC&#x27;,</span><br><span class=\"line\">            decrement: &#x27;DEC&#x27;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>该方法可以生成快捷<code>commit</code>方法联系<code>mutations</code>，但是需要在<code>html</code>内传入需要处理的参数，否则是默认的触发事件。</p>\n<p><code>mapActions</code>提供<code>dispatch</code>函数的快捷生成，使用方法类似。</p>\n<h3 id=\"5-5-多组件共享与模块化\">5.5 多组件共享与模块化</h3>\n<p>对于<code>vuex</code>的<code>store</code>可以对各个不同功能的数据域方法进行模块化操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> personOptins = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置按名称查找模块开启</span></span><br><span class=\"line\">    <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 产生store 的模块化</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;yourModuleName&#x27;</span>: personOptions,</span><br><span class=\"line\">        <span class=\"comment\">// &#x27;other&#x27;: options</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引入时注意指定模块查找名</span></span><br><span class=\"line\">    <span class=\"comment\">// 其他的 map 方法也类似</span></span><br><span class=\"line\">    ...mapState(<span class=\"string\">&#x27;yourModuleName&#x27;</span>,[<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"string\">&#x27;school&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外<code>mapGetters</code> <code>mapActions</code> 由于内部的设计结构不同，使用手动方法获取模块化内容时注意使用对应的方式。</p>\n<br>\n<h2 id=\"Chapter-6-路由\">Chapter 6 路由</h2>\n<h3 id=\"6-1-简介\">6.1 简介</h3>\n<p><code>vue-router</code>是专门用于单应用页面的路由功能。单击页面中的导航不会刷新页面，只会做页面的局部更新，且数据需要进行<code>AJAX</code>获取。</p>\n<p>而<strong>路由</strong>指一对映射关系，根据请求路径展示对应页面或者匹配的处理函数。</p>\n<h3 id=\"6-2-基本路由\">6.2 基本路由</h3>\n<p>引入<code>router</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router/index.js&#x27;</span>;</span><br><span class=\"line\">Vue.use(Router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">    <span class=\"attr\">router</span>: router,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>创建路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./router/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/Home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>配置路径变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 靠该标签实现路由的切换 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home&quot;</span>&gt;</span>To Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定组建的额呈现位置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>当路由时需要重新渲染加入的组件称为路由组件置于<code>pages</code>文件夹中，一般组件仍然放置于<code>components</code>。</li>\n<li>组件实例上添加了<code>$route</code>路由对象与<code>$router</code>全局路由器对象。</li>\n<li>每次路由切换时，对应路由组件都会被销毁或创建。</li>\n</ol>\n<h3 id=\"6-3-多级路由\">6.3 多级路由</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一级路由加 / </span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>: <span class=\"string\">&#x27;News&#x27;</span>,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home/news&quot;</span>&gt;</span>To Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-路由传参\">6.4 路由传参</h3>\n<p>跳转路由并携带<code>query</code>参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 字符串写法 模板字符串--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;</span>&#123;&#123;m.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 对象写法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \tpath:&#x27;/home/massege/detail&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \tquery: &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t\tid: m.id,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t\ttitle: m.title,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t&#125;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;m.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>内部接收时使用<code>$route.query</code>接收所有参数。</p>\n<h3 id=\"6-5-路由细节技术\">6.5 路由细节技术</h3>\n<h4 id=\"6-5-1-命名路由\">6.5.1 命名路由</h4>\n<p>另外对于路由可以进行别名的设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">// 一级路由加 / </span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>该方法可以简写路由，在<code>html</code>可以直接使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> <span class=\"attr\">active-class</span>=<span class=\"string\">&quot;active&quot;</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;name: &#x27;index&#x27;&#125;&quot;</span>&gt;</span>Home Page<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-2-路由params参数\">6.5.2 路由<code>params</code>参数</h4>\n<p><strong>路由配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用 : 设置路由解析 params参数</span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home/:id/:page&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>传参方法与前文类似：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 字符串写法 模板字符串--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span>&gt;</span>\t&#123;&#123;m.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 对象写法 此处path必须使用name配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \tpath:&#x27;routeName&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \tparams: &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t\tid: m.id,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t\ttitle: m.title,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  \t&#125;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                  &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;m.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-3-路由的props配置\">6.5.3 路由的<code>props</code>配置</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home/:id/:page&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">            <span class=\"comment\">// 直接传递对象 该对象中所有键值对均以props参数传给Home组件</span></span><br><span class=\"line\">            <span class=\"attr\">props</span>: &#123;&#125;,</span><br><span class=\"line\">        \t<span class=\"comment\">// 设置开关 若开则将params参数注入到组件props属性中</span></span><br><span class=\"line\">        \t<span class=\"attr\">props</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        \t<span class=\"comment\">// 设置函数</span></span><br><span class=\"line\">        \t<span class=\"function\"><span class=\"title\">props</span>(<span class=\"params\">$route</span>)</span> &#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">id</span>:$route.query.id, <span class=\"attr\">title</span>:$route.query.title&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-4-router-link的replace方法\">6.5.4 <code>router-link</code>的<code>replace</code>方法</h4>\n<p>在浏览器的历史记录中<code>Vue</code>默认开启了<code>push</code>记录模式，即每一次地址变动都会被记录。</p>\n<p><code>replace</code>方法即在跳转时，清除当前栈顶的历史项。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">replace</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span>&gt;</span>\t&#123;&#123;m.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-5-缓存路由组件\">6.5.5 缓存路由组件</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使得内部指定的组件名在路由改变后保持不被销毁 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;[&#x27;News&#x27;,&#x27;Home&#x27;]&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-5-6-生命周期钩子补充\">6.5.6 生命周期钩子补充</h4>\n<p><strong><code>activated</code> 与 <code>deactivated</code>两个生命周期</strong>钩子用于 <code>keep-alive</code>的组件在路由改变后调用，捕获路由组件的激活状态。</p>\n<h3 id=\"6-6-编程式路由导航\">6.6 编程式路由导航</h3>\n<p>不适用<code>&lt;router-link&gt;</code>，实现导航与历史记录操作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;pushShow(m)&quot;</span>&gt;</span></span><br><span class=\"line\">    Press</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">pushShow</span>(<span class=\"params\">m</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用全局的路由器对象 调用全局方法跳转</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">id</span>: m.id,</span><br><span class=\"line\">                <span class=\"attr\">title</span>: m.title,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">back</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$router.back();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">forward</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$router.forward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 还有 $router.go 能够根据传入的数字决定历史记录前进后退几步</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-7-路由守卫\">6.7 路由守卫</h3>\n<p>相当于后端的拦截器权限管理，主要用于根据后端的返回信息动态决定页面的加载。</p>\n<h4 id=\"6-7-1-全局前置与后置\">6.7.1 全局前置与后置</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在每次路由切换前调用回调</span></span><br><span class=\"line\"><span class=\"comment\">// 参数为跳转前路由与跳转后路由</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(to.meta.isAuth) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 符合条件则调用next放行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;school&#x27;</span>) === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在<code>$route</code>内有<code>meta</code>对象属性，用于放置自定义内容，可以在内部确定如页面是否需要权限才能查看。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通常在此进行完成页面切换的初始化工作</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = <span class=\"string\">&quot;新标签页&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-7-2-独享守卫\">6.7.2 独享守卫</h4>\n<p>直接在路由配置处配置<code>beforeEnter</code>，注意独享路由守卫只有前置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\">        \t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home/:id/:page&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">        \t<span class=\"function\"><span class=\"title\">props</span>(<span class=\"params\">$route</span>)</span> &#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">id</span>:$route.query.id, <span class=\"attr\">title</span>:$route.query.title&#125;;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 直接在router内配置</span></span><br><span class=\"line\">    \t\t<span class=\"function\"><span class=\"title\">beforeEnter</span>(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// .......</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-7-3-组件内路由守卫\">6.7.3 组件内路由守卫</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 通过路由规则进入该组件时被调用</span></span><br><span class=\"line\">    beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 通过路由规则离开该组件时被调用</span></span><br><span class=\"line\">    beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ... </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-8-路由工作模式\">6.8 路由工作模式</h3>\n<ol>\n<li><code>hash</code>工作模式\n<ul>\n<li>路径中有<code>#</code>号，且后续的路径内容不会发送给服务器</li>\n<li>兼容性好</li>\n<li>部署时不会造成404问题</li>\n<li>路径可能会造成APP分享时地址检验不合法</li>\n</ul>\n</li>\n<li><code>history</code>工作模式\n<ul>\n<li>路径中无<code>#</code>号</li>\n<li>兼容性略差</li>\n<li>部署时需要根据路由路径配置刷新资源不存在问题\n<ul>\n<li>nginx</li>\n<li>nodejs 后端适配</li>\n<li>java 类库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在 mode 模式中配置</span></span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;history&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<br>\n<h2 id=\"Chapter-7-Vue-UI-组件库\">Chapter 7 Vue UI 组件库</h2>\n<h3 id=\"7-1-UI库介绍\">7.1 UI库介绍</h3>\n<ul>\n<li>移动端\n<ul>\n<li>Vant</li>\n<li>Cube UI</li>\n<li>Mint UI</li>\n</ul>\n</li>\n<li>PC端\n<ul>\n<li>Element UI</li>\n<li>IView UI</li>\n<li>Ant Design</li>\n</ul>\n</li>\n</ul>\n<p>一般UI库均可以按需引入。</p>\n<br>\n<h2 id=\"Chpater-8-Vue3-特性\">Chpater 8  <code>Vue3</code> 特性</h2>\n<h3 id=\"8-1-简介\">8.1 简介</h3>\n<p>新的<code>Vue3</code>内容可以使用<code>Vue-CLI</code>与<code>Vite</code>官方构建工具创建。</p>\n<p>使用了<code>Proxy</code>代替<code>defineProperty</code>实现更好的响应式，以及重写了虚拟DOM实现，新增了<code>Tree-Shaking</code>，更好支持<code>TypeScript</code>。</p>\n<p><code>vue-cli</code>新工程的创建：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create vue_test</span><br><span class=\"line\">cd vue_test</span><br><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n<p><code>vite</code>创建：</p>\n<p>其是官方提供的前端构建工具，开发环境中无需重新打包，快速冷启动，热重载，按需编译。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vite-app</span><br><span class=\"line\">cd &lt;project-name&gt;</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-Vue3工程分析\">8.2 <code>Vue3</code>工程分析</h3>\n<p>首先不再引入Vue构造函数，而是新的封装函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建应用实例对象app 类似于vm但是少了一部分成员</span></span><br><span class=\"line\">createApp(App).mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对比 Vue 2 方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        h(App);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.$mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>此外<code>vue</code>文件中的模板结构可以没有根标签<code>&lt;div&gt;</code>包裹。</p>\n<h3 id=\"8-3-常用组合式Composition-API\">8.3 常用组合式<code>Composition API</code></h3>\n<h4 id=\"8-3-1-Setup\">8.3.1 <code>Setup</code></h4>\n<ul>\n<li>是一个新的配置项，值为函数。</li>\n<li>所有的数据方法均配置在<code>Setup</code>函数中。</li>\n<li>可以有两种返回值：\n<ul>\n<li>若返回对象，则对象中的属性、方法、内容均可在模板中直接使用；</li>\n<li>若返回一个渲染函数，则可以直接自定义渲染内容。（将覆盖所有的<code>&lt;template&gt;</code>模板内容）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport &#123;h&#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &#x27;App&#x27;,</span><br><span class=\"line\">        setup() &#123;</span><br><span class=\"line\">            let name = &quot;Alan&quot;;</span><br><span class=\"line\">            let age = 20;</span><br><span class=\"line\">            </span><br><span class=\"line\">            function sayHello() &#123;</span><br><span class=\"line\">                console.log(`Hi, I&#x27;m $&#123;name&#125;, $&#123;age&#125;, how are you?`);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                name,</span><br><span class=\"line\">                age,</span><br><span class=\"line\">                sayHello,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            // 或者返回自定义渲染函数</span><br><span class=\"line\">            return () =&gt; h(&#x27;h1&#x27;, &#x27;Outspace&#x27;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        // vue的配置方式也可以使用</span><br><span class=\"line\">        // 但是这样定义的内容 Vue3 无法调用</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                gender: &#x27;male&#x27;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            sayHi() &#123;&#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>不要两种版本混用；</li>\n<li>有重名内容时，<code>Vue3</code>中的<code>Setup</code>内容由于后生成所以会覆盖，加入到<code>_data</code>中；</li>\n<li><code>Setup</code>不能为<code>async</code>异步，因为模板无法解析返回值的<code>promise</code>对象。（<code>Vue3</code>新版本已经解决）</li>\n</ul>\n<h4 id=\"8-3-2-ref函数\">8.3.2 <code>ref</code>函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;ref&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 直接调用 ref 传入内容 指定一个响应式对象</span></span><br><span class=\"line\"><span class=\"comment\">// ref 将对数据进行加工装箱</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = ref(<span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n<p>其通过模板与<code>defineProperty</code>进行原型上的数据代理，使用了<code>RefImpl</code>实例对象包装，当需要响应式时：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age.value = <span class=\"number\">19</span>;</span><br></pre></td></tr></table></figure>\n<p>这样就能够触发<code>getter</code>，<code>setter</code>从而实现响应式。但是在<code>&lt;template&gt;</code>模板中直接使用变量名就可以实现值的引用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;age&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是对于<strong>传入对象</strong>的<code>ref</code>函数，其将该对象包装为<code>Proxy</code>，实际上调用了<code>reactive</code>新内部函数进行数据加工。实际上完成了对于基本类型与对象的接口统一。</p>\n<p><code>proxy</code>是新的ES标准中规定的访问拦截器，其将数据包装为可以调用特定<code>handler</code>方法的包装对象，根据代码运行时动作自动调用<code>handler</code>内部的相应自定义方法。</p>\n<h4 id=\"8-3-3-reative函数\">8.3.3 <code>reative</code>函数</h4>\n<p>该函数可以定义一个数组，对象类型的响应式数据（无法处理基本类型），并且可以嵌套响应式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = reactive(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Wayne&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"string\">&#x27;20&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">job</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Student&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;CS&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>返回<code>Proxy</code>的实例对象。数组可以直接通过下标处理数据，同样能够实现响应式。</p>\n<h4 id=\"8-3-4-Vue3响应式原理\">8.3.4 <code>Vue3</code>响应式原理</h4>\n<p><code>Vue2</code>对比：通过<code>Object.defineProperty</code>进行递归的数据劫持，对数组重写常用方法，并且在总的<code>Vue</code>实例中添加了全局的<code>$set</code>，<code>$delete</code>函数，从而实现了响应式。</p>\n<p>而在<code>Vue3</code>中，响应式的原理直接通过ES新规范中的<code>Proxy</code>进行包装。</p>\n<ul>\n<li>通过<code>Proxy</code>直接从语言层面拦截<code>Proxy</code>对象中的任意变化，包括属性值的增删改查等。</li>\n<li>通过<code>Reflect</code>对被代理对象的属性进行操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;wayne&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下均为</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数直接得到源对象与被访问的属性名</span></span><br><span class=\"line\">    <span class=\"comment\">// 查</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propName</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something....</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> target[propName];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 增 改</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, propName, value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// rerender the page</span></span><br><span class=\"line\">        target[propName] = value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">deleteProperty</span>(<span class=\"params\">target, propName</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">delete</span> target[propName];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>另外可以通过ES6新增的类似Java 的反射机制进行，属性的更改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.set(target, propName, value);</span><br></pre></td></tr></table></figure>\n<p>这样能够避免原实现中可能造成的抛出异常，重载等问题。</p>\n<h4 id=\"8-3-5-Setup注意\">8.3.5 <code>Setup</code>注意</h4>\n<ul>\n<li><code>Setup</code>会在<code>beforeCreate</code>生命周期函数前执行，且<code>this</code>为<code>undefined</code>；</li>\n<li><code>Setup</code>内部无法通过<code>this</code>获取数据，所以<code>props</code>参数与<code>context</code>由框架从外部传入\n<ul>\n<li><code>props</code>值为对象，包含组件外传入且内部声明接受了的属性；</li>\n<li><code>context</code>上下文含：\n<ul>\n<li><code>attrs</code>为对象，包含组件外传入但未接受的属性；</li>\n<li><code>slot</code>收到的插槽内容，含虚拟DOM；</li>\n<li><code>emit</code>分发自定义事件的函数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;demo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: [<span class=\"string\">&#x27;msg&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">emits</span>: [<span class=\"string\">&#x27;hello&#x27;</span>],</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">btnClick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            context.emit(<span class=\"string\">&#x27;hello&#x27;</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(props, context.attrs, context.emit, context.slots);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;btnClick&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;demo @hello=&#x27;showMsg&#x27; msg=&quot;HelloComponent&quot;&gt;</span><br><span class=\"line\">        &lt;template v-slot:logo&gt;</span><br><span class=\"line\">    \t\t&lt;span&gt;Outspace&lt;/span&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">    &lt;/demo&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport demo from &#x27;./components/demo&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &#x27;App&#x27;,</span><br><span class=\"line\">        components: &#123;demo&#125;,</span><br><span class=\"line\">        setup() &#123;</span><br><span class=\"line\">            function showMsg(value)&#123;</span><br><span class=\"line\">                alert(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                showMsg,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-3-6-计算属性与监视\">8.3.6 计算属性与监视</h4>\n<p><strong>计算属性</strong></p>\n<p>仍可以使用<code>vue2</code>计算属性的风格，但是可以按需在<code>Setup</code>内引入<code>computed</code>函数实现计算属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只读简写</span></span><br><span class=\"line\">person.fullName = computed(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> person.firstName + <span class=\"string\">&#x27;-&#x27;</span> + person.lastName;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读写</span></span><br><span class=\"line\">person.fullName = computed(&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something </span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>监视</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = ref(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = reactive(&#123;<span class=\"attr\">msg</span> : <span class=\"string\">&#x27;hello&#x27;</span>,&#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 单个监视</span></span><br><span class=\"line\">    watch(sum, <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 多个监视</span></span><br><span class=\"line\">    watch([sum, msg], </span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// 多个监视参数时</span></span><br><span class=\"line\">        \t<span class=\"comment\">// 传入的值也为数组</span></span><br><span class=\"line\">    \t  &#125;, </span><br><span class=\"line\">          <span class=\"comment\">// 还可以传入配置</span></span><br><span class=\"line\">          &#123;<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>, <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，目前的<code>watch</code>函数对于<code>reactive</code>创建的响应式数据，仍有<code>bug</code>：</p>\n<ul>\n<li>\n<p>传入的<code>oldValue</code>是无法正确获取的，原因为新旧数据均指向同一对象。</p>\n</li>\n<li>\n<p>深度监视是无法关闭的（<code>Proxy</code>机制仍会响应）。</p>\n</li>\n<li>\n<p>监视响应式对象内部的某一些内容，需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch([<span class=\"function\">()=&gt;</span>person.name, <span class=\"function\">()=&gt;</span>person.age], <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>且对于对象的内部数据，需要开启<code>deep</code>深度监视属性。因为<code>Proxy</code>机制实际上只在对象顶层进行处理。</p>\n</li>\n</ul>\n<p>对于<code>ref</code>定义的对象，若需要深度监视，仍需要开启<code>deep</code>。</p>\n<p><strong><code>watchEffect</code>函数</strong></p>\n<p>该函数可以实现，在回调中使用了哪个属性，就监视哪个属性，但是不需要像计算属性一样写函数的返回值。</p>\n<p>只要内部使用的某属性变化，整个<code>watchEffect</code>函数都会重新调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watchEffect(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x1 = sum.value;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x2 = person.name;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x1, x2);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-3-7-生命周期\">8.3.7 生命周期</h4>\n<img src=\"https://vue3js.cn/docs/zh/images/lifecycle.png\" alt=\"实例的生命周期\" style=\"zoom: 50%;\" />\n<p>所有的生命周期钩子可以使用<code>vue2</code>风格使用，也可以通过组合式API使用。</p>\n<ul>\n<li><code>beforeCreate</code>与<code>created</code>两个函数对应<code>setup</code>；</li>\n<li>所有其他的钩子在组合式时在函数前加<code>On</code>。</li>\n<li>组合式钩子加载早于函数式。</li>\n</ul>\n<h4 id=\"8-3-8-自定义Hook函数\">8.3.8 自定义<code>Hook</code>函数</h4>\n<p>其本质是函数，将<code>setup</code>中的组合式API进行封装，类似于<code>mixin</code>混入，可以复用代码，让<code>setup</code>中的逻辑更清晰。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ../hooks/useHook.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;reactive, onMounted, onBeforeMounted&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> point;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport useHook from &#x27;../hooks/usePoint&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &#x27;Test&#x27;,</span><br><span class=\"line\">        setup() &#123;</span><br><span class=\"line\">            point = usePoint();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这样实际上就是一种代码逻辑的拆分方法，并且能够快捷得调用。</p>\n<h4 id=\"8-3-9-toRefs\">8.3.9 <code>toRefs</code></h4>\n<p>该函数可以将某响应式对象中的属性单独作为响应式变量提供外部使用时调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reactiveMember = toRef(reactiveObj, <span class=\"string\">&#x27;attributeStr&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多个直接指定响应式对象本身</span></span><br><span class=\"line\"><span class=\"comment\">// 其内部所有成员将被包装为响应式</span></span><br><span class=\"line\">toRefs(reactiveObj)</span><br></pre></td></tr></table></figure>\n<p>该函数的产生原因为：由于<code>Vue3</code>对于对象的响应式实现方法<code>proxy</code>只在被处理对象层做出响应而非成员，所以当仅需要暴露对象成员时，使用<code>toRefs</code>实现（而非手动重写<code>proxy</code>的<code>getter</code>与<code>setter</code>）。</p>\n<p>其中<code>reactiveMember</code>已经被包装为<code>ObjectRefImpl</code>类，并进行数据代理，直接对原<code>reactiveObj</code>进行修改操作，是一种引用的响应式实现。</p>\n<h3 id=\"8-4-其他的组合式API\">8.4 其他的组合式API</h3>\n<h4 id=\"8-4-1-浅层次响应式对象\">8.4.1 浅层次响应式对象</h4>\n<ul>\n<li><code>shallowReative</code>，该函数指定对于一个嵌套层次较深的对象类型，只检测对象最外层属性的变化。</li>\n<li><code>shallowRef</code>，该函数指定只处理基本类型的响应式，也可用于对象整体的替换监测。</li>\n</ul>\n<h4 id=\"8-4-2-只读\">8.4.2 只读</h4>\n<ul>\n<li><code>readonly</code> 使嵌套的响应式数据全部只读；</li>\n<li><code>shallowReadonly</code> 使一个响应式数据变为浅层只读；</li>\n</ul>\n<p>适用于不得对数据进行更改时。</p>\n<h4 id=\"8-4-3-toRaw与markRaw\">8.4.3 <code>toRaw</code>与<code>markRaw</code></h4>\n<p>上述两个API可以使对象由响应式变为普通数据，以及标记该对象永不成为响应式数据。</p>\n<p><code>toRaw</code>可以读取响应式对象对应的普通对象，对这个普通对象的所有操作不会引起页面更新。</p>\n<p><code>markRaw</code>由于某些第三方类库或者有不可变数据源的大列表不宜成为响应式对象，所以可以标记其不能成为响应式。</p>\n<h4 id=\"8-4-4-customRef\">8.4.4 <code>customRef</code></h4>\n<p>创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行显式控制。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class=\"line\">\t&lt;h3&gt;</span><br><span class=\"line\">        &#123;&#123;keyword&#125;&#125;</span><br><span class=\"line\">    &lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport &#123;ref, customRef&#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &#x27;App&#x27;,</span><br><span class=\"line\">        setup() &#123;</span><br><span class=\"line\">            function myRef(value, delay) &#123;</span><br><span class=\"line\">                let timer;</span><br><span class=\"line\">                // 相当于写 proxy 的 handle 处理函数</span><br><span class=\"line\">                // 用于覆盖框架默认的 ref 行为</span><br><span class=\"line\">                const myRef = customRef((track, trigger) =&gt; &#123;</span><br><span class=\"line\">                    get() &#123;</span><br><span class=\"line\">                        // 追踪数据变化而非忽略</span><br><span class=\"line\">                        track();</span><br><span class=\"line\">                        return value;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    set(newVal) &#123;</span><br><span class=\"line\">                        clearTimeout(timer);</span><br><span class=\"line\">                        // 定时器用于防抖</span><br><span class=\"line\">                        timer = setTimeout(()=&gt; &#123;</span><br><span class=\"line\">                            value = newVal;</span><br><span class=\"line\">                        // 使Vue重新解析模板</span><br><span class=\"line\">                        \ttrigger();</span><br><span class=\"line\">                        &#125;, delay);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            </span><br><span class=\"line\">            let keyword = myRef(&#x27;hello&#x27;, 500);</span><br><span class=\"line\">            return &#123;keyword&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-4-5-provide与inject\">8.4.5 <code>provide</code>与<code>inject</code></h4>\n<p>上述API可实现祖先后代（跨级）间组件通信，父组件使用<code>provide</code>提供数据，子组件使用<code>inject</code>使用数据。</p>\n<p>使用如下简单API，即可跨级传递响应式对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">provide(<span class=\"string\">&#x27;car&#x27;</span>, car); <span class=\"comment\">// 标明传输名与对象名</span></span><br><span class=\"line\"></span><br><span class=\"line\">inject(<span class=\"string\">&#x27;car&#x27;</span>); <span class=\"comment\">// 直接使用传输名获取对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"8-4-6-响应式API的判断\">8.4.6 响应式API的判断</h4>\n<ul>\n<li><code>isRef</code></li>\n<li><code>isReactive</code></li>\n<li><code>isReadOnly</code></li>\n<li><code>isProxy</code></li>\n</ul>\n<p>分别用于检查对象是否具有上述属性。需要注意的是<code>readonly</code>方法创建的对象也属于<code>proxy</code>类别。</p>\n<h3 id=\"8-5-组合式API的优势\">8.5 组合式API的优势</h3>\n<ul>\n<li>首先原<code>options</code>API中会导致各个方法的耦合在同一的<code>options</code>中。</li>\n<li>组合式API可以将同一个功能中的实现全部组合到同一的<code>hook</code>中，同时可以按需引入。</li>\n</ul>\n<h3 id=\"8-6-新组件特性\">8.6 新组件特性</h3>\n<h4 id=\"8-6-1-Fragment\">8.6.1 <code>Fragment</code></h4>\n<p><code>Vue3</code>中组件可以没有根标签，内部会将多个标签包含在同一个<code>Fragment</code>虚拟元素中，最后不参与渲染。</p>\n<h4 id=\"8-6-2-Teleport\">8.6.2 <code>Teleport</code></h4>\n<p>该方法能够直接将组件的<code>html</code>内容直接移动到指定的位置，如述内容在渲染完成后将直接挂载到<code>body</code>标签而非父组件上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- 此处可以直接使用CSS选择器 --&gt;</span><br><span class=\"line\">\t&lt;teleport to=&quot;body&quot;&gt;</span><br><span class=\"line\">    \t&lt;div v-if=&quot;isShow&quot; class=&quot;dialog&quot;&gt;</span><br><span class=\"line\">            &lt;button @click=&quot;isShow = false00&quot;&gt;</span><br><span class=\"line\">\t\t\t\t关闭                </span><br><span class=\"line\">    \t\t&lt;/button&gt;</span><br><span class=\"line\">    \t&lt;/div&gt;</span><br><span class=\"line\">    &lt;/teleport&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-6-3-Suspense\">8.6.3 <code>Suspense</code></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 异步引入组件 可以避免主组件对所有子组件的载入等待</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child = defineAsyncComponent(<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./components/Child&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;Suspense&gt;</span><br><span class=\"line\">    \t&lt;template v-slot:default&gt;</span><br><span class=\"line\">\t\t\t&lt;Child/&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">\t\t&lt;template v-slot:fallback&gt;</span><br><span class=\"line\">\t\t\t&lt;h3&gt;</span><br><span class=\"line\">                加载中...</span><br><span class=\"line\">            &lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">    &lt;/Suspense&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>提供了动态等待异步引入的方法，且组件<code>setup</code>使用<code>async await</code>返回值可以为<code>promise</code>了。</p>\n<h3 id=\"8-7-其他新特性\">8.7 其他新特性</h3>\n<ul>\n<li>全局API转移；<br>\n原部分<code>Vue</code>内的配置项没有完全移动到组合式的API中。<br>\n且原来向<code>Vue.prototype</code>中添加内容实现跨组件通讯的方式被转移到<code>app.config.globalProperties</code>中。</li>\n<li><code>Vue3</code>中<code>data</code>应当一直被写为函数</li>\n<li>移除<code>keyCode</code>键盘编码作为事件触发以及移除<code>v-on.native</code>；</li>\n<li>移除过滤器。</li>\n</ul>\n"},{"title":"Vue 基础部分","date":"2021-10-26T09:37:10.000Z","cover":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/6c8e4c06e7fadeb548154c5577ad66254afcf0db.jpg","_content":"\n# Vue 学习 (基础部分)\n\n<br>\n\n\n\n## Chapter 0 简介\n\nVue是一套用于构建用户界面的渐进式 JavaScript 框架。\n\n**特点**\n\n1. 采用组件化模式，提高代码复用率，让代码更好维护。\n2. 声明式编码，无需直接操作DOM，提高开发效率。\n3. 使用虚拟DOM，优秀的Diff算法，复用DOM节点。\n4. 使用了MVVM模式，编码简洁，本身只关注UI。\n\n**前置学习**\n\n1. Ajax\n2. Prototype\n3. Promise\n4. Axios\n5. ES6 - ES11\n6. 包管理器\n\n**搭建开发环境**\n\n1. 方法1：使用`<script>`标签引入。\n2. 方法2：使用`NPM`与`Vue-Cli`搭建。\n\n<br>\n\n## Chpater 1 Vue基本\n\n### 1.1 初识案例\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vue Test Page</title>\n</head>\n\n<body>\n    <!-- 目标容器 -->\n    <div id=\"root\">\n        <h1>\n            <!-- Vue 模板 可以使用任何JS表达式 -->\n            Hello {{banner}}!\n        </h1>\n    </div>\n\n    <script type=\"text/javascript\" src=\"./js/vue.js\"></script>\n    <script type=\"text/javascript\">\n        // 关闭开发环境提示\n        Vue.config.productionTip = false;\n\t\t\n        // 创建实例 传入配置对象\n        new Vue({\n            // 指定当前 Vue 实例的服务对象容器\n            el: document.querySelector('#root'),\n            // 指定数据 供 el 中所指定的元素使用\n            // Vue 自动查找到使用模板字符的位置并进行动态双向绑定\n            // 一般通过组件形式指定\n            data: {\n                banner: 'My Vue',\n            }\n        })\n    </script>\n</body>\n\n</html>\n```\n\n**总结**\n\n1. `Vue`的工作方式是创建一个实例，同时传入一个配置对象指定容器与数据等内容；\n2. 原`html`中的内容使用了`Vue`中的模板，`Vue`使用一种解析机制，将原DOM使用虚拟化DOM替换，将模板字符串更改为JS中的指定数据。\n3. 其中`Vue`对象与`html`容器的绑定是一对一的关系，任何多对一，多对多的绑定均不会起作用。\n\n\n\n### 1.2 模板语法与数据绑定\n\n#### 1.2.1 模板的理解\n\nVue 中有两大类的模板语法：\n\n1. 插值语法 `{{}}`；\n\n   ```html\n   <h1>\n       Hello {{banner}}!\n   </h1>\n   ```\n\n2. 指令 `v-bind` `v-for`等等；\n\n   ```html\n   <a :href=\"url\">简写链接</a>\n   <a v-bind:href=\"url\">v-bind链接</a>\n   ```\n\n   可以通过该语法解析标签内部的绑定内容。\n\n\n\n#### 1.2.2 数据绑定\n\n```html\n<div id=\"input-form\">\n        单向绑定<input type=\"text\" v-bind:value=\"name\" disabled=\"true\"><br/>\n        双向绑定<input type=\"text\" v-model:value=\"name\"> <br/>\n    </div>\n```\n\n```js\nnew Vue({\n         el: document.querySelector('#input-form'),\n         data: {\n         name: \"Input something...\",\n    },\n})\n```\n\n这样就可实现单向与双向的数据绑定。\n\n**注意：其中`v-model`标签只能应用在表单类的元素上，固定应用于`value`属性上。**\n\n\n\n#### 1.2.3 `el` `data`的指定与原型链分析\n\n先前创建的`Vue`对象使用了原型链的方法\n\n![image-20210911170627577](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210911170627577.png)\n\n创建的对象中所有以`$`开头的方法均为开放使用的API， 其余的内部属性不要使用。\n\n而`Vue`对象通过原型链的方法，将`el`容器绑定在`prototype`中的`$mount`方法中。\n\n所以可以在`Vue`组件创建之后再使用`$mount`来挂载容器。\n另外`data`属性需要指定为对象，所以在后续的组件化过程中需要使用构建函数返回对象进行数据的绑定加载。\n\n```js\nconst v = new Vue({\n    data: function() {\n        return {\n            name:'Evan You',\n            address: 'Shanghai',\n        }\n    }\n})\nv.$mount('#input-form');\n```\n\n注意：普通箭头函数中的`this`指向全局的`Window`对象，建议在`data`指定时使用传统函数定义方法。\n\n\n\n#### 1.2.4 MVVM 模型\n\n![image-20210911171728786](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210911171728786.png)\n\n> - M：模型（Model）\n> - V：视图（View）\n> - VM：视图模型（ViewModel）\n\n其中Vue的VM及其原型对象上的数据都可以被直接访问到。\n\n\n\n#### 1.2.5 数据代理\n\nJS中为一个对象动态添加属性的方法为：\n\n```js\nlet propertyValue = \"\";\nlet yourObject = {};\nObject.defineProperty(yourObject, objectProperty, {\n    value: propertyValue,\n    // 属性是否参与枚举与迭代\n    enumerable: true,\n    // 属性是否可更改\n    writable: true,\n    // 属性是否可被删除\n    configurable: true,\n    // 每次访问该属性时 getter 函数就会被调用\n    // 从而实现值的动态更新\n    get() {\n        return propertyValue;\n    },\n    \n    set(value) {\n        propertyValue = value;\n    }\n})\n```\n\n通过该方法添加的属性是可以进行高级的属性控制。\n\nVue通过上述方法进行对象的数据代理。\n\n```js\n// obj2 代理了 obj1 的数据\nlet obj = {\n    x: 100,\n}\n\nlet obj2 = {\n    y: 200,\n}\n\nObject.defineProperty(obj2, 'x', {\n    get() {\n        return obj.x;\n    },\n    set(value) {\n        obj.x = value;\n    }\n})\n```\n\nVue对象是通过定义数据代理的方式，将`getter`和`setter`指向传入的数据对象从而进行处理，可以认为是进行了一层封装，从而使得外部调用时直接使用属性名而非`_data.propertyValue`去调用。\n\n\n\n### 1.3 事件处理\n\n#### 1.3.1 事件案例\n\n```html\n<div id=\"event-btn\">\n    <button v-on:click=\"showInfo1\">提示信息</button>\n    <button @click=\"showInfo2(number, $event)\">提示信息</button>\n</div>\n```\n\n```js\nnew Vue({\n     el: document.querySelector('#event-btn'),\n     data: {},\n     methods: {\n         //该函数中的 this 指代 Vue 对象 后续可能指代组件实例\n         //event参数指代鼠标事件\n         // html 中调用时参数默认为鼠标事件对象\n          showInfo1(event) {\n               alert('Vue 对象中的 Methods 绑定');\n          },\n         // 该函数接受html规定的参数\n         showInfo2(number, event) {\n             console.log(event);\n             console.log(number);\n         }\n     }\n})\n```\n\n理论上函数也可以放入参数的`data`中，但是这样会导致没有意义的数据代理与劫持。\n\n\n\n#### 1.3.2 事件修饰符\n\n1. `prevent` 阻止默认事件\n2. `stop` 阻止事件冒泡\n3. `once` 事件只触发一次\n4. `capture`  使用事件的捕获模式，在捕获阶段就处理事件\n5. `self` 只有`event.target`是当前操作的元素时才触发事件\n6. `passive` 事件的默认行为立即执行，无需等待事件回调执行完毕\n\n```html\n<!-- 组织a标签的默认事件 -->\n<a href=\"cn.bing.com\" @click.prevent=\"showInfo\">HREF</a>\n```\n\n\n\n#### 1.3.3 键盘事件\n\n```html\n<input type=\"text\" @keyup=\"showInfo\">\n<input type=\"text\" @keydown=\"showInfo\">\n```\n\n对于键盘事件 `Vue`也有一系列别名。\n\n```html\n<input type=\"text\" @keyup.enter=\"showInfo\">\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data:{},\n    methods:{\n        showInfo(event) {\n            console.log(event.target.value);\n        }\n    }\n})\n```\n\n![image-20210912113151927](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912113151927.png)\n\n\n\n### 1.4 计算属性\n\n#### 1.4.1 计算属性案例\n\n```html\n<div id=\"#root\">\n    <input type=\"text\" v-model=\"firstName\"> <br/>\n    <input type=\"text\" v-model=\"lastName\"> <br/>\n    <span></span>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data: {\n        firstName:'张',\n        lastName:'三'\n    },\n    // 计算属性\n    computed:{\n        fullName:{\n            get() {\n                return this.firstName + this.lastName;\n            },\n            // 一般不使用set设置因为结果只用于展示\n            set(value) {\n                this.firstName = value.split('-')[0];\n                this.lastName = value.split('-')[1];\n            }\n        }\n    }\n})\n```\n\n计算属性不储存在`vm._data`中，而是作为源属性的计算结果直接存储在`vm`对象中。\n\n\n\n#### 1.4.2 计算属性特性\n\n其中`get`函数仅在所依赖的数据发生变化时与初次读取调用，并进行结果的缓存，**多次解析时使用缓存结果**。\n\n计算属性底层使用了`Object.defineproperty`方法提供的`getter`与`setter`，内部有缓存机制，效率更高。\n\n若需要计算属性的结果被修改，则需要使用`set`函数响应，且其中要引起源数据的更改才能应用。\n\n另外若只需要读取计算属性，有下列简略形式实现`getter`：\n\n```js\ncomputed:{\n    fullName() {\n        return this.firstName + this.lastName;\n    }\n}\n```\n\n\n\n### 1.5 监视属性\n\n#### 1.5.1 监视案例\n\n```js\nconst vm = new Vue({\n    el:'#root',\n    data:{\n        isHot: true,\n    },\n    methods: {\n        changeWeather() {\n            this.isHot = !this.isHot;\n        }\n    }\n    // 配置监视\n    watch:{\n        isHot: {\n    \t\t// 初始化时即调用\n    \t    immediate: true,\n    \t\t// 监视到isHot变化时即调用\n            handler(newValue, oldValue) {\n                \n            },\n        }\n    }\n})\n\n// 外部配置监视\nvm.$watch('isHot', {\n    \t// 初始化时即调用\n    \timmediate: true,\n    \t// 监视到isHot变化时即调用\n        handler(newValue, oldValue) {},\n})\n```\n\n监视的属性必须存在，若写错时不会报错，仅会使参数变为`undifined`。\n\n#### 1.5.2 深度监视\n\n监视数据对象内部的数据源，需要将\n\n```js\n// 配置监视\nwatch:{\n    'whether.isHot': {\n        // 监视多级对象内部所有成员的变化\n        deep:true,\n    \t// 监视到对象成员isHot变化时即调用\n        handler(newValue, oldValue) {\n                \n        },\n    },\n}\n```\n\n#### 1.5.3 监视的简写\n\n当配置的监视项内仅有处理回调而没有其他配置项时，可以使用如下简写：\n\n```js\nwatch: {\n    isHot() {\n        // ...\n    }\n}\n```\n\n#### 1.5.4 `watch`与`computed`的对比\n\n两者在大部分情况下没有明显区别。\n\n但是计算属性中无法开启异步数据更新，需要使用`watch`来实现。\n\n另外，所有不被`Vue`所管理的函数（定时器的回调函数，`AJAX`回调函数等）需要写为箭头函数，这样的`this`指向的才是`vm`或者组件实例对象。**箭头函数没有自己的this值**，箭头函数中所使用的this来自于函数作用域链。\n\n\n\n### 1.6 `class`与`style`绑定\n\n#### 1.6.1 `class`绑定\n\n```html\n<div id=\"root\">\n    <!-- 绑定class样式 数组写法 -->\n    <!-- Vue 会自动将两个class属性合并 且支持字符串指定 数组解析 对象指定等等-->\n    <div class=\"basic\" v-bind:class=\"mood\" @click=\"changeMood\">\n    \t{{name}}\n\t</div>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data:{\n        name:'Wayne',\n        mood: [],\n    },\n    methods: {\n        changeMood() {\n            // 字符串式\n            this.mood = 'happy';\n            \n            // 数组式\n            this.mood = ['happy','normal'];\n            \n            // 对象式\n            this.mood = {\n                happy: true,\n                normal: false,\n            };\n        }\n    }\n})\n```\n\n#### 1.6.2 `style`绑定\n\n```html\n<div id=\"root\">\n    <!-- 绑定style样式 -->\n    <div class=\"basic\" v-bind:style=\"styleObj\" @click=\"changeMood\">\n    \t{{name}}\n\t</div>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data:{\n        name:'Wayne',\n        mood: [],\n        styleObj: {\n            fontSize: '40px',\n            color: 'red',\n        }\n    },\n})\n```\n\n\n\n### 1.7 渲染\n\n#### 1.7.1 条件渲染\n\n**控制标签的可见性**\n\n```html\n<h2 v-show=\"true\">\n    Welcome to Outspace!\n</h2>\n```\n\n该方法只控制标签的`visibility`。\n\n\n\n**控制渲染是否进行**\n\n```html\n<h2 v-if=\"false\">\n    Welcome to Outspace!\n</h2>\n<h2 v-else>\n    Welcome to Tech World!\n</h2>\n```\n\n另有`v-else-if`，此外该结构的正确执行必须使用相互关联的`v-if`，不能被其他标签阻隔。\n\n可以使用`template`标签保证不用引入额外的`div`嵌套来使`v-if`正常执行。\n\n```html\n<template v-if='n===1'>\n\t<h2>\n\t    Welcome to Outspace!\n\t</h2>\n</template>\n```\n\n使用`v-if`时，元素可能无法被获取到，而`v-show`一定能获取到。\n\n\n\n#### 1.7.2 列表渲染\n\n##### `v-for`案例\n\n```html\n<div id=\"root\">\n    <ul>\n        <!-- index 为遍历的数组索引 key用于唯一区分DOM用以动态更新 -->\n        <li v-for=\"(p, index) in persons\" :key=\"index\">\n        {{p.id}} - {{p.name}}\n        </li>\n        <!-- 该方法也可以遍历对象 以键值对形式-->\n        <li v-for=\"(value, keyin) of car\" :key='keyin'>\n            {{key}} : {{value}}\n        </li>\n    </ul>\n</div>\n```\n\n```js\nnew Vue({\n    el: '#root',\n    data: {\n        persons: [\n            {id:'001', name:'张三'},\n            {id:'002', name:'李四'},\n            {id:'003', name:'王五'},\n        ],\n        car: {\n            name: 'BMW 750',\n            color: 'white',\n        }\n    }\n});\n```\n\n该方法也可以遍历字符串，也可以遍历指定次数。\n\n\n\n##### `:key`的原理\n\n用于为节点更新时的`Diff`算法作为唯一标识符，对比同`key`的标签内容，若同则不进行DOM更新，直接复用，若不同则创建新的虚拟DOM以及真是DOM。\n\n![image-20210912141054846](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912141054846.png)\n\n![image-20210912141414383](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912141414383.png)\n\n\n\n##### 列表过滤\n\n```html\n<div id=\"root\">\n    <ul>\n        <input type=\"text\" v-model=\"keyword\">\n        <li v-for=\"p in persons\" :key=\"p.id\">\n        {{p.id}} - {{p.name}}\n        </li>\n    </ul>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data:{\n        persons:[\n        \t{id:'001', name:'马冬梅',age:19},\n        \t{id:'002', name:'周冬雨',age:20},\n        \t{id:'003', name:'周杰伦',age:21},\n        \t{id:'004', name:'温兆伦',age:22},\n    \t],\n        filterPersons: [],\n        keyword,\n    }\n    // 数据监视实现\n    watch: {\n    \tkeyword:{\n    \t\timmediate:true,\n    \t\thandler(value) {\n    \t\t\tthis.filterPersons = this.persons.filter((p) => {\n                    return p.name.indexOf(value) !== -1;\n                })\n\t\t\t}\n\t\t}\n\t},\n    \n})\n```\n\n也可以使用计算属性的方法，并进行排序：\n\n```js\ncomputed: {\n    filterPersons() {\n        const arr = this.persons.filter((p)=>{\n            return p.name.indexOf(this.keyword) !== -1\n        });\n        if(this.sortType) {\n            arr.sort((p1, p2)=> {\n                return this.sortType === 1 ? p2.age - p1.age : p1.age - p2.age;\n            })\n        }\n        return arr;\n    }\n}\n```\n\n\n\n#### 1.7.3 Vue检测数据的原理\n\n##### 监测案例\n\n```js\nlet data = {\n    name: 'Wayne',\n    address: 'Shanghai',\n}\n\nconst obs = new Observer(data);\nlet vm = data = obs;\n\nfunction Observer(obj) {\n    const keys = Object.keys(obj);\n    keys.forEach((k)=> {\n        Object.defineProperty(this, k, {\n            get() {\n                return obj[k];\n            },\n            set(val) {\n                obj[k] = val;\n                // other additinal actions ...\n            }\n        })\n    })\n}\n```\n\n该方法通过`Observer`设置了一个对于`data`的代理，且通过连续的赋值使得原`data`指针被指向了`Observer`实例，而又因为`Observer`中又保持着对原`data`的引用，所以`data`没有被销毁回收且只能通过`Observer`被访问到，类似于闭包的原理。其中对于每个非对象，非数组的属性都具有一对`getter`和`setter`，`setter`中又添加了功能逻辑用于监视属性值的改动，一旦改动就重新构建DOM，应用了一种修饰器的思想。\n\n另外，`Vue`中还设置了`vm._data`的数据代理，从而可以直接通过`vm.property`直接访问属性；对`Observer`做了递归处理，能够检测任意嵌套的多层数据改动。\n\n##### `Vue.set()`方法\n\n该方法可以用于后续的动态添加数据属性并设置监听。\n\n```js\nVue.set(vm.person, 'sex', '男');\n```\n\n同理又有方法\n\n```js\nvm.$set(vm.person, 'sex', '男');\n```\n\n但是这**两种方法不允许在`vm`对象与`vm._data`上直接添加属性。**\n\n##### 数组内的监视原理\n\nVue为数组统一设置了一个`Observer`并仅针对调用数组修改方法的操作予以响应，直接索引无法被检测到。\n\n而Vue托管的数组所调用的方法使用了装饰器，用于更新DOM。\n\n> `push()`\n> `pop()`\n> `shift()`\n> `unshift()`\n> `splice()`\n> `sort()`\n> `reverse()`\n\n##### 数据监视总结\n\n1. `Vue`会监视`data`中所有的数据；\n2. 通过`Observer`数据代理与闭包实现数据监视；\n3. 对象追加的属性默认不做响应式处理，若需要则使用`Vue.set()`或`vm.$set()`；\n4. 通过对数组常用方法的修饰器调用原生方法并添加重新解析模板的函数实现数组中数据的监测；\n\n\n\n### 1.8  常用方法技巧\n\n#### 1.8.1 收集表单数据\n\n![image-20210912155026711](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912155026711.png)\n\n\n\n#### 1.8.2 过滤器\n\n配置过滤器可以处理属性数据，仅限`Vue2`。\n\n```html\n<h3>\n    {{time | timeFormater('YYYY-MM-DD HH:mm:ss')}}\n</h3>\n```\n\n```js\nfilter: {\n    timeFormater(value, str) {\n        return dayjs(value).format(str);\n    }\n},\n```\n\n上述均为局部过滤器，过滤器遵循链式原则。\n\n\n\n### 1.9 其他`Vue`指令\n\n#### 1.9.1 `v-text`\n\n向其所在的标签插入文本（整体替换`innerHTML`）；\n\n```html\n<div v-text=\"name\"></div>\n```\n\n\n\n#### 1.9.2 `v-html`\n\n与`v-text`相似，但能够解析数据文本中的`html`元素。\n\n> 注意：该标签可能导致安全性问题，直接解析Javascript代码可能会被XSS攻击。一定要在可信的内容上使用。\n\n\n\n#### 1.9.3 `v-vloak`\n\n该标签仅用于标记模板内容以用于在低网速情况下，配合CSS避免用户看到未经渲染的源码页面。\n\n```html\n<head>\n    <style>\n        [v-cloak] {\n            display:none;\n        }\n    </style>\n</head>\n<body>\n    <div id='root'>\n        <h2 v-cloak>\n            {{name}}\n        </h2>\n    </div>\n    <script type=\"text/javascript\" src=\"yourCDN\"></script>\n</body>\n```\n\n\n\n#### 1.9.4 `v-once`\n\n该指令使得所在节点经过初次动态渲染后，就被视为静态内容从而不再渲染。以后数据的改变不会影响`v-once`所在结构的更新，可用于优化性能。\n\n\n\n#### 1.9.5 `v-pre`\n\n该指令使得跳过指定阶段的渲染编译过程，可以优化性能或防止不同框架的冲突。\n\n\n\n#### 1.9.6 自定义指令\n\n```html\n<div id=\"root\">\n    <h2>\n        <span v-times=\"n\"></span>\n    </h2>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data: {\n        n: 1,\n    },\n    // 自定义指令 函数式\n    // 对象形式相比于函数形式 可更精细地控制\n    directives: {\n        // 第一参数为真实DOM元素 第二元素为指定的Vue数据\n        // 该函数在指令与元素成功绑定以及指令所在的模板被重新解析时被调用\n        times(element, binding) {\n            element.innerText = binding.value * 10;\n        }\n    }\n})\n\n// 对象式\n'fbind': {\n    // 指令与元素成功绑定时\n    bind(element, binding) {},\n    // 指令所在元素被插入页面时\n    inserted(element, binding) {},\n    // 指令所在的模板被重新解析时\n    update(element, binding) {},\n}\n```\n\n注意：上述自定义指令均为局部指令且处理函数中的`this`都指向`Window`。\n\n可以通过`Vue.directive()`添加全局自定义指令。\n\n\n\n### 1.10 Vue的生命周期\n\n#### 1.10.1 生命周期简介\n\n生命周期又名生命周期回调函数，生命周期钩子。\n\nVue在操作执行的关键时刻调用一些特殊名称的函数，这些函数的名称不可更改，但其内容可以自定义。其中的`this`指针指向`vm`或者组件实例对象。\n\n```js\n// 该生命周期函数在Vue完成模板解析并把初始的真实DOM元素放入页面后（挂载完毕）调用\nmounted() {\n    setIntervel(()=> {\n        this.opacity -= 0.01;\n        if(this.opacity <= 0) \n            this.opacity = 1;\n    })\n}\n```\n\n\n\n#### 1.10.2 生命周期流程\n\n<img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"实例的生命周期\" style=\"zoom:120%;\" />\n\n上图中所有的红色边框的函数即为生命周期函数。\n\n1. `beforeCreate` 初始化前：进行了生命周期、事件的配置但是数据代理还未开始；\n2. `created` 初始化：数据监测，数据代理；\n3. 上述两步完成后，Vue开始解析模板，生成虚拟DOM，但是还不能显示内容；\n4. `beforeMount` 挂载前：页面呈现未经编译的DOM，此时所有DOM操作最终均无效；\n5. 此时Vue 将虚拟DOM转换为真实DOM插入页面；\n6. `mounted` 挂载：此时呈现Vue编译DOM，到此初始化结束。一般可在此自定义：开启定时器，发送网络请求，订阅小心，绑定自定义事件等初始化操作。\n7. 初始化完成后，Vue仅在数据发生改变时进行DOM更新\n8. `beforeUpdate` 更新前：此时数据是最新的，但是页面旧。\n9. 虚拟DOM在此时进行重新渲染，应用Diff与旧虚拟DOM比较，然后完成页面更新。\n10. `updated` 更新完成：数据是新的，页面也更新，保持同步。\n11. 当`vm.$destroy` (Vue2) / `app.unmount` （Vue3）被调用时，Vue开始销毁流程。清理与其他实例的连接，解绑其全部指令及其自定义事件监听器（原生不会处理）。\n12. `beforeUnmount` 销毁前：此时vm的所有内容都可用，一般可以在此阶段进行：关闭定时器，取消订阅消息，解绑自定义事件等操作，但是不会再进行页面的更新。\n13. `unmounted`  完成销毁\n\n<br>\n\n\n\n## Chpater 2 组件\n\n### 2.1 组件简介\n\n原生的模式依赖关系混乱，不好维护且代码复用率不高。\n\n组件即实现提供特定功能的代码集合，划分合理能够做到提高代码的复用率，简化项目编码。\n\n组件分为非单位件组件与单文件组件（`.vue`文件）。\n\n\n\n### 2.2 非单文件组件\n\n#### 2.2.1 非单文件组件注册示例\n\n```html\n<body>\n    <div id='root'>\n        <!-- 编写组件标签 Vue自动替换 -->\n        <school></school>\n        <school></school>\n        <!-- 两组件相互独立 -->\n    </div>\n</body>\n```\n\n\n\n```js\n// 通过Vue API 实现组件的创建\nconst school = Vue.extend({\n\t// Vue 开发者工具使用name进行展示\n    name: 'School',\n    // 使用 tempate 组件化 html 代码结构\n    template: '<div> </div>',\n    // 组件的数据设置需要使用函数返回 可以防止多个组件实例访问到同一个 data 对象造成不可预料的更改\n    data: function() {\n        return {\n            website: 'Outspace',\n            date: '2021/9/12',\n        }\n    }\n})\n\nnew Vue({\n    el:'#root',\n    // 局部注册组件\n    components: {\n        school:school,\n    }\n})\n```\n\n\n\n#### 2.2.2 使用注意\n\n全局注册组件\n\n```js\nVue.component('school', school);\n```\n\n注意：\n\n1. 组件名称如果使用驼峰式，则该组件只能在脚手架环境中正常工作。多单词写法建议使用全小写字符串形式并用`-`连接。\n2. 自闭合标签在非脚手架环境下会导致后续标签无法渲染。\n\n\n\n#### 2.2.3 组件嵌套\n\n组件的注册嵌套只需要在父组件中写入`component`注册即可，开发者工具会将层次结构显示出来。\n\n通常在`vm`实例下仅定义`app`组件，其他子组件均注册在`app`下。\n\n\n\n#### 2.2.4 `VueComponent`\n\n组件本质是一个`VueComponent`函数，由`Vue.extend`生成。\n\n编写组件标签后，Vue会创建对应的组件实例对象，且每次调用返回全新组件实例。\n\n组件配置中的`data` `methods` `watch` `computed` 中函数的 `this` 均为 `VueComponent` 实例对象。\n\n\n\n#### 2.2.5 组件的原型关系\n\n`VueComponent`对象与`Vue`对象非常相似，但是组件是一种可复用的`Vue`实例，其在创建时无法指定作用容器，也不创建实例，知识保存了一个构造函数的指针。\n\n实例的隐式原型对象指向自身创造者的原型对象。\n\n**但是`Vue`使得`VueComponent`的原型对象指向`Vue`原型对象实现原型继承链。**\n\n![image-20210912200021004](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912200021004.png)\n\n这样使得组件实例对象可以访问到`Vue`原型上的属性、方法。\n\n\n\n### 2.3 单文件组件\n\n> 通过 `webpack`或者`vue-cli`将`vue`转译成`js`文件。\n\n```vue\n<template>\n\t<!-- template 标签内为组件的 html -->\n\t<div class='school'>\n        <h2>\n            {{schoolName}}\n    \t</h2>\n        <h2>\n        \t{{address}}    \n    \t</h2>\n        <button @click='showName'></button>\n    </div>\n</template>\n\n<script>\n\t// script 内为JS交互代码\n    export default {\n    \tname: 'School',\n        data: function() {\n            return {\n                schoolName: 'Outspace',\n                address: 'Shanghai',\n            }\n        },\n        methods:{\n            showName() {\n                alert(this.schoolName);\n            }\n        }\n    }\n</script>\n\n<style>\n\t/* style 内为组件的样式表 */\n    [school] {\n        backgroud-color: orange;\n    }\n</style>\n```\n\n在`App.js`内引入所有的二级组件。\n\n```js\nimport School from './School'\nimport Student from './Student'\n\nexport default {\n    name: 'App',\n    components: {\n        School,\n        Student,\n    }\n}\n```\n\n在`main.js`内创建`Vue`实例\n\n```js\n// 注意该语句只能在脚手架内使用\nimport App from './App.vue'\n\nnew Vue({\n    el:'#root',\n    template: '<App></App>',\n    components: {\n        App,\n    },\n    data() {\n    \t\n\t}\n})\n```\n\n搭建`HTML`结构\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>单文件组件</title>\n    </head>\n    <body>\n        <div id='root'></div>\n        <script type=\"text/javascript\" src=\"./vue.js\"></script>\n        <script type=\"text/javascript\" src=\"main.js\"></script>\n    </body>\n</html>\n```\n\n<br>\n\n\n\n## Chapter 3 使用`Vue-Cli`\n\n### 3.1 初始化脚手架\n\n安装\n\n```shell\nnpm install -g @vue/cli\n```\n\n创建脚手架\n\n```shell\nvue create vuetest\n```\n\n开启服务器\n\n```shell\ncd ./vuetest\nnpm run serve\n```\n\n开启脚手架后的目录结构\n\n![image-20210913100522762](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210913100522762.png)\n\n修改默认配置\n\n添加`vue.config.js`修改CLI的默认配置项。https://cli.vuejs.org/zh/config/#pages\n\n另外使用\n\n```shell\nvue inspect > output.js\n```\n\n可以命令脚手架输出其默认配置。\n\n\n\n### 3.2 `render`函数\n\n在脚手架创建的`main.js`函数中：\n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n```\n\n存在`render`函数，用以将App组件放入容器中。\n\n而在运行时`Vue`库中，使用`render`函数将原来`template`中的模板创建出来\n\n```js\nrender(createElement) {\n    return createElement(App);\n}\n```\n\n一般用于开发环境的`Vue`包含完整的核心功能与模板解析器，而生产部署环境没有模板解析器导致无法使用`template`配置。\n\n\n\n### 3.3  `ref`属性\n\n`ref`为`Vue`设置的对于原始DOM中元素的标识符（可以替代`id`属性），可以通过`VueComponent`中的`$ref`方法取得。\n\n```vue\n<template>\n\t<h1 v-text=\"msg\" ref=\"title\"></h1>\n\t<button ref=\"btn\" @click=\"showDom\">\n        点我输出 Title\n    </button>\n</template>\n<script>\n\texport default {\n        name: 'App',\n        data() {\n            return {\n                msg:'Welcome!',\n            };\n        },\n        methods: {\n            showDom() {\n                console.log(this.$refs.title);\n            }\n        }\n    }\n</script>\n```\n\n**其中`this.$refs`保存所有有`ref`属性的对象，对于普通标签储存DOM元素，对于子组件标签储存其实例对象。该方法可用于组件间通信。**\n\n\n\n### 3.4 `props`配置\n\n可以使用子组件的`props`属性声明从外部接收的数据，在父组件内可以直接在组件标签上声明传入的数据。\n\n```html\n<School name=\"Lisa\" :age=\"9*2\"></School>\n```\n\n```vue\n<script>\n\texport default {\n        name: 'School',\n        data() {\n            return {\n                msg:'Welcome!',\n            };\n        },\n        // 简单接收\n        props: ['name', 'age'],\n        // 限制接收类型、必须项与默认值\n        props: {\n            'name' : {\n                type: String,\n                required: true,\n            },\n            'age' : {\n            \ttype: Number,\n                default: 99,\n        \t},\n            'sex' : String,\n        }\n    }\n</script>\n```\n\n一般`props`是只读的，若需要进行修改，则需要在子组件的`data`内设置一个副本。**但是`Vue`只检测`props`的地址变化，是一个浅层次监视，所以建议对于`props`传入的对象属性不要进行修改**。\n\n在组件生成时`props`的接受要先于`data`的创建。\n\n\n\n### 3.5 `mixin`混入\n\n多组件共享一个部分\n\n```vue\n<script>\n    import {mix} from '../mixin.js'\n\texport default {\n        name: 'School',\n        data() {\n            return {\n                msg:'Welcome!',\n            };\n        },\n\t\tmixins: [mix],\n    }\n</script>\n```\n\n可以单独定义一个`js`文件，然后在`Vue`组件内进行`mixin`引入从而实现`js`代码的复用。\n\n```js\nexport const mix = {\n    methods: {\n        showMsg() {\n            alert(this.msg);\n        }\n    }\n}\n```\n\n组件与外部混入的数据若发生冲突（生命周期函数接受双方）以组件内的数据为准。\n\n通过`Vue.mixin`全局引入这个混合。\n\n\n\n### 3.6 插件\n\n```js\nconst plugins = {\n    // 对于引入的 插件 Vue会自动调用 install\n    // 还可以传入其他参数\n    install(Vue, ...) {\n        // 此处可以统一地进行对Vue的配置与\n        // 原型方法的增加等等强大功能\n    }\n}\n```\n\n然后使用\n\n```js\nVue.use(plugins);\n```\n\n\n\n\n\n### 3.7 `scoped`样式\n\n默认`<style>`标签内的样式将会混用。造成CSS混乱。\n\n所以直接添加在标签内直接添加`scoped`即可使得该样式仅用于该组件。\n\n\n\n### 3.8 组件化编码流程\n\n1. 实现静态组件：\n   抽取组件，使用组件实现静态页面效果；\n2. 展示动态数据：数据存储位置，名称；数据保存在哪个组件，确定UUID；\n3. 交互：绑定事件监听，组件间通讯\n\n\n\n1. 组件化编码：\n   - 拆分静态组件：组件按功能点拆分，命名不能与`html`元素冲突；\n   - 实现动态组件：考虑数据的存放位置\n     - 单组件使用\n     - 多组件使用则置于其父组件上\n   - 实现 交互：绑定事件监听，实现组件间通讯。\n2. `props`适用于：\n   - 父组件向子组件通讯；\n   - 子组件通过获取到的父组件函数向父组件通讯。\n3. `v-model`使用：\n   - 不建议对`props`传入的参数使用`v-model`进行绑定修改；\n\n\n\n### 3.9 浏览器本地存储\n\n`localStorage`与 `sessionStorage`的应用。可以用键值对在规定的时间内进行持久化操作。\n\n也包括`IndexedDB`以及`WebSQL`。\n\n均属于原生JS操作，但在本地Web应用中可以使用暂存。\n\n\n\n\n\n### 3.10 组件的自定义事件\n\n#### 3.10.1 绑定\n\n```vue\n<template>\n\t<!-- 为组件绑定自定义事件 -->\n\t<Student v-on:myevent=\"demo\"></Student>\n</template>\n\n<script>\n\timport Student from './components/Student';\n    export default {\n        name:'App',\n        components: {Student},\n        data() {\n            return {\n                msg:'Hello!',\n            };\n        },\n        methods: {\n            // 收到传递事件的参数\n            demo(name) {\n                console.log('demo was invoked!' + 'And student\\'s name is '+ name);\n            }\n        },\n    }\n</script>\n```\n\n```vue\n<template>\n\t<!-- 绑定内部事件 -->\n\t<button @click=\"sendStudentName\">\n        Send\n    </button>\n</template>\n\n<script>\n\texport default {\n        name:'Student',\n        data() {\n            return {\n                name: 'Lisa',\n            };\n        },\n        methods: {\n            sendStudentName() {\n                // 释放事件触发信号\n                // 还可以传递额外的参数\n                this.$emit('myevent', this.name);\n            }\n        },\n    }\n</script>\n```\n\n也可以直接在组件实例对象上添加事件：\n\n```html\n<Student ref=\"student\"></Student>\n```\n\n```js\nmounted() {\n    this.$refs.student.$on('myevent', this.getStudentName);\n}\n```\n\n自定义事件也可以使用所有的事件修饰符。\n\n\n\n#### 3.10.2 解绑与总结\n\n```js\nmethods: {\n    unbind() {\n        // 使用组件实例$off解绑指定自定义事件\n        this.$off(['myevent']);\n    }\n}\n```\n\n1. 组件的自定义事件适用于子组件向父组件传递信息；\n2. 组件上可以绑定原生DOM事件，使用`native`事件修饰符；\n3. 注意绑定自定义事件时，注意回调中`this`的指向。\n\n\n\n### 3.11 全局事件总线\n\n全局事件总线可以进行任意组件间的通信，是一种`Vue`的编程模式。\n\n该总线必须对所有组件可见，可以调用对应组件的`$on` `$off` `$emit`等API。\n\n```js\nnew Vue({\n    el:'#app',\n    render: h => h(App),\n    beforeCreate() {\n        // 将自身的指针挂载到 Vue 的原型对象上\n        // 这样所有的组件均可见且可调用API\n        Vue.prototype.$bus = this;\n    }\n})\n```\n\n只需要在执行回调的组件内全局绑定自定义事件，然后在触发组件内发出`emit`信号，那么借助信号与回调函数的机制就可以实现跨组件的数据传递。\n\n但是这种方法可能会污染`Vue`原型对象的命名空间。\n\n```js\nmounted() {\n    this.$bus.$on('myevent', (data)=>{\n    \tconsole.log(JSON.stringify(data));\n\t})\n}\n```\n\n另外需要在`beforeDestroy()`内按时解绑自定义事件以免资源浪费。\n\n\n\n### 3.12 消息订阅与发布\n\n使用`pubsub-js`等第三方库。\n\nPubSub 其实很简单，可以利用发布订阅原理自行实现。\n\n- 首先创建 PubSub 类，增加 handlers 变量用于保存事件列表；\n- 添加事件时，将监听器加到数组中；\n- 删除事件时，移除监听器；\n- 触发事件，循环遍历并触发所有的事件。\n\n从实现原理看上，Android中的广播也使用了观察者模式，基于消息的发布/订阅事件模型。因此，从实现的角度来看，Android中的广播将广播的发送者和接受者极大程度上解耦，使得系统能够方便集成，更易扩展。\n\n\n\n### 3.13 `nextTick`\n\n组件内如遇到数据更新后需要对DOM元素进行操作，则可使用`nextTick`在DOM更新完毕后再进行指定的回调。\n\n```js\nthis.$nextTick(function() {\n    this.$refs.inputTitle.focus();\n})\n```\n\n\n\n### 3.14 过渡与动画\n\n#### 3.14.1 动画\n\n使用`<transition>`标签包含所需要动画的标签，然后使用CSS3创建动画，但选择器名称有规定：\n\n```html\n<!-- 指定name以匹配对应选择器 appear 可以使得载入时就执行动画 -->\n<transition name='hello' appear>\n\t<h1>\n        HelloWorld!\n    </h1>\n</transition>\n```\n\n```css\n.hello-enter-active{\n    animation: helloworld 0.5s linear;\n}\n\n.hello-leave-active{\n    animation: helloworld 0.5s linear;\n}\n\n@keyframes helloworld {\n    from{\n        transform: translateX(-100%);\n    }\n    to{\n        transform: translateX(0px);\n    }\n}\n```\n\nVue会自行控制动画播放的时机。\n\n\n\n#### 3.14.2 过渡\n\n![image-20210914104838287](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210914104838287.png)\n\n可以使用`transition-group`标签使得过渡被应用到多个内容中，为各个标签添加唯一的`key`值。\n\n也可以使用第三方库。\n\n下面是`Vue`中动画动作的时机标识。\n\n![Transition Diagram](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/transition.png)\n\n","source":"_posts/vue-basic.md","raw":"---\ntitle: Vue 基础部分\ndate: 2021-10-26 17:37:10\ncategories: 学习\ntags:\n  - 笔记\n  - 前端\n  - Vue\ncover: https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/6c8e4c06e7fadeb548154c5577ad66254afcf0db.jpg\n---\n\n# Vue 学习 (基础部分)\n\n<br>\n\n\n\n## Chapter 0 简介\n\nVue是一套用于构建用户界面的渐进式 JavaScript 框架。\n\n**特点**\n\n1. 采用组件化模式，提高代码复用率，让代码更好维护。\n2. 声明式编码，无需直接操作DOM，提高开发效率。\n3. 使用虚拟DOM，优秀的Diff算法，复用DOM节点。\n4. 使用了MVVM模式，编码简洁，本身只关注UI。\n\n**前置学习**\n\n1. Ajax\n2. Prototype\n3. Promise\n4. Axios\n5. ES6 - ES11\n6. 包管理器\n\n**搭建开发环境**\n\n1. 方法1：使用`<script>`标签引入。\n2. 方法2：使用`NPM`与`Vue-Cli`搭建。\n\n<br>\n\n## Chpater 1 Vue基本\n\n### 1.1 初识案例\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vue Test Page</title>\n</head>\n\n<body>\n    <!-- 目标容器 -->\n    <div id=\"root\">\n        <h1>\n            <!-- Vue 模板 可以使用任何JS表达式 -->\n            Hello {{banner}}!\n        </h1>\n    </div>\n\n    <script type=\"text/javascript\" src=\"./js/vue.js\"></script>\n    <script type=\"text/javascript\">\n        // 关闭开发环境提示\n        Vue.config.productionTip = false;\n\t\t\n        // 创建实例 传入配置对象\n        new Vue({\n            // 指定当前 Vue 实例的服务对象容器\n            el: document.querySelector('#root'),\n            // 指定数据 供 el 中所指定的元素使用\n            // Vue 自动查找到使用模板字符的位置并进行动态双向绑定\n            // 一般通过组件形式指定\n            data: {\n                banner: 'My Vue',\n            }\n        })\n    </script>\n</body>\n\n</html>\n```\n\n**总结**\n\n1. `Vue`的工作方式是创建一个实例，同时传入一个配置对象指定容器与数据等内容；\n2. 原`html`中的内容使用了`Vue`中的模板，`Vue`使用一种解析机制，将原DOM使用虚拟化DOM替换，将模板字符串更改为JS中的指定数据。\n3. 其中`Vue`对象与`html`容器的绑定是一对一的关系，任何多对一，多对多的绑定均不会起作用。\n\n\n\n### 1.2 模板语法与数据绑定\n\n#### 1.2.1 模板的理解\n\nVue 中有两大类的模板语法：\n\n1. 插值语法 `{{}}`；\n\n   ```html\n   <h1>\n       Hello {{banner}}!\n   </h1>\n   ```\n\n2. 指令 `v-bind` `v-for`等等；\n\n   ```html\n   <a :href=\"url\">简写链接</a>\n   <a v-bind:href=\"url\">v-bind链接</a>\n   ```\n\n   可以通过该语法解析标签内部的绑定内容。\n\n\n\n#### 1.2.2 数据绑定\n\n```html\n<div id=\"input-form\">\n        单向绑定<input type=\"text\" v-bind:value=\"name\" disabled=\"true\"><br/>\n        双向绑定<input type=\"text\" v-model:value=\"name\"> <br/>\n    </div>\n```\n\n```js\nnew Vue({\n         el: document.querySelector('#input-form'),\n         data: {\n         name: \"Input something...\",\n    },\n})\n```\n\n这样就可实现单向与双向的数据绑定。\n\n**注意：其中`v-model`标签只能应用在表单类的元素上，固定应用于`value`属性上。**\n\n\n\n#### 1.2.3 `el` `data`的指定与原型链分析\n\n先前创建的`Vue`对象使用了原型链的方法\n\n![image-20210911170627577](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210911170627577.png)\n\n创建的对象中所有以`$`开头的方法均为开放使用的API， 其余的内部属性不要使用。\n\n而`Vue`对象通过原型链的方法，将`el`容器绑定在`prototype`中的`$mount`方法中。\n\n所以可以在`Vue`组件创建之后再使用`$mount`来挂载容器。\n另外`data`属性需要指定为对象，所以在后续的组件化过程中需要使用构建函数返回对象进行数据的绑定加载。\n\n```js\nconst v = new Vue({\n    data: function() {\n        return {\n            name:'Evan You',\n            address: 'Shanghai',\n        }\n    }\n})\nv.$mount('#input-form');\n```\n\n注意：普通箭头函数中的`this`指向全局的`Window`对象，建议在`data`指定时使用传统函数定义方法。\n\n\n\n#### 1.2.4 MVVM 模型\n\n![image-20210911171728786](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210911171728786.png)\n\n> - M：模型（Model）\n> - V：视图（View）\n> - VM：视图模型（ViewModel）\n\n其中Vue的VM及其原型对象上的数据都可以被直接访问到。\n\n\n\n#### 1.2.5 数据代理\n\nJS中为一个对象动态添加属性的方法为：\n\n```js\nlet propertyValue = \"\";\nlet yourObject = {};\nObject.defineProperty(yourObject, objectProperty, {\n    value: propertyValue,\n    // 属性是否参与枚举与迭代\n    enumerable: true,\n    // 属性是否可更改\n    writable: true,\n    // 属性是否可被删除\n    configurable: true,\n    // 每次访问该属性时 getter 函数就会被调用\n    // 从而实现值的动态更新\n    get() {\n        return propertyValue;\n    },\n    \n    set(value) {\n        propertyValue = value;\n    }\n})\n```\n\n通过该方法添加的属性是可以进行高级的属性控制。\n\nVue通过上述方法进行对象的数据代理。\n\n```js\n// obj2 代理了 obj1 的数据\nlet obj = {\n    x: 100,\n}\n\nlet obj2 = {\n    y: 200,\n}\n\nObject.defineProperty(obj2, 'x', {\n    get() {\n        return obj.x;\n    },\n    set(value) {\n        obj.x = value;\n    }\n})\n```\n\nVue对象是通过定义数据代理的方式，将`getter`和`setter`指向传入的数据对象从而进行处理，可以认为是进行了一层封装，从而使得外部调用时直接使用属性名而非`_data.propertyValue`去调用。\n\n\n\n### 1.3 事件处理\n\n#### 1.3.1 事件案例\n\n```html\n<div id=\"event-btn\">\n    <button v-on:click=\"showInfo1\">提示信息</button>\n    <button @click=\"showInfo2(number, $event)\">提示信息</button>\n</div>\n```\n\n```js\nnew Vue({\n     el: document.querySelector('#event-btn'),\n     data: {},\n     methods: {\n         //该函数中的 this 指代 Vue 对象 后续可能指代组件实例\n         //event参数指代鼠标事件\n         // html 中调用时参数默认为鼠标事件对象\n          showInfo1(event) {\n               alert('Vue 对象中的 Methods 绑定');\n          },\n         // 该函数接受html规定的参数\n         showInfo2(number, event) {\n             console.log(event);\n             console.log(number);\n         }\n     }\n})\n```\n\n理论上函数也可以放入参数的`data`中，但是这样会导致没有意义的数据代理与劫持。\n\n\n\n#### 1.3.2 事件修饰符\n\n1. `prevent` 阻止默认事件\n2. `stop` 阻止事件冒泡\n3. `once` 事件只触发一次\n4. `capture`  使用事件的捕获模式，在捕获阶段就处理事件\n5. `self` 只有`event.target`是当前操作的元素时才触发事件\n6. `passive` 事件的默认行为立即执行，无需等待事件回调执行完毕\n\n```html\n<!-- 组织a标签的默认事件 -->\n<a href=\"cn.bing.com\" @click.prevent=\"showInfo\">HREF</a>\n```\n\n\n\n#### 1.3.3 键盘事件\n\n```html\n<input type=\"text\" @keyup=\"showInfo\">\n<input type=\"text\" @keydown=\"showInfo\">\n```\n\n对于键盘事件 `Vue`也有一系列别名。\n\n```html\n<input type=\"text\" @keyup.enter=\"showInfo\">\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data:{},\n    methods:{\n        showInfo(event) {\n            console.log(event.target.value);\n        }\n    }\n})\n```\n\n![image-20210912113151927](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912113151927.png)\n\n\n\n### 1.4 计算属性\n\n#### 1.4.1 计算属性案例\n\n```html\n<div id=\"#root\">\n    <input type=\"text\" v-model=\"firstName\"> <br/>\n    <input type=\"text\" v-model=\"lastName\"> <br/>\n    <span></span>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data: {\n        firstName:'张',\n        lastName:'三'\n    },\n    // 计算属性\n    computed:{\n        fullName:{\n            get() {\n                return this.firstName + this.lastName;\n            },\n            // 一般不使用set设置因为结果只用于展示\n            set(value) {\n                this.firstName = value.split('-')[0];\n                this.lastName = value.split('-')[1];\n            }\n        }\n    }\n})\n```\n\n计算属性不储存在`vm._data`中，而是作为源属性的计算结果直接存储在`vm`对象中。\n\n\n\n#### 1.4.2 计算属性特性\n\n其中`get`函数仅在所依赖的数据发生变化时与初次读取调用，并进行结果的缓存，**多次解析时使用缓存结果**。\n\n计算属性底层使用了`Object.defineproperty`方法提供的`getter`与`setter`，内部有缓存机制，效率更高。\n\n若需要计算属性的结果被修改，则需要使用`set`函数响应，且其中要引起源数据的更改才能应用。\n\n另外若只需要读取计算属性，有下列简略形式实现`getter`：\n\n```js\ncomputed:{\n    fullName() {\n        return this.firstName + this.lastName;\n    }\n}\n```\n\n\n\n### 1.5 监视属性\n\n#### 1.5.1 监视案例\n\n```js\nconst vm = new Vue({\n    el:'#root',\n    data:{\n        isHot: true,\n    },\n    methods: {\n        changeWeather() {\n            this.isHot = !this.isHot;\n        }\n    }\n    // 配置监视\n    watch:{\n        isHot: {\n    \t\t// 初始化时即调用\n    \t    immediate: true,\n    \t\t// 监视到isHot变化时即调用\n            handler(newValue, oldValue) {\n                \n            },\n        }\n    }\n})\n\n// 外部配置监视\nvm.$watch('isHot', {\n    \t// 初始化时即调用\n    \timmediate: true,\n    \t// 监视到isHot变化时即调用\n        handler(newValue, oldValue) {},\n})\n```\n\n监视的属性必须存在，若写错时不会报错，仅会使参数变为`undifined`。\n\n#### 1.5.2 深度监视\n\n监视数据对象内部的数据源，需要将\n\n```js\n// 配置监视\nwatch:{\n    'whether.isHot': {\n        // 监视多级对象内部所有成员的变化\n        deep:true,\n    \t// 监视到对象成员isHot变化时即调用\n        handler(newValue, oldValue) {\n                \n        },\n    },\n}\n```\n\n#### 1.5.3 监视的简写\n\n当配置的监视项内仅有处理回调而没有其他配置项时，可以使用如下简写：\n\n```js\nwatch: {\n    isHot() {\n        // ...\n    }\n}\n```\n\n#### 1.5.4 `watch`与`computed`的对比\n\n两者在大部分情况下没有明显区别。\n\n但是计算属性中无法开启异步数据更新，需要使用`watch`来实现。\n\n另外，所有不被`Vue`所管理的函数（定时器的回调函数，`AJAX`回调函数等）需要写为箭头函数，这样的`this`指向的才是`vm`或者组件实例对象。**箭头函数没有自己的this值**，箭头函数中所使用的this来自于函数作用域链。\n\n\n\n### 1.6 `class`与`style`绑定\n\n#### 1.6.1 `class`绑定\n\n```html\n<div id=\"root\">\n    <!-- 绑定class样式 数组写法 -->\n    <!-- Vue 会自动将两个class属性合并 且支持字符串指定 数组解析 对象指定等等-->\n    <div class=\"basic\" v-bind:class=\"mood\" @click=\"changeMood\">\n    \t{{name}}\n\t</div>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data:{\n        name:'Wayne',\n        mood: [],\n    },\n    methods: {\n        changeMood() {\n            // 字符串式\n            this.mood = 'happy';\n            \n            // 数组式\n            this.mood = ['happy','normal'];\n            \n            // 对象式\n            this.mood = {\n                happy: true,\n                normal: false,\n            };\n        }\n    }\n})\n```\n\n#### 1.6.2 `style`绑定\n\n```html\n<div id=\"root\">\n    <!-- 绑定style样式 -->\n    <div class=\"basic\" v-bind:style=\"styleObj\" @click=\"changeMood\">\n    \t{{name}}\n\t</div>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data:{\n        name:'Wayne',\n        mood: [],\n        styleObj: {\n            fontSize: '40px',\n            color: 'red',\n        }\n    },\n})\n```\n\n\n\n### 1.7 渲染\n\n#### 1.7.1 条件渲染\n\n**控制标签的可见性**\n\n```html\n<h2 v-show=\"true\">\n    Welcome to Outspace!\n</h2>\n```\n\n该方法只控制标签的`visibility`。\n\n\n\n**控制渲染是否进行**\n\n```html\n<h2 v-if=\"false\">\n    Welcome to Outspace!\n</h2>\n<h2 v-else>\n    Welcome to Tech World!\n</h2>\n```\n\n另有`v-else-if`，此外该结构的正确执行必须使用相互关联的`v-if`，不能被其他标签阻隔。\n\n可以使用`template`标签保证不用引入额外的`div`嵌套来使`v-if`正常执行。\n\n```html\n<template v-if='n===1'>\n\t<h2>\n\t    Welcome to Outspace!\n\t</h2>\n</template>\n```\n\n使用`v-if`时，元素可能无法被获取到，而`v-show`一定能获取到。\n\n\n\n#### 1.7.2 列表渲染\n\n##### `v-for`案例\n\n```html\n<div id=\"root\">\n    <ul>\n        <!-- index 为遍历的数组索引 key用于唯一区分DOM用以动态更新 -->\n        <li v-for=\"(p, index) in persons\" :key=\"index\">\n        {{p.id}} - {{p.name}}\n        </li>\n        <!-- 该方法也可以遍历对象 以键值对形式-->\n        <li v-for=\"(value, keyin) of car\" :key='keyin'>\n            {{key}} : {{value}}\n        </li>\n    </ul>\n</div>\n```\n\n```js\nnew Vue({\n    el: '#root',\n    data: {\n        persons: [\n            {id:'001', name:'张三'},\n            {id:'002', name:'李四'},\n            {id:'003', name:'王五'},\n        ],\n        car: {\n            name: 'BMW 750',\n            color: 'white',\n        }\n    }\n});\n```\n\n该方法也可以遍历字符串，也可以遍历指定次数。\n\n\n\n##### `:key`的原理\n\n用于为节点更新时的`Diff`算法作为唯一标识符，对比同`key`的标签内容，若同则不进行DOM更新，直接复用，若不同则创建新的虚拟DOM以及真是DOM。\n\n![image-20210912141054846](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912141054846.png)\n\n![image-20210912141414383](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912141414383.png)\n\n\n\n##### 列表过滤\n\n```html\n<div id=\"root\">\n    <ul>\n        <input type=\"text\" v-model=\"keyword\">\n        <li v-for=\"p in persons\" :key=\"p.id\">\n        {{p.id}} - {{p.name}}\n        </li>\n    </ul>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data:{\n        persons:[\n        \t{id:'001', name:'马冬梅',age:19},\n        \t{id:'002', name:'周冬雨',age:20},\n        \t{id:'003', name:'周杰伦',age:21},\n        \t{id:'004', name:'温兆伦',age:22},\n    \t],\n        filterPersons: [],\n        keyword,\n    }\n    // 数据监视实现\n    watch: {\n    \tkeyword:{\n    \t\timmediate:true,\n    \t\thandler(value) {\n    \t\t\tthis.filterPersons = this.persons.filter((p) => {\n                    return p.name.indexOf(value) !== -1;\n                })\n\t\t\t}\n\t\t}\n\t},\n    \n})\n```\n\n也可以使用计算属性的方法，并进行排序：\n\n```js\ncomputed: {\n    filterPersons() {\n        const arr = this.persons.filter((p)=>{\n            return p.name.indexOf(this.keyword) !== -1\n        });\n        if(this.sortType) {\n            arr.sort((p1, p2)=> {\n                return this.sortType === 1 ? p2.age - p1.age : p1.age - p2.age;\n            })\n        }\n        return arr;\n    }\n}\n```\n\n\n\n#### 1.7.3 Vue检测数据的原理\n\n##### 监测案例\n\n```js\nlet data = {\n    name: 'Wayne',\n    address: 'Shanghai',\n}\n\nconst obs = new Observer(data);\nlet vm = data = obs;\n\nfunction Observer(obj) {\n    const keys = Object.keys(obj);\n    keys.forEach((k)=> {\n        Object.defineProperty(this, k, {\n            get() {\n                return obj[k];\n            },\n            set(val) {\n                obj[k] = val;\n                // other additinal actions ...\n            }\n        })\n    })\n}\n```\n\n该方法通过`Observer`设置了一个对于`data`的代理，且通过连续的赋值使得原`data`指针被指向了`Observer`实例，而又因为`Observer`中又保持着对原`data`的引用，所以`data`没有被销毁回收且只能通过`Observer`被访问到，类似于闭包的原理。其中对于每个非对象，非数组的属性都具有一对`getter`和`setter`，`setter`中又添加了功能逻辑用于监视属性值的改动，一旦改动就重新构建DOM，应用了一种修饰器的思想。\n\n另外，`Vue`中还设置了`vm._data`的数据代理，从而可以直接通过`vm.property`直接访问属性；对`Observer`做了递归处理，能够检测任意嵌套的多层数据改动。\n\n##### `Vue.set()`方法\n\n该方法可以用于后续的动态添加数据属性并设置监听。\n\n```js\nVue.set(vm.person, 'sex', '男');\n```\n\n同理又有方法\n\n```js\nvm.$set(vm.person, 'sex', '男');\n```\n\n但是这**两种方法不允许在`vm`对象与`vm._data`上直接添加属性。**\n\n##### 数组内的监视原理\n\nVue为数组统一设置了一个`Observer`并仅针对调用数组修改方法的操作予以响应，直接索引无法被检测到。\n\n而Vue托管的数组所调用的方法使用了装饰器，用于更新DOM。\n\n> `push()`\n> `pop()`\n> `shift()`\n> `unshift()`\n> `splice()`\n> `sort()`\n> `reverse()`\n\n##### 数据监视总结\n\n1. `Vue`会监视`data`中所有的数据；\n2. 通过`Observer`数据代理与闭包实现数据监视；\n3. 对象追加的属性默认不做响应式处理，若需要则使用`Vue.set()`或`vm.$set()`；\n4. 通过对数组常用方法的修饰器调用原生方法并添加重新解析模板的函数实现数组中数据的监测；\n\n\n\n### 1.8  常用方法技巧\n\n#### 1.8.1 收集表单数据\n\n![image-20210912155026711](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912155026711.png)\n\n\n\n#### 1.8.2 过滤器\n\n配置过滤器可以处理属性数据，仅限`Vue2`。\n\n```html\n<h3>\n    {{time | timeFormater('YYYY-MM-DD HH:mm:ss')}}\n</h3>\n```\n\n```js\nfilter: {\n    timeFormater(value, str) {\n        return dayjs(value).format(str);\n    }\n},\n```\n\n上述均为局部过滤器，过滤器遵循链式原则。\n\n\n\n### 1.9 其他`Vue`指令\n\n#### 1.9.1 `v-text`\n\n向其所在的标签插入文本（整体替换`innerHTML`）；\n\n```html\n<div v-text=\"name\"></div>\n```\n\n\n\n#### 1.9.2 `v-html`\n\n与`v-text`相似，但能够解析数据文本中的`html`元素。\n\n> 注意：该标签可能导致安全性问题，直接解析Javascript代码可能会被XSS攻击。一定要在可信的内容上使用。\n\n\n\n#### 1.9.3 `v-vloak`\n\n该标签仅用于标记模板内容以用于在低网速情况下，配合CSS避免用户看到未经渲染的源码页面。\n\n```html\n<head>\n    <style>\n        [v-cloak] {\n            display:none;\n        }\n    </style>\n</head>\n<body>\n    <div id='root'>\n        <h2 v-cloak>\n            {{name}}\n        </h2>\n    </div>\n    <script type=\"text/javascript\" src=\"yourCDN\"></script>\n</body>\n```\n\n\n\n#### 1.9.4 `v-once`\n\n该指令使得所在节点经过初次动态渲染后，就被视为静态内容从而不再渲染。以后数据的改变不会影响`v-once`所在结构的更新，可用于优化性能。\n\n\n\n#### 1.9.5 `v-pre`\n\n该指令使得跳过指定阶段的渲染编译过程，可以优化性能或防止不同框架的冲突。\n\n\n\n#### 1.9.6 自定义指令\n\n```html\n<div id=\"root\">\n    <h2>\n        <span v-times=\"n\"></span>\n    </h2>\n</div>\n```\n\n```js\nnew Vue({\n    el:'#root',\n    data: {\n        n: 1,\n    },\n    // 自定义指令 函数式\n    // 对象形式相比于函数形式 可更精细地控制\n    directives: {\n        // 第一参数为真实DOM元素 第二元素为指定的Vue数据\n        // 该函数在指令与元素成功绑定以及指令所在的模板被重新解析时被调用\n        times(element, binding) {\n            element.innerText = binding.value * 10;\n        }\n    }\n})\n\n// 对象式\n'fbind': {\n    // 指令与元素成功绑定时\n    bind(element, binding) {},\n    // 指令所在元素被插入页面时\n    inserted(element, binding) {},\n    // 指令所在的模板被重新解析时\n    update(element, binding) {},\n}\n```\n\n注意：上述自定义指令均为局部指令且处理函数中的`this`都指向`Window`。\n\n可以通过`Vue.directive()`添加全局自定义指令。\n\n\n\n### 1.10 Vue的生命周期\n\n#### 1.10.1 生命周期简介\n\n生命周期又名生命周期回调函数，生命周期钩子。\n\nVue在操作执行的关键时刻调用一些特殊名称的函数，这些函数的名称不可更改，但其内容可以自定义。其中的`this`指针指向`vm`或者组件实例对象。\n\n```js\n// 该生命周期函数在Vue完成模板解析并把初始的真实DOM元素放入页面后（挂载完毕）调用\nmounted() {\n    setIntervel(()=> {\n        this.opacity -= 0.01;\n        if(this.opacity <= 0) \n            this.opacity = 1;\n    })\n}\n```\n\n\n\n#### 1.10.2 生命周期流程\n\n<img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"实例的生命周期\" style=\"zoom:120%;\" />\n\n上图中所有的红色边框的函数即为生命周期函数。\n\n1. `beforeCreate` 初始化前：进行了生命周期、事件的配置但是数据代理还未开始；\n2. `created` 初始化：数据监测，数据代理；\n3. 上述两步完成后，Vue开始解析模板，生成虚拟DOM，但是还不能显示内容；\n4. `beforeMount` 挂载前：页面呈现未经编译的DOM，此时所有DOM操作最终均无效；\n5. 此时Vue 将虚拟DOM转换为真实DOM插入页面；\n6. `mounted` 挂载：此时呈现Vue编译DOM，到此初始化结束。一般可在此自定义：开启定时器，发送网络请求，订阅小心，绑定自定义事件等初始化操作。\n7. 初始化完成后，Vue仅在数据发生改变时进行DOM更新\n8. `beforeUpdate` 更新前：此时数据是最新的，但是页面旧。\n9. 虚拟DOM在此时进行重新渲染，应用Diff与旧虚拟DOM比较，然后完成页面更新。\n10. `updated` 更新完成：数据是新的，页面也更新，保持同步。\n11. 当`vm.$destroy` (Vue2) / `app.unmount` （Vue3）被调用时，Vue开始销毁流程。清理与其他实例的连接，解绑其全部指令及其自定义事件监听器（原生不会处理）。\n12. `beforeUnmount` 销毁前：此时vm的所有内容都可用，一般可以在此阶段进行：关闭定时器，取消订阅消息，解绑自定义事件等操作，但是不会再进行页面的更新。\n13. `unmounted`  完成销毁\n\n<br>\n\n\n\n## Chpater 2 组件\n\n### 2.1 组件简介\n\n原生的模式依赖关系混乱，不好维护且代码复用率不高。\n\n组件即实现提供特定功能的代码集合，划分合理能够做到提高代码的复用率，简化项目编码。\n\n组件分为非单位件组件与单文件组件（`.vue`文件）。\n\n\n\n### 2.2 非单文件组件\n\n#### 2.2.1 非单文件组件注册示例\n\n```html\n<body>\n    <div id='root'>\n        <!-- 编写组件标签 Vue自动替换 -->\n        <school></school>\n        <school></school>\n        <!-- 两组件相互独立 -->\n    </div>\n</body>\n```\n\n\n\n```js\n// 通过Vue API 实现组件的创建\nconst school = Vue.extend({\n\t// Vue 开发者工具使用name进行展示\n    name: 'School',\n    // 使用 tempate 组件化 html 代码结构\n    template: '<div> </div>',\n    // 组件的数据设置需要使用函数返回 可以防止多个组件实例访问到同一个 data 对象造成不可预料的更改\n    data: function() {\n        return {\n            website: 'Outspace',\n            date: '2021/9/12',\n        }\n    }\n})\n\nnew Vue({\n    el:'#root',\n    // 局部注册组件\n    components: {\n        school:school,\n    }\n})\n```\n\n\n\n#### 2.2.2 使用注意\n\n全局注册组件\n\n```js\nVue.component('school', school);\n```\n\n注意：\n\n1. 组件名称如果使用驼峰式，则该组件只能在脚手架环境中正常工作。多单词写法建议使用全小写字符串形式并用`-`连接。\n2. 自闭合标签在非脚手架环境下会导致后续标签无法渲染。\n\n\n\n#### 2.2.3 组件嵌套\n\n组件的注册嵌套只需要在父组件中写入`component`注册即可，开发者工具会将层次结构显示出来。\n\n通常在`vm`实例下仅定义`app`组件，其他子组件均注册在`app`下。\n\n\n\n#### 2.2.4 `VueComponent`\n\n组件本质是一个`VueComponent`函数，由`Vue.extend`生成。\n\n编写组件标签后，Vue会创建对应的组件实例对象，且每次调用返回全新组件实例。\n\n组件配置中的`data` `methods` `watch` `computed` 中函数的 `this` 均为 `VueComponent` 实例对象。\n\n\n\n#### 2.2.5 组件的原型关系\n\n`VueComponent`对象与`Vue`对象非常相似，但是组件是一种可复用的`Vue`实例，其在创建时无法指定作用容器，也不创建实例，知识保存了一个构造函数的指针。\n\n实例的隐式原型对象指向自身创造者的原型对象。\n\n**但是`Vue`使得`VueComponent`的原型对象指向`Vue`原型对象实现原型继承链。**\n\n![image-20210912200021004](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912200021004.png)\n\n这样使得组件实例对象可以访问到`Vue`原型上的属性、方法。\n\n\n\n### 2.3 单文件组件\n\n> 通过 `webpack`或者`vue-cli`将`vue`转译成`js`文件。\n\n```vue\n<template>\n\t<!-- template 标签内为组件的 html -->\n\t<div class='school'>\n        <h2>\n            {{schoolName}}\n    \t</h2>\n        <h2>\n        \t{{address}}    \n    \t</h2>\n        <button @click='showName'></button>\n    </div>\n</template>\n\n<script>\n\t// script 内为JS交互代码\n    export default {\n    \tname: 'School',\n        data: function() {\n            return {\n                schoolName: 'Outspace',\n                address: 'Shanghai',\n            }\n        },\n        methods:{\n            showName() {\n                alert(this.schoolName);\n            }\n        }\n    }\n</script>\n\n<style>\n\t/* style 内为组件的样式表 */\n    [school] {\n        backgroud-color: orange;\n    }\n</style>\n```\n\n在`App.js`内引入所有的二级组件。\n\n```js\nimport School from './School'\nimport Student from './Student'\n\nexport default {\n    name: 'App',\n    components: {\n        School,\n        Student,\n    }\n}\n```\n\n在`main.js`内创建`Vue`实例\n\n```js\n// 注意该语句只能在脚手架内使用\nimport App from './App.vue'\n\nnew Vue({\n    el:'#root',\n    template: '<App></App>',\n    components: {\n        App,\n    },\n    data() {\n    \t\n\t}\n})\n```\n\n搭建`HTML`结构\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>单文件组件</title>\n    </head>\n    <body>\n        <div id='root'></div>\n        <script type=\"text/javascript\" src=\"./vue.js\"></script>\n        <script type=\"text/javascript\" src=\"main.js\"></script>\n    </body>\n</html>\n```\n\n<br>\n\n\n\n## Chapter 3 使用`Vue-Cli`\n\n### 3.1 初始化脚手架\n\n安装\n\n```shell\nnpm install -g @vue/cli\n```\n\n创建脚手架\n\n```shell\nvue create vuetest\n```\n\n开启服务器\n\n```shell\ncd ./vuetest\nnpm run serve\n```\n\n开启脚手架后的目录结构\n\n![image-20210913100522762](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210913100522762.png)\n\n修改默认配置\n\n添加`vue.config.js`修改CLI的默认配置项。https://cli.vuejs.org/zh/config/#pages\n\n另外使用\n\n```shell\nvue inspect > output.js\n```\n\n可以命令脚手架输出其默认配置。\n\n\n\n### 3.2 `render`函数\n\n在脚手架创建的`main.js`函数中：\n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n```\n\n存在`render`函数，用以将App组件放入容器中。\n\n而在运行时`Vue`库中，使用`render`函数将原来`template`中的模板创建出来\n\n```js\nrender(createElement) {\n    return createElement(App);\n}\n```\n\n一般用于开发环境的`Vue`包含完整的核心功能与模板解析器，而生产部署环境没有模板解析器导致无法使用`template`配置。\n\n\n\n### 3.3  `ref`属性\n\n`ref`为`Vue`设置的对于原始DOM中元素的标识符（可以替代`id`属性），可以通过`VueComponent`中的`$ref`方法取得。\n\n```vue\n<template>\n\t<h1 v-text=\"msg\" ref=\"title\"></h1>\n\t<button ref=\"btn\" @click=\"showDom\">\n        点我输出 Title\n    </button>\n</template>\n<script>\n\texport default {\n        name: 'App',\n        data() {\n            return {\n                msg:'Welcome!',\n            };\n        },\n        methods: {\n            showDom() {\n                console.log(this.$refs.title);\n            }\n        }\n    }\n</script>\n```\n\n**其中`this.$refs`保存所有有`ref`属性的对象，对于普通标签储存DOM元素，对于子组件标签储存其实例对象。该方法可用于组件间通信。**\n\n\n\n### 3.4 `props`配置\n\n可以使用子组件的`props`属性声明从外部接收的数据，在父组件内可以直接在组件标签上声明传入的数据。\n\n```html\n<School name=\"Lisa\" :age=\"9*2\"></School>\n```\n\n```vue\n<script>\n\texport default {\n        name: 'School',\n        data() {\n            return {\n                msg:'Welcome!',\n            };\n        },\n        // 简单接收\n        props: ['name', 'age'],\n        // 限制接收类型、必须项与默认值\n        props: {\n            'name' : {\n                type: String,\n                required: true,\n            },\n            'age' : {\n            \ttype: Number,\n                default: 99,\n        \t},\n            'sex' : String,\n        }\n    }\n</script>\n```\n\n一般`props`是只读的，若需要进行修改，则需要在子组件的`data`内设置一个副本。**但是`Vue`只检测`props`的地址变化，是一个浅层次监视，所以建议对于`props`传入的对象属性不要进行修改**。\n\n在组件生成时`props`的接受要先于`data`的创建。\n\n\n\n### 3.5 `mixin`混入\n\n多组件共享一个部分\n\n```vue\n<script>\n    import {mix} from '../mixin.js'\n\texport default {\n        name: 'School',\n        data() {\n            return {\n                msg:'Welcome!',\n            };\n        },\n\t\tmixins: [mix],\n    }\n</script>\n```\n\n可以单独定义一个`js`文件，然后在`Vue`组件内进行`mixin`引入从而实现`js`代码的复用。\n\n```js\nexport const mix = {\n    methods: {\n        showMsg() {\n            alert(this.msg);\n        }\n    }\n}\n```\n\n组件与外部混入的数据若发生冲突（生命周期函数接受双方）以组件内的数据为准。\n\n通过`Vue.mixin`全局引入这个混合。\n\n\n\n### 3.6 插件\n\n```js\nconst plugins = {\n    // 对于引入的 插件 Vue会自动调用 install\n    // 还可以传入其他参数\n    install(Vue, ...) {\n        // 此处可以统一地进行对Vue的配置与\n        // 原型方法的增加等等强大功能\n    }\n}\n```\n\n然后使用\n\n```js\nVue.use(plugins);\n```\n\n\n\n\n\n### 3.7 `scoped`样式\n\n默认`<style>`标签内的样式将会混用。造成CSS混乱。\n\n所以直接添加在标签内直接添加`scoped`即可使得该样式仅用于该组件。\n\n\n\n### 3.8 组件化编码流程\n\n1. 实现静态组件：\n   抽取组件，使用组件实现静态页面效果；\n2. 展示动态数据：数据存储位置，名称；数据保存在哪个组件，确定UUID；\n3. 交互：绑定事件监听，组件间通讯\n\n\n\n1. 组件化编码：\n   - 拆分静态组件：组件按功能点拆分，命名不能与`html`元素冲突；\n   - 实现动态组件：考虑数据的存放位置\n     - 单组件使用\n     - 多组件使用则置于其父组件上\n   - 实现 交互：绑定事件监听，实现组件间通讯。\n2. `props`适用于：\n   - 父组件向子组件通讯；\n   - 子组件通过获取到的父组件函数向父组件通讯。\n3. `v-model`使用：\n   - 不建议对`props`传入的参数使用`v-model`进行绑定修改；\n\n\n\n### 3.9 浏览器本地存储\n\n`localStorage`与 `sessionStorage`的应用。可以用键值对在规定的时间内进行持久化操作。\n\n也包括`IndexedDB`以及`WebSQL`。\n\n均属于原生JS操作，但在本地Web应用中可以使用暂存。\n\n\n\n\n\n### 3.10 组件的自定义事件\n\n#### 3.10.1 绑定\n\n```vue\n<template>\n\t<!-- 为组件绑定自定义事件 -->\n\t<Student v-on:myevent=\"demo\"></Student>\n</template>\n\n<script>\n\timport Student from './components/Student';\n    export default {\n        name:'App',\n        components: {Student},\n        data() {\n            return {\n                msg:'Hello!',\n            };\n        },\n        methods: {\n            // 收到传递事件的参数\n            demo(name) {\n                console.log('demo was invoked!' + 'And student\\'s name is '+ name);\n            }\n        },\n    }\n</script>\n```\n\n```vue\n<template>\n\t<!-- 绑定内部事件 -->\n\t<button @click=\"sendStudentName\">\n        Send\n    </button>\n</template>\n\n<script>\n\texport default {\n        name:'Student',\n        data() {\n            return {\n                name: 'Lisa',\n            };\n        },\n        methods: {\n            sendStudentName() {\n                // 释放事件触发信号\n                // 还可以传递额外的参数\n                this.$emit('myevent', this.name);\n            }\n        },\n    }\n</script>\n```\n\n也可以直接在组件实例对象上添加事件：\n\n```html\n<Student ref=\"student\"></Student>\n```\n\n```js\nmounted() {\n    this.$refs.student.$on('myevent', this.getStudentName);\n}\n```\n\n自定义事件也可以使用所有的事件修饰符。\n\n\n\n#### 3.10.2 解绑与总结\n\n```js\nmethods: {\n    unbind() {\n        // 使用组件实例$off解绑指定自定义事件\n        this.$off(['myevent']);\n    }\n}\n```\n\n1. 组件的自定义事件适用于子组件向父组件传递信息；\n2. 组件上可以绑定原生DOM事件，使用`native`事件修饰符；\n3. 注意绑定自定义事件时，注意回调中`this`的指向。\n\n\n\n### 3.11 全局事件总线\n\n全局事件总线可以进行任意组件间的通信，是一种`Vue`的编程模式。\n\n该总线必须对所有组件可见，可以调用对应组件的`$on` `$off` `$emit`等API。\n\n```js\nnew Vue({\n    el:'#app',\n    render: h => h(App),\n    beforeCreate() {\n        // 将自身的指针挂载到 Vue 的原型对象上\n        // 这样所有的组件均可见且可调用API\n        Vue.prototype.$bus = this;\n    }\n})\n```\n\n只需要在执行回调的组件内全局绑定自定义事件，然后在触发组件内发出`emit`信号，那么借助信号与回调函数的机制就可以实现跨组件的数据传递。\n\n但是这种方法可能会污染`Vue`原型对象的命名空间。\n\n```js\nmounted() {\n    this.$bus.$on('myevent', (data)=>{\n    \tconsole.log(JSON.stringify(data));\n\t})\n}\n```\n\n另外需要在`beforeDestroy()`内按时解绑自定义事件以免资源浪费。\n\n\n\n### 3.12 消息订阅与发布\n\n使用`pubsub-js`等第三方库。\n\nPubSub 其实很简单，可以利用发布订阅原理自行实现。\n\n- 首先创建 PubSub 类，增加 handlers 变量用于保存事件列表；\n- 添加事件时，将监听器加到数组中；\n- 删除事件时，移除监听器；\n- 触发事件，循环遍历并触发所有的事件。\n\n从实现原理看上，Android中的广播也使用了观察者模式，基于消息的发布/订阅事件模型。因此，从实现的角度来看，Android中的广播将广播的发送者和接受者极大程度上解耦，使得系统能够方便集成，更易扩展。\n\n\n\n### 3.13 `nextTick`\n\n组件内如遇到数据更新后需要对DOM元素进行操作，则可使用`nextTick`在DOM更新完毕后再进行指定的回调。\n\n```js\nthis.$nextTick(function() {\n    this.$refs.inputTitle.focus();\n})\n```\n\n\n\n### 3.14 过渡与动画\n\n#### 3.14.1 动画\n\n使用`<transition>`标签包含所需要动画的标签，然后使用CSS3创建动画，但选择器名称有规定：\n\n```html\n<!-- 指定name以匹配对应选择器 appear 可以使得载入时就执行动画 -->\n<transition name='hello' appear>\n\t<h1>\n        HelloWorld!\n    </h1>\n</transition>\n```\n\n```css\n.hello-enter-active{\n    animation: helloworld 0.5s linear;\n}\n\n.hello-leave-active{\n    animation: helloworld 0.5s linear;\n}\n\n@keyframes helloworld {\n    from{\n        transform: translateX(-100%);\n    }\n    to{\n        transform: translateX(0px);\n    }\n}\n```\n\nVue会自行控制动画播放的时机。\n\n\n\n#### 3.14.2 过渡\n\n![image-20210914104838287](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210914104838287.png)\n\n可以使用`transition-group`标签使得过渡被应用到多个内容中，为各个标签添加唯一的`key`值。\n\n也可以使用第三方库。\n\n下面是`Vue`中动画动作的时机标识。\n\n![Transition Diagram](https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/transition.png)\n\n","slug":"vue-basic","published":1,"updated":"2021-10-26T09:46:07.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7wmgf70009yct5f52s19sc","content":"<h1>Vue 学习 (基础部分)</h1>\n<br>\n<h2 id=\"Chapter-0-简介\">Chapter 0 简介</h2>\n<p>Vue是一套用于构建用户界面的渐进式 JavaScript 框架。</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>采用组件化模式，提高代码复用率，让代码更好维护。</li>\n<li>声明式编码，无需直接操作DOM，提高开发效率。</li>\n<li>使用虚拟DOM，优秀的Diff算法，复用DOM节点。</li>\n<li>使用了MVVM模式，编码简洁，本身只关注UI。</li>\n</ol>\n<p><strong>前置学习</strong></p>\n<ol>\n<li>Ajax</li>\n<li>Prototype</li>\n<li>Promise</li>\n<li>Axios</li>\n<li>ES6 - ES11</li>\n<li>包管理器</li>\n</ol>\n<p><strong>搭建开发环境</strong></p>\n<ol>\n<li>方法1：使用<code>&lt;script&gt;</code>标签引入。</li>\n<li>方法2：使用<code>NPM</code>与<code>Vue-Cli</code>搭建。</li>\n</ol>\n<br>\n<h2 id=\"Chpater-1-Vue基本\">Chpater 1 Vue基本</h2>\n<h3 id=\"1-1-初识案例\">1.1 初识案例</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue Test Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 目标容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Vue 模板 可以使用任何JS表达式 --&gt;</span></span><br><span class=\"line\">            Hello &#123;&#123;banner&#125;&#125;!</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 关闭开发环境提示</span></span></span><br><span class=\"line\"><span class=\"javascript\">        Vue.config.productionTip = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 创建实例 传入配置对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 指定当前 Vue 实例的服务对象容器</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">el</span>: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 指定数据 供 el 中所指定的元素使用</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// Vue 自动查找到使用模板字符的位置并进行动态双向绑定</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 一般通过组件形式指定</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"attr\">banner</span>: <span class=\"string\">&#x27;My Vue&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<ol>\n<li><code>Vue</code>的工作方式是创建一个实例，同时传入一个配置对象指定容器与数据等内容；</li>\n<li>原<code>html</code>中的内容使用了<code>Vue</code>中的模板，<code>Vue</code>使用一种解析机制，将原DOM使用虚拟化DOM替换，将模板字符串更改为JS中的指定数据。</li>\n<li>其中<code>Vue</code>对象与<code>html</code>容器的绑定是一对一的关系，任何多对一，多对多的绑定均不会起作用。</li>\n</ol>\n<h3 id=\"1-2-模板语法与数据绑定\">1.2 模板语法与数据绑定</h3>\n<h4 id=\"1-2-1-模板的理解\">1.2.1 模板的理解</h4>\n<p>Vue 中有两大类的模板语法：</p>\n<ol>\n<li>\n<p>插值语法 <code>&#123;&#123;&#125;&#125;</code>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    Hello &#123;&#123;banner&#125;&#125;!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>指令 <code>v-bind</code> <code>v-for</code>等等；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>简写链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>v-bind链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以通过该语法解析标签内部的绑定内容。</p>\n</li>\n</ol>\n<h4 id=\"1-2-2-数据绑定\">1.2.2 数据绑定</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;input-form&quot;</span>&gt;</span></span><br><span class=\"line\">        单向绑定<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        双向绑定<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">         <span class=\"attr\">el</span>: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#input-form&#x27;</span>),</span><br><span class=\"line\">         <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">         <span class=\"attr\">name</span>: <span class=\"string\">&quot;Input something...&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样就可实现单向与双向的数据绑定。</p>\n<p><strong>注意：其中<code>v-model</code>标签只能应用在表单类的元素上，固定应用于<code>value</code>属性上。</strong></p>\n<h4 id=\"1-2-3-el-data的指定与原型链分析\">1.2.3 <code>el</code> <code>data</code>的指定与原型链分析</h4>\n<p>先前创建的<code>Vue</code>对象使用了原型链的方法</p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210911170627577.png\" alt=\"image-20210911170627577\"></p>\n<p>创建的对象中所有以<code>$</code>开头的方法均为开放使用的API， 其余的内部属性不要使用。</p>\n<p>而<code>Vue</code>对象通过原型链的方法，将<code>el</code>容器绑定在<code>prototype</code>中的<code>$mount</code>方法中。</p>\n<p>所以可以在<code>Vue</code>组件创建之后再使用<code>$mount</code>来挂载容器。<br>\n另外<code>data</code>属性需要指定为对象，所以在后续的组件化过程中需要使用构建函数返回对象进行数据的绑定加载。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Evan You&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">address</span>: <span class=\"string\">&#x27;Shanghai&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">v.$mount(<span class=\"string\">&#x27;#input-form&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：普通箭头函数中的<code>this</code>指向全局的<code>Window</code>对象，建议在<code>data</code>指定时使用传统函数定义方法。</p>\n<h4 id=\"1-2-4-MVVM-模型\">1.2.4 MVVM 模型</h4>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210911171728786.png\" alt=\"image-20210911171728786\"></p>\n<blockquote>\n<ul>\n<li>M：模型（Model）</li>\n<li>V：视图（View）</li>\n<li>VM：视图模型（ViewModel）</li>\n</ul>\n</blockquote>\n<p>其中Vue的VM及其原型对象上的数据都可以被直接访问到。</p>\n<h4 id=\"1-2-5-数据代理\">1.2.5 数据代理</h4>\n<p>JS中为一个对象动态添加属性的方法为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> propertyValue = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yourObject = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(yourObject, objectProperty, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: propertyValue,</span><br><span class=\"line\">    <span class=\"comment\">// 属性是否参与枚举与迭代</span></span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 属性是否可更改</span></span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 属性是否可被删除</span></span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 每次访问该属性时 getter 函数就会被调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 从而实现值的动态更新</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> propertyValue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        propertyValue = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过该方法添加的属性是可以进行高级的属性控制。</p>\n<p>Vue通过上述方法进行对象的数据代理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// obj2 代理了 obj1 的数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj2, <span class=\"string\">&#x27;x&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.x;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        obj.x = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Vue对象是通过定义数据代理的方式，将<code>getter</code>和<code>setter</code>指向传入的数据对象从而进行处理，可以认为是进行了一层封装，从而使得外部调用时直接使用属性名而非<code>_data.propertyValue</code>去调用。</p>\n<h3 id=\"1-3-事件处理\">1.3 事件处理</h3>\n<h4 id=\"1-3-1-事件案例\">1.3.1 事件案例</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event-btn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;showInfo1&quot;</span>&gt;</span>提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showInfo2(number, $event)&quot;</span>&gt;</span>提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     <span class=\"attr\">el</span>: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#event-btn&#x27;</span>),</span><br><span class=\"line\">     <span class=\"attr\">data</span>: &#123;&#125;,</span><br><span class=\"line\">     <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">         <span class=\"comment\">//该函数中的 this 指代 Vue 对象 后续可能指代组件实例</span></span><br><span class=\"line\">         <span class=\"comment\">//event参数指代鼠标事件</span></span><br><span class=\"line\">         <span class=\"comment\">// html 中调用时参数默认为鼠标事件对象</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">showInfo1</span>(<span class=\"params\">event</span>)</span> &#123;</span><br><span class=\"line\">               alert(<span class=\"string\">&#x27;Vue 对象中的 Methods 绑定&#x27;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">         <span class=\"comment\">// 该函数接受html规定的参数</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"title\">showInfo2</span>(<span class=\"params\">number, event</span>)</span> &#123;</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log(number);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>理论上函数也可以放入参数的<code>data</code>中，但是这样会导致没有意义的数据代理与劫持。</p>\n<h4 id=\"1-3-2-事件修饰符\">1.3.2 事件修饰符</h4>\n<ol>\n<li><code>prevent</code> 阻止默认事件</li>\n<li><code>stop</code> 阻止事件冒泡</li>\n<li><code>once</code> 事件只触发一次</li>\n<li><code>capture</code>  使用事件的捕获模式，在捕获阶段就处理事件</li>\n<li><code>self</code> 只有<code>event.target</code>是当前操作的元素时才触发事件</li>\n<li><code>passive</code> 事件的默认行为立即执行，无需等待事件回调执行完毕</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 组织a标签的默认事件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;cn.bing.com&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span>HREF<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-3-键盘事件\">1.3.3 键盘事件</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keydown</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于键盘事件 <code>Vue</code>也有一系列别名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">showInfo</span>(<span class=\"params\">event</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(event.target.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912113151927.png\" alt=\"image-20210912113151927\"></p>\n<h3 id=\"1-4-计算属性\">1.4 计算属性</h3>\n<h4 id=\"1-4-1-计算属性案例\">1.4.1 计算属性案例</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;#root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">firstName</span>:<span class=\"string\">&#x27;张&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">lastName</span>:<span class=\"string\">&#x27;三&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性</span></span><br><span class=\"line\">    <span class=\"attr\">computed</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">fullName</span>:&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 一般不使用set设置因为结果只用于展示</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.firstName = value.split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.lastName = value.split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>计算属性不储存在<code>vm._data</code>中，而是作为源属性的计算结果直接存储在<code>vm</code>对象中。</p>\n<h4 id=\"1-4-2-计算属性特性\">1.4.2 计算属性特性</h4>\n<p>其中<code>get</code>函数仅在所依赖的数据发生变化时与初次读取调用，并进行结果的缓存，<strong>多次解析时使用缓存结果</strong>。</p>\n<p>计算属性底层使用了<code>Object.defineproperty</code>方法提供的<code>getter</code>与<code>setter</code>，内部有缓存机制，效率更高。</p>\n<p>若需要计算属性的结果被修改，则需要使用<code>set</code>函数响应，且其中要引起源数据的更改才能应用。</p>\n<p>另外若只需要读取计算属性，有下列简略形式实现<code>getter</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">fullName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5-监视属性\">1.5 监视属性</h3>\n<h4 id=\"1-5-1-监视案例\">1.5.1 监视案例</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">changeWeather</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.isHot = !<span class=\"built_in\">this</span>.isHot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 配置监视</span></span><br><span class=\"line\">    <span class=\"attr\">watch</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">isHot</span>: &#123;</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 初始化时即调用</span></span><br><span class=\"line\">    \t    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 监视到isHot变化时即调用</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newValue, oldValue</span>)</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外部配置监视</span></span><br><span class=\"line\">vm.$watch(<span class=\"string\">&#x27;isHot&#x27;</span>, &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 初始化时即调用</span></span><br><span class=\"line\">    \t<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t<span class=\"comment\">// 监视到isHot变化时即调用</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newValue, oldValue</span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>监视的属性必须存在，若写错时不会报错，仅会使参数变为<code>undifined</code>。</p>\n<h4 id=\"1-5-2-深度监视\">1.5.2 深度监视</h4>\n<p>监视数据对象内部的数据源，需要将</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置监视</span></span><br><span class=\"line\"><span class=\"attr\">watch</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;whether.isHot&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 监视多级对象内部所有成员的变化</span></span><br><span class=\"line\">        <span class=\"attr\">deep</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t<span class=\"comment\">// 监视到对象成员isHot变化时即调用</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newValue, oldValue</span>)</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-5-3-监视的简写\">1.5.3 监视的简写</h4>\n<p>当配置的监视项内仅有处理回调而没有其他配置项时，可以使用如下简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">isHot</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-5-4-watch与computed的对比\">1.5.4 <code>watch</code>与<code>computed</code>的对比</h4>\n<p>两者在大部分情况下没有明显区别。</p>\n<p>但是计算属性中无法开启异步数据更新，需要使用<code>watch</code>来实现。</p>\n<p>另外，所有不被<code>Vue</code>所管理的函数（定时器的回调函数，<code>AJAX</code>回调函数等）需要写为箭头函数，这样的<code>this</code>指向的才是<code>vm</code>或者组件实例对象。<strong>箭头函数没有自己的this值</strong>，箭头函数中所使用的this来自于函数作用域链。</p>\n<h3 id=\"1-6-class与style绑定\">1.6 <code>class</code>与<code>style</code>绑定</h3>\n<h4 id=\"1-6-1-class绑定\">1.6.1 <code>class</code>绑定</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 绑定class样式 数组写法 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Vue 会自动将两个class属性合并 且支持字符串指定 数组解析 对象指定等等--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;basic&quot;</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;mood&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeMood&quot;</span>&gt;</span></span><br><span class=\"line\">    \t&#123;&#123;name&#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Wayne&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">mood</span>: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">changeMood</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 字符串式</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mood = <span class=\"string\">&#x27;happy&#x27;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 数组式</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mood = [<span class=\"string\">&#x27;happy&#x27;</span>,<span class=\"string\">&#x27;normal&#x27;</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 对象式</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mood = &#123;</span><br><span class=\"line\">                <span class=\"attr\">happy</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">normal</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-6-2-style绑定\">1.6.2 <code>style</code>绑定</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 绑定style样式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;basic&quot;</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;styleObj&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeMood&quot;</span>&gt;</span></span><br><span class=\"line\">    \t&#123;&#123;name&#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Wayne&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">mood</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">styleObj</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;40px&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-7-渲染\">1.7 渲染</h3>\n<h4 id=\"1-7-1-条件渲染\">1.7.1 条件渲染</h4>\n<p><strong>控制标签的可见性</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    Welcome to Outspace!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>该方法只控制标签的<code>visibility</code>。</p>\n<p><strong>控制渲染是否进行</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    Welcome to Outspace!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">    Welcome to Tech World!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>另有<code>v-else-if</code>，此外该结构的正确执行必须使用相互关联的<code>v-if</code>，不能被其他标签阻隔。</p>\n<p>可以使用<code>template</code>标签保证不用引入额外的<code>div</code>嵌套来使<code>v-if</code>正常执行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&#x27;n===1&#x27;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t    Welcome to Outspace!</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>v-if</code>时，元素可能无法被获取到，而<code>v-show</code>一定能获取到。</p>\n<h4 id=\"1-7-2-列表渲染\">1.7.2 列表渲染</h4>\n<h5 id=\"v-for案例\"><code>v-for</code>案例</h5>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- index 为遍历的数组索引 key用于唯一区分DOM用以动态更新 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(p, index) in persons&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;p.id&#125;&#125; - &#123;&#123;p.name&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 该方法也可以遍历对象 以键值对形式--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(value, keyin) of car&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&#x27;keyin&#x27;</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">persons</span>: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;001&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;002&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;李四&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;003&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;王五&#x27;</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">car</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;BMW 750&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>该方法也可以遍历字符串，也可以遍历指定次数。</p>\n<h5 id=\"key的原理\"><code>:key</code>的原理</h5>\n<p>用于为节点更新时的<code>Diff</code>算法作为唯一标识符，对比同<code>key</code>的标签内容，若同则不进行DOM更新，直接复用，若不同则创建新的虚拟DOM以及真是DOM。</p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912141054846.png\" alt=\"image-20210912141054846\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912141414383.png\" alt=\"image-20210912141414383\"></p>\n<h5 id=\"列表过滤\">列表过滤</h5>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;keyword&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;p in persons&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;p.id&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;p.id&#125;&#125; - &#123;&#123;p.name&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">persons</span>:[</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;001&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;马冬梅&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">19</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;002&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;周冬雨&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;003&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;周杰伦&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">21</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;004&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;温兆伦&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">    \t],</span><br><span class=\"line\">        <span class=\"attr\">filterPersons</span>: [],</span><br><span class=\"line\">        keyword,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 数据监视实现</span></span><br><span class=\"line\">    <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    \t<span class=\"attr\">keyword</span>:&#123;</span><br><span class=\"line\">    \t\t<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t\t<span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">    \t\t\t<span class=\"built_in\">this</span>.filterPersons = <span class=\"built_in\">this</span>.persons.filter(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p.name.indexOf(value) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>也可以使用计算属性的方法，并进行排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">filterPersons</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> arr = <span class=\"built_in\">this</span>.persons.filter(<span class=\"function\">(<span class=\"params\">p</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.name.indexOf(<span class=\"built_in\">this</span>.keyword) !== -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.sortType) &#123;</span><br><span class=\"line\">            arr.sort(<span class=\"function\">(<span class=\"params\">p1, p2</span>)=&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.sortType === <span class=\"number\">1</span> ? p2.age - p1.age : p1.age - p2.age;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-7-3-Vue检测数据的原理\">1.7.3 Vue检测数据的原理</h4>\n<h5 id=\"监测案例\">监测案例</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Wayne&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&#x27;Shanghai&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obs = <span class=\"keyword\">new</span> Observer(data);</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = data = obs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">    keys.forEach(<span class=\"function\">(<span class=\"params\">k</span>)=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">this</span>, k, &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj[k];</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">                obj[k] = val;</span><br><span class=\"line\">                <span class=\"comment\">// other additinal actions ...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法通过<code>Observer</code>设置了一个对于<code>data</code>的代理，且通过连续的赋值使得原<code>data</code>指针被指向了<code>Observer</code>实例，而又因为<code>Observer</code>中又保持着对原<code>data</code>的引用，所以<code>data</code>没有被销毁回收且只能通过<code>Observer</code>被访问到，类似于闭包的原理。其中对于每个非对象，非数组的属性都具有一对<code>getter</code>和<code>setter</code>，<code>setter</code>中又添加了功能逻辑用于监视属性值的改动，一旦改动就重新构建DOM，应用了一种修饰器的思想。</p>\n<p>另外，<code>Vue</code>中还设置了<code>vm._data</code>的数据代理，从而可以直接通过<code>vm.property</code>直接访问属性；对<code>Observer</code>做了递归处理，能够检测任意嵌套的多层数据改动。</p>\n<h5 id=\"Vue-set-方法\"><code>Vue.set()</code>方法</h5>\n<p>该方法可以用于后续的动态添加数据属性并设置监听。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.person, <span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>同理又有方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$set(vm.person, <span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是这<strong>两种方法不允许在<code>vm</code>对象与<code>vm._data</code>上直接添加属性。</strong></p>\n<h5 id=\"数组内的监视原理\">数组内的监视原理</h5>\n<p>Vue为数组统一设置了一个<code>Observer</code>并仅针对调用数组修改方法的操作予以响应，直接索引无法被检测到。</p>\n<p>而Vue托管的数组所调用的方法使用了装饰器，用于更新DOM。</p>\n<blockquote>\n<p><code>push()</code><br>\n<code>pop()</code><br>\n<code>shift()</code><br>\n<code>unshift()</code><br>\n<code>splice()</code><br>\n<code>sort()</code><br>\n<code>reverse()</code></p>\n</blockquote>\n<h5 id=\"数据监视总结\">数据监视总结</h5>\n<ol>\n<li><code>Vue</code>会监视<code>data</code>中所有的数据；</li>\n<li>通过<code>Observer</code>数据代理与闭包实现数据监视；</li>\n<li>对象追加的属性默认不做响应式处理，若需要则使用<code>Vue.set()</code>或<code>vm.$set()</code>；</li>\n<li>通过对数组常用方法的修饰器调用原生方法并添加重新解析模板的函数实现数组中数据的监测；</li>\n</ol>\n<h3 id=\"1-8-常用方法技巧\">1.8  常用方法技巧</h3>\n<h4 id=\"1-8-1-收集表单数据\">1.8.1 收集表单数据</h4>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912155026711.png\" alt=\"image-20210912155026711\"></p>\n<h4 id=\"1-8-2-过滤器\">1.8.2 过滤器</h4>\n<p>配置过滤器可以处理属性数据，仅限<code>Vue2</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;time | timeFormater(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">timeFormater</span>(<span class=\"params\">value, str</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayjs(value).format(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>上述均为局部过滤器，过滤器遵循链式原则。</p>\n<h3 id=\"1-9-其他Vue指令\">1.9 其他<code>Vue</code>指令</h3>\n<h4 id=\"1-9-1-v-text\">1.9.1 <code>v-text</code></h4>\n<p>向其所在的标签插入文本（整体替换<code>innerHTML</code>）；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-9-2-v-html\">1.9.2 <code>v-html</code></h4>\n<p>与<code>v-text</code>相似，但能够解析数据文本中的<code>html</code>元素。</p>\n<blockquote>\n<p>注意：该标签可能导致安全性问题，直接解析Javascript代码可能会被XSS攻击。一定要在可信的内容上使用。</p>\n</blockquote>\n<h4 id=\"1-9-3-v-vloak\">1.9.3 <code>v-vloak</code></h4>\n<p>该标签仅用于标记模板内容以用于在低网速情况下，配合CSS避免用户看到未经渲染的源码页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-attr\">[v-cloak]</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">display</span>:none;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;root&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;name&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;yourCDN&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-9-4-v-once\">1.9.4 <code>v-once</code></h4>\n<p>该指令使得所在节点经过初次动态渲染后，就被视为静态内容从而不再渲染。以后数据的改变不会影响<code>v-once</code>所在结构的更新，可用于优化性能。</p>\n<h4 id=\"1-9-5-v-pre\">1.9.5 <code>v-pre</code></h4>\n<p>该指令使得跳过指定阶段的渲染编译过程，可以优化性能或防止不同框架的冲突。</p>\n<h4 id=\"1-9-6-自定义指令\">1.9.6 自定义指令</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-times</span>=<span class=\"string\">&quot;n&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">n</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 自定义指令 函数式</span></span><br><span class=\"line\">    <span class=\"comment\">// 对象形式相比于函数形式 可更精细地控制</span></span><br><span class=\"line\">    <span class=\"attr\">directives</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一参数为真实DOM元素 第二元素为指定的Vue数据</span></span><br><span class=\"line\">        <span class=\"comment\">// 该函数在指令与元素成功绑定以及指令所在的模板被重新解析时被调用</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">times</span>(<span class=\"params\">element, binding</span>)</span> &#123;</span><br><span class=\"line\">            element.innerText = binding.value * <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象式</span></span><br><span class=\"line\"><span class=\"string\">&#x27;fbind&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指令与元素成功绑定时</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\">element, binding</span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 指令所在元素被插入页面时</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">inserted</span>(<span class=\"params\">element, binding</span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 指令所在的模板被重新解析时</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\">element, binding</span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：上述自定义指令均为局部指令且处理函数中的<code>this</code>都指向<code>Window</code>。</p>\n<p>可以通过<code>Vue.directive()</code>添加全局自定义指令。</p>\n<h3 id=\"1-10-Vue的生命周期\">1.10 Vue的生命周期</h3>\n<h4 id=\"1-10-1-生命周期简介\">1.10.1 生命周期简介</h4>\n<p>生命周期又名生命周期回调函数，生命周期钩子。</p>\n<p>Vue在操作执行的关键时刻调用一些特殊名称的函数，这些函数的名称不可更改，但其内容可以自定义。其中的<code>this</code>指针指向<code>vm</code>或者组件实例对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 该生命周期函数在Vue完成模板解析并把初始的真实DOM元素放入页面后（挂载完毕）调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    setIntervel(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.opacity -= <span class=\"number\">0.01</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.opacity &lt;= <span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"built_in\">this</span>.opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-10-2-生命周期流程\">1.10.2 生命周期流程</h4>\n<img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"实例的生命周期\" style=\"zoom:120%;\" />\n<p>上图中所有的红色边框的函数即为生命周期函数。</p>\n<ol>\n<li><code>beforeCreate</code> 初始化前：进行了生命周期、事件的配置但是数据代理还未开始；</li>\n<li><code>created</code> 初始化：数据监测，数据代理；</li>\n<li>上述两步完成后，Vue开始解析模板，生成虚拟DOM，但是还不能显示内容；</li>\n<li><code>beforeMount</code> 挂载前：页面呈现未经编译的DOM，此时所有DOM操作最终均无效；</li>\n<li>此时Vue 将虚拟DOM转换为真实DOM插入页面；</li>\n<li><code>mounted</code> 挂载：此时呈现Vue编译DOM，到此初始化结束。一般可在此自定义：开启定时器，发送网络请求，订阅小心，绑定自定义事件等初始化操作。</li>\n<li>初始化完成后，Vue仅在数据发生改变时进行DOM更新</li>\n<li><code>beforeUpdate</code> 更新前：此时数据是最新的，但是页面旧。</li>\n<li>虚拟DOM在此时进行重新渲染，应用Diff与旧虚拟DOM比较，然后完成页面更新。</li>\n<li><code>updated</code> 更新完成：数据是新的，页面也更新，保持同步。</li>\n<li>当<code>vm.$destroy</code> (Vue2) / <code>app.unmount</code> （Vue3）被调用时，Vue开始销毁流程。清理与其他实例的连接，解绑其全部指令及其自定义事件监听器（原生不会处理）。</li>\n<li><code>beforeUnmount</code> 销毁前：此时vm的所有内容都可用，一般可以在此阶段进行：关闭定时器，取消订阅消息，解绑自定义事件等操作，但是不会再进行页面的更新。</li>\n<li><code>unmounted</code>  完成销毁</li>\n</ol>\n<br>\n<h2 id=\"Chpater-2-组件\">Chpater 2 组件</h2>\n<h3 id=\"2-1-组件简介\">2.1 组件简介</h3>\n<p>原生的模式依赖关系混乱，不好维护且代码复用率不高。</p>\n<p>组件即实现提供特定功能的代码集合，划分合理能够做到提高代码的复用率，简化项目编码。</p>\n<p>组件分为非单位件组件与单文件组件（<code>.vue</code>文件）。</p>\n<h3 id=\"2-2-非单文件组件\">2.2 非单文件组件</h3>\n<h4 id=\"2-2-1-非单文件组件注册示例\">2.2.1 非单文件组件注册示例</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;root&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 编写组件标签 Vue自动替换 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">school</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">school</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">school</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">school</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 两组件相互独立 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过Vue API 实现组件的创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> school = Vue.extend(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Vue 开发者工具使用name进行展示</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;School&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 使用 tempate 组件化 html 代码结构</span></span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;div&gt; &lt;/div&gt;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 组件的数据设置需要使用函数返回 可以防止多个组件实例访问到同一个 data 对象造成不可预料的更改</span></span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">website</span>: <span class=\"string\">&#x27;Outspace&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">date</span>: <span class=\"string\">&#x27;2021/9/12&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 局部注册组件</span></span><br><span class=\"line\">    <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">school</span>:school,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-使用注意\">2.2.2 使用注意</h4>\n<p>全局注册组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;school&#x27;</span>, school);</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>组件名称如果使用驼峰式，则该组件只能在脚手架环境中正常工作。多单词写法建议使用全小写字符串形式并用<code>-</code>连接。</li>\n<li>自闭合标签在非脚手架环境下会导致后续标签无法渲染。</li>\n</ol>\n<h4 id=\"2-2-3-组件嵌套\">2.2.3 组件嵌套</h4>\n<p>组件的注册嵌套只需要在父组件中写入<code>component</code>注册即可，开发者工具会将层次结构显示出来。</p>\n<p>通常在<code>vm</code>实例下仅定义<code>app</code>组件，其他子组件均注册在<code>app</code>下。</p>\n<h4 id=\"2-2-4-VueComponent\">2.2.4 <code>VueComponent</code></h4>\n<p>组件本质是一个<code>VueComponent</code>函数，由<code>Vue.extend</code>生成。</p>\n<p>编写组件标签后，Vue会创建对应的组件实例对象，且每次调用返回全新组件实例。</p>\n<p>组件配置中的<code>data</code> <code>methods</code> <code>watch</code> <code>computed</code> 中函数的 <code>this</code> 均为 <code>VueComponent</code> 实例对象。</p>\n<h4 id=\"2-2-5-组件的原型关系\">2.2.5 组件的原型关系</h4>\n<p><code>VueComponent</code>对象与<code>Vue</code>对象非常相似，但是组件是一种可复用的<code>Vue</code>实例，其在创建时无法指定作用容器，也不创建实例，知识保存了一个构造函数的指针。</p>\n<p>实例的隐式原型对象指向自身创造者的原型对象。</p>\n<p><strong>但是<code>Vue</code>使得<code>VueComponent</code>的原型对象指向<code>Vue</code>原型对象实现原型继承链。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912200021004.png\" alt=\"image-20210912200021004\"></p>\n<p>这样使得组件实例对象可以访问到<code>Vue</code>原型上的属性、方法。</p>\n<h3 id=\"2-3-单文件组件\">2.3 单文件组件</h3>\n<blockquote>\n<p>通过 <code>webpack</code>或者<code>vue-cli</code>将<code>vue</code>转译成<code>js</code>文件。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- template 标签内为组件的 html --&gt;</span><br><span class=\"line\">\t&lt;div class=&#x27;school&#x27;&gt;</span><br><span class=\"line\">        &lt;h2&gt;</span><br><span class=\"line\">            &#123;&#123;schoolName&#125;&#125;</span><br><span class=\"line\">    \t&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;</span><br><span class=\"line\">        \t&#123;&#123;address&#125;&#125;    </span><br><span class=\"line\">    \t&lt;/h2&gt;</span><br><span class=\"line\">        &lt;button @click=&#x27;showName&#x27;&gt;&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t// script 内为JS交互代码</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    \tname: &#x27;School&#x27;,</span><br><span class=\"line\">        data: function() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                schoolName: &#x27;Outspace&#x27;,</span><br><span class=\"line\">                address: &#x27;Shanghai&#x27;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            showName() &#123;</span><br><span class=\"line\">                alert(this.schoolName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t/* style 内为组件的样式表 */</span><br><span class=\"line\">    [school] &#123;</span><br><span class=\"line\">        backgroud-color: orange;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>在<code>App.js</code>内引入所有的二级组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> School <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./School&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Student <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Student&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        School,</span><br><span class=\"line\">        Student,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>main.js</code>内创建<code>Vue</code>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意该语句只能在脚手架内使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;App&gt;&lt;/App&gt;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        App,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>搭建<code>HTML</code>结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>单文件组件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;root&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<br>\n<h2 id=\"Chapter-3-使用Vue-Cli\">Chapter 3 使用<code>Vue-Cli</code></h2>\n<h3 id=\"3-1-初始化脚手架\">3.1 初始化脚手架</h3>\n<p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n<p>创建脚手架</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create vuetest</span><br></pre></td></tr></table></figure>\n<p>开启服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./vuetest</span><br><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n<p>开启脚手架后的目录结构</p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210913100522762.png\" alt=\"image-20210913100522762\"></p>\n<p>修改默认配置</p>\n<p>添加<code>vue.config.js</code>修改CLI的默认配置项。<a href=\"https://cli.vuejs.org/zh/config/#pages\">https://cli.vuejs.org/zh/config/#pages</a></p>\n<p>另外使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure>\n<p>可以命令脚手架输出其默认配置。</p>\n<h3 id=\"3-2-render函数\">3.2 <code>render</code>函数</h3>\n<p>在脚手架创建的<code>main.js</code>函数中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>存在<code>render</code>函数，用以将App组件放入容器中。</p>\n<p>而在运行时<code>Vue</code>库中，使用<code>render</code>函数将原来<code>template</code>中的模板创建出来</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(App);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般用于开发环境的<code>Vue</code>包含完整的核心功能与模板解析器，而生产部署环境没有模板解析器导致无法使用<code>template</code>配置。</p>\n<h3 id=\"3-3-ref属性\">3.3  <code>ref</code>属性</h3>\n<p><code>ref</code>为<code>Vue</code>设置的对于原始DOM中元素的标识符（可以替代<code>id</code>属性），可以通过<code>VueComponent</code>中的<code>$ref</code>方法取得。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;button ref=&quot;btn&quot; @click=&quot;showDom&quot;&gt;</span><br><span class=\"line\">        点我输出 Title</span><br><span class=\"line\">    &lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">        name: &#x27;App&#x27;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                msg:&#x27;Welcome!&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            showDom() &#123;</span><br><span class=\"line\">                console.log(this.$refs.title);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>其中<code>this.$refs</code>保存所有有<code>ref</code>属性的对象，对于普通标签储存DOM元素，对于子组件标签储存其实例对象。该方法可用于组件间通信。</strong></p>\n<h3 id=\"3-4-props配置\">3.4 <code>props</code>配置</h3>\n<p>可以使用子组件的<code>props</code>属性声明从外部接收的数据，在父组件内可以直接在组件标签上声明传入的数据。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">School</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Lisa&quot;</span> <span class=\"attr\">:age</span>=<span class=\"string\">&quot;9*2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">School</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">        name: &#x27;School&#x27;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                msg:&#x27;Welcome!&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        // 简单接收</span><br><span class=\"line\">        props: [&#x27;name&#x27;, &#x27;age&#x27;],</span><br><span class=\"line\">        // 限制接收类型、必须项与默认值</span><br><span class=\"line\">        props: &#123;</span><br><span class=\"line\">            &#x27;name&#x27; : &#123;</span><br><span class=\"line\">                type: String,</span><br><span class=\"line\">                required: true,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#x27;age&#x27; : &#123;</span><br><span class=\"line\">            \ttype: Number,</span><br><span class=\"line\">                default: 99,</span><br><span class=\"line\">        \t&#125;,</span><br><span class=\"line\">            &#x27;sex&#x27; : String,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>一般<code>props</code>是只读的，若需要进行修改，则需要在子组件的<code>data</code>内设置一个副本。<strong>但是<code>Vue</code>只检测<code>props</code>的地址变化，是一个浅层次监视，所以建议对于<code>props</code>传入的对象属性不要进行修改</strong>。</p>\n<p>在组件生成时<code>props</code>的接受要先于<code>data</code>的创建。</p>\n<h3 id=\"3-5-mixin混入\">3.5 <code>mixin</code>混入</h3>\n<p>多组件共享一个部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    import &#123;mix&#125; from &#x27;../mixin.js&#x27;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">        name: &#x27;School&#x27;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                msg:&#x27;Welcome!&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">\t\tmixins: [mix],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>可以单独定义一个<code>js</code>文件，然后在<code>Vue</code>组件内进行<code>mixin</code>引入从而实现<code>js</code>代码的复用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mix = &#123;</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">showMsg</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"built_in\">this</span>.msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件与外部混入的数据若发生冲突（生命周期函数接受双方）以组件内的数据为准。</p>\n<p>通过<code>Vue.mixin</code>全局引入这个混合。</p>\n<h3 id=\"3-6-插件\">3.6 插件</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> plugins = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对于引入的 插件 Vue会自动调用 install</span></span><br><span class=\"line\">    <span class=\"comment\">// 还可以传入其他参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">install</span>(<span class=\"params\">Vue, ...</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处可以统一地进行对Vue的配置与</span></span><br><span class=\"line\">        <span class=\"comment\">// 原型方法的增加等等强大功能</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(plugins);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-7-scoped样式\">3.7 <code>scoped</code>样式</h3>\n<p>默认<code>&lt;style&gt;</code>标签内的样式将会混用。造成CSS混乱。</p>\n<p>所以直接添加在标签内直接添加<code>scoped</code>即可使得该样式仅用于该组件。</p>\n<h3 id=\"3-8-组件化编码流程\">3.8 组件化编码流程</h3>\n<ol>\n<li>\n<p>实现静态组件：<br>\n抽取组件，使用组件实现静态页面效果；</p>\n</li>\n<li>\n<p>展示动态数据：数据存储位置，名称；数据保存在哪个组件，确定UUID；</p>\n</li>\n<li>\n<p>交互：绑定事件监听，组件间通讯</p>\n</li>\n<li>\n<p>组件化编码：</p>\n<ul>\n<li>拆分静态组件：组件按功能点拆分，命名不能与<code>html</code>元素冲突；</li>\n<li>实现动态组件：考虑数据的存放位置\n<ul>\n<li>单组件使用</li>\n<li>多组件使用则置于其父组件上</li>\n</ul>\n</li>\n<li>实现 交互：绑定事件监听，实现组件间通讯。</li>\n</ul>\n</li>\n<li>\n<p><code>props</code>适用于：</p>\n<ul>\n<li>父组件向子组件通讯；</li>\n<li>子组件通过获取到的父组件函数向父组件通讯。</li>\n</ul>\n</li>\n<li>\n<p><code>v-model</code>使用：</p>\n<ul>\n<li>不建议对<code>props</code>传入的参数使用<code>v-model</code>进行绑定修改；</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-9-浏览器本地存储\">3.9 浏览器本地存储</h3>\n<p><code>localStorage</code>与 <code>sessionStorage</code>的应用。可以用键值对在规定的时间内进行持久化操作。</p>\n<p>也包括<code>IndexedDB</code>以及<code>WebSQL</code>。</p>\n<p>均属于原生JS操作，但在本地Web应用中可以使用暂存。</p>\n<h3 id=\"3-10-组件的自定义事件\">3.10 组件的自定义事件</h3>\n<h4 id=\"3-10-1-绑定\">3.10.1 绑定</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- 为组件绑定自定义事件 --&gt;</span><br><span class=\"line\">\t&lt;Student v-on:myevent=&quot;demo&quot;&gt;&lt;/Student&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport Student from &#x27;./components/Student&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name:&#x27;App&#x27;,</span><br><span class=\"line\">        components: &#123;Student&#125;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                msg:&#x27;Hello!&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            // 收到传递事件的参数</span><br><span class=\"line\">            demo(name) &#123;</span><br><span class=\"line\">                console.log(&#x27;demo was invoked!&#x27; + &#x27;And student\\&#x27;s name is &#x27;+ name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- 绑定内部事件 --&gt;</span><br><span class=\"line\">\t&lt;button @click=&quot;sendStudentName&quot;&gt;</span><br><span class=\"line\">        Send</span><br><span class=\"line\">    &lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">        name:&#x27;Student&#x27;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                name: &#x27;Lisa&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            sendStudentName() &#123;</span><br><span class=\"line\">                // 释放事件触发信号</span><br><span class=\"line\">                // 还可以传递额外的参数</span><br><span class=\"line\">                this.$emit(&#x27;myevent&#x27;, this.name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以直接在组件实例对象上添加事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Student</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;student&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Student</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$refs.student.$on(<span class=\"string\">&#x27;myevent&#x27;</span>, <span class=\"built_in\">this</span>.getStudentName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义事件也可以使用所有的事件修饰符。</p>\n<h4 id=\"3-10-2-解绑与总结\">3.10.2 解绑与总结</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">unbind</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用组件实例$off解绑指定自定义事件</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$off([<span class=\"string\">&#x27;myevent&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>组件的自定义事件适用于子组件向父组件传递信息；</li>\n<li>组件上可以绑定原生DOM事件，使用<code>native</code>事件修饰符；</li>\n<li>注意绑定自定义事件时，注意回调中<code>this</code>的指向。</li>\n</ol>\n<h3 id=\"3-11-全局事件总线\">3.11 全局事件总线</h3>\n<p>全局事件总线可以进行任意组件间的通信，是一种<code>Vue</code>的编程模式。</p>\n<p>该总线必须对所有组件可见，可以调用对应组件的<code>$on</code> <code>$off</code> <code>$emit</code>等API。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将自身的指针挂载到 Vue 的原型对象上</span></span><br><span class=\"line\">        <span class=\"comment\">// 这样所有的组件均可见且可调用API</span></span><br><span class=\"line\">        Vue.prototype.$bus = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>只需要在执行回调的组件内全局绑定自定义事件，然后在触发组件内发出<code>emit</code>信号，那么借助信号与回调函数的机制就可以实现跨组件的数据传递。</p>\n<p>但是这种方法可能会污染<code>Vue</code>原型对象的命名空间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$bus.$on(<span class=\"string\">&#x27;myevent&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外需要在<code>beforeDestroy()</code>内按时解绑自定义事件以免资源浪费。</p>\n<h3 id=\"3-12-消息订阅与发布\">3.12 消息订阅与发布</h3>\n<p>使用<code>pubsub-js</code>等第三方库。</p>\n<p>PubSub 其实很简单，可以利用发布订阅原理自行实现。</p>\n<ul>\n<li>首先创建 PubSub 类，增加 handlers 变量用于保存事件列表；</li>\n<li>添加事件时，将监听器加到数组中；</li>\n<li>删除事件时，移除监听器；</li>\n<li>触发事件，循环遍历并触发所有的事件。</li>\n</ul>\n<p>从实现原理看上，Android中的广播也使用了观察者模式，基于消息的发布/订阅事件模型。因此，从实现的角度来看，Android中的广播将广播的发送者和接受者极大程度上解耦，使得系统能够方便集成，更易扩展。</p>\n<h3 id=\"3-13-nextTick\">3.13 <code>nextTick</code></h3>\n<p>组件内如遇到数据更新后需要对DOM元素进行操作，则可使用<code>nextTick</code>在DOM更新完毕后再进行指定的回调。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$refs.inputTitle.focus();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-14-过渡与动画\">3.14 过渡与动画</h3>\n<h4 id=\"3-14-1-动画\">3.14.1 动画</h4>\n<p>使用<code>&lt;transition&gt;</code>标签包含所需要动画的标签，然后使用CSS3创建动画，但选择器名称有规定：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 指定name以匹配对应选择器 appear 可以使得载入时就执行动画 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;hello&#x27;</span> <span class=\"attr\">appear</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        HelloWorld!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.hello-enter-active</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: helloworld <span class=\"number\">0.5s</span> linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.hello-leave-active</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: helloworld <span class=\"number\">0.5s</span> linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> helloworld &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">100%</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0px</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Vue会自行控制动画播放的时机。</p>\n<h4 id=\"3-14-2-过渡\">3.14.2 过渡</h4>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210914104838287.png\" alt=\"image-20210914104838287\"></p>\n<p>可以使用<code>transition-group</code>标签使得过渡被应用到多个内容中，为各个标签添加唯一的<code>key</code>值。</p>\n<p>也可以使用第三方库。</p>\n<p>下面是<code>Vue</code>中动画动作的时机标识。</p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/transition.png\" alt=\"Transition Diagram\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"本博客基础","link_list":[{"name":"Hexo","link":"https://hexo.io/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"}]},{"class_name":"开发网站","class_desc":"值得推荐的网站","link_list":[{"name":"Jetbrain","link":"https://www.jetbrains.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Jetbrains.png","descr":"最佳开发 IDE"},{"name":"Microsoft Docs","link":"https://docs.microsoft.com/zh-cn/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Microsoft.png","descr":"微软官方文档"},{"name":"Python","link":"https://docs.python.org/zh-cn/3/tutorial/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Python.png","descr":"Python 官方教程"},{"name":"Vue","link":"https://v3.cn.vuejs.org/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Vue.png","descr":"Vue v3 官网"},{"name":"动手学深度学习","link":"https://zh-v2.d2l.ai/","avatar":"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/Dive2DL.png","descr":"理论不会，实践来陪！"}]}]}},"excerpt":"","more":"<h1>Vue 学习 (基础部分)</h1>\n<br>\n<h2 id=\"Chapter-0-简介\">Chapter 0 简介</h2>\n<p>Vue是一套用于构建用户界面的渐进式 JavaScript 框架。</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>采用组件化模式，提高代码复用率，让代码更好维护。</li>\n<li>声明式编码，无需直接操作DOM，提高开发效率。</li>\n<li>使用虚拟DOM，优秀的Diff算法，复用DOM节点。</li>\n<li>使用了MVVM模式，编码简洁，本身只关注UI。</li>\n</ol>\n<p><strong>前置学习</strong></p>\n<ol>\n<li>Ajax</li>\n<li>Prototype</li>\n<li>Promise</li>\n<li>Axios</li>\n<li>ES6 - ES11</li>\n<li>包管理器</li>\n</ol>\n<p><strong>搭建开发环境</strong></p>\n<ol>\n<li>方法1：使用<code>&lt;script&gt;</code>标签引入。</li>\n<li>方法2：使用<code>NPM</code>与<code>Vue-Cli</code>搭建。</li>\n</ol>\n<br>\n<h2 id=\"Chpater-1-Vue基本\">Chpater 1 Vue基本</h2>\n<h3 id=\"1-1-初识案例\">1.1 初识案例</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue Test Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 目标容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Vue 模板 可以使用任何JS表达式 --&gt;</span></span><br><span class=\"line\">            Hello &#123;&#123;banner&#125;&#125;!</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 关闭开发环境提示</span></span></span><br><span class=\"line\"><span class=\"javascript\">        Vue.config.productionTip = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 创建实例 传入配置对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 指定当前 Vue 实例的服务对象容器</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">el</span>: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 指定数据 供 el 中所指定的元素使用</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// Vue 自动查找到使用模板字符的位置并进行动态双向绑定</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 一般通过组件形式指定</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"attr\">banner</span>: <span class=\"string\">&#x27;My Vue&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<ol>\n<li><code>Vue</code>的工作方式是创建一个实例，同时传入一个配置对象指定容器与数据等内容；</li>\n<li>原<code>html</code>中的内容使用了<code>Vue</code>中的模板，<code>Vue</code>使用一种解析机制，将原DOM使用虚拟化DOM替换，将模板字符串更改为JS中的指定数据。</li>\n<li>其中<code>Vue</code>对象与<code>html</code>容器的绑定是一对一的关系，任何多对一，多对多的绑定均不会起作用。</li>\n</ol>\n<h3 id=\"1-2-模板语法与数据绑定\">1.2 模板语法与数据绑定</h3>\n<h4 id=\"1-2-1-模板的理解\">1.2.1 模板的理解</h4>\n<p>Vue 中有两大类的模板语法：</p>\n<ol>\n<li>\n<p>插值语法 <code>&#123;&#123;&#125;&#125;</code>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    Hello &#123;&#123;banner&#125;&#125;!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>指令 <code>v-bind</code> <code>v-for</code>等等；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>简写链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>v-bind链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以通过该语法解析标签内部的绑定内容。</p>\n</li>\n</ol>\n<h4 id=\"1-2-2-数据绑定\">1.2.2 数据绑定</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;input-form&quot;</span>&gt;</span></span><br><span class=\"line\">        单向绑定<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        双向绑定<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">         <span class=\"attr\">el</span>: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#input-form&#x27;</span>),</span><br><span class=\"line\">         <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">         <span class=\"attr\">name</span>: <span class=\"string\">&quot;Input something...&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样就可实现单向与双向的数据绑定。</p>\n<p><strong>注意：其中<code>v-model</code>标签只能应用在表单类的元素上，固定应用于<code>value</code>属性上。</strong></p>\n<h4 id=\"1-2-3-el-data的指定与原型链分析\">1.2.3 <code>el</code> <code>data</code>的指定与原型链分析</h4>\n<p>先前创建的<code>Vue</code>对象使用了原型链的方法</p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210911170627577.png\" alt=\"image-20210911170627577\"></p>\n<p>创建的对象中所有以<code>$</code>开头的方法均为开放使用的API， 其余的内部属性不要使用。</p>\n<p>而<code>Vue</code>对象通过原型链的方法，将<code>el</code>容器绑定在<code>prototype</code>中的<code>$mount</code>方法中。</p>\n<p>所以可以在<code>Vue</code>组件创建之后再使用<code>$mount</code>来挂载容器。<br>\n另外<code>data</code>属性需要指定为对象，所以在后续的组件化过程中需要使用构建函数返回对象进行数据的绑定加载。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Evan You&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">address</span>: <span class=\"string\">&#x27;Shanghai&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">v.$mount(<span class=\"string\">&#x27;#input-form&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：普通箭头函数中的<code>this</code>指向全局的<code>Window</code>对象，建议在<code>data</code>指定时使用传统函数定义方法。</p>\n<h4 id=\"1-2-4-MVVM-模型\">1.2.4 MVVM 模型</h4>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210911171728786.png\" alt=\"image-20210911171728786\"></p>\n<blockquote>\n<ul>\n<li>M：模型（Model）</li>\n<li>V：视图（View）</li>\n<li>VM：视图模型（ViewModel）</li>\n</ul>\n</blockquote>\n<p>其中Vue的VM及其原型对象上的数据都可以被直接访问到。</p>\n<h4 id=\"1-2-5-数据代理\">1.2.5 数据代理</h4>\n<p>JS中为一个对象动态添加属性的方法为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> propertyValue = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yourObject = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(yourObject, objectProperty, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: propertyValue,</span><br><span class=\"line\">    <span class=\"comment\">// 属性是否参与枚举与迭代</span></span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 属性是否可更改</span></span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 属性是否可被删除</span></span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 每次访问该属性时 getter 函数就会被调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 从而实现值的动态更新</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> propertyValue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        propertyValue = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过该方法添加的属性是可以进行高级的属性控制。</p>\n<p>Vue通过上述方法进行对象的数据代理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// obj2 代理了 obj1 的数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj2, <span class=\"string\">&#x27;x&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.x;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        obj.x = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Vue对象是通过定义数据代理的方式，将<code>getter</code>和<code>setter</code>指向传入的数据对象从而进行处理，可以认为是进行了一层封装，从而使得外部调用时直接使用属性名而非<code>_data.propertyValue</code>去调用。</p>\n<h3 id=\"1-3-事件处理\">1.3 事件处理</h3>\n<h4 id=\"1-3-1-事件案例\">1.3.1 事件案例</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event-btn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;showInfo1&quot;</span>&gt;</span>提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showInfo2(number, $event)&quot;</span>&gt;</span>提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     <span class=\"attr\">el</span>: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#event-btn&#x27;</span>),</span><br><span class=\"line\">     <span class=\"attr\">data</span>: &#123;&#125;,</span><br><span class=\"line\">     <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">         <span class=\"comment\">//该函数中的 this 指代 Vue 对象 后续可能指代组件实例</span></span><br><span class=\"line\">         <span class=\"comment\">//event参数指代鼠标事件</span></span><br><span class=\"line\">         <span class=\"comment\">// html 中调用时参数默认为鼠标事件对象</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">showInfo1</span>(<span class=\"params\">event</span>)</span> &#123;</span><br><span class=\"line\">               alert(<span class=\"string\">&#x27;Vue 对象中的 Methods 绑定&#x27;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">         <span class=\"comment\">// 该函数接受html规定的参数</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"title\">showInfo2</span>(<span class=\"params\">number, event</span>)</span> &#123;</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log(number);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>理论上函数也可以放入参数的<code>data</code>中，但是这样会导致没有意义的数据代理与劫持。</p>\n<h4 id=\"1-3-2-事件修饰符\">1.3.2 事件修饰符</h4>\n<ol>\n<li><code>prevent</code> 阻止默认事件</li>\n<li><code>stop</code> 阻止事件冒泡</li>\n<li><code>once</code> 事件只触发一次</li>\n<li><code>capture</code>  使用事件的捕获模式，在捕获阶段就处理事件</li>\n<li><code>self</code> 只有<code>event.target</code>是当前操作的元素时才触发事件</li>\n<li><code>passive</code> 事件的默认行为立即执行，无需等待事件回调执行完毕</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 组织a标签的默认事件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;cn.bing.com&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span>HREF<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-3-键盘事件\">1.3.3 键盘事件</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keydown</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于键盘事件 <code>Vue</code>也有一系列别名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">showInfo</span>(<span class=\"params\">event</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(event.target.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912113151927.png\" alt=\"image-20210912113151927\"></p>\n<h3 id=\"1-4-计算属性\">1.4 计算属性</h3>\n<h4 id=\"1-4-1-计算属性案例\">1.4.1 计算属性案例</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;#root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">firstName</span>:<span class=\"string\">&#x27;张&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">lastName</span>:<span class=\"string\">&#x27;三&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性</span></span><br><span class=\"line\">    <span class=\"attr\">computed</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">fullName</span>:&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 一般不使用set设置因为结果只用于展示</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.firstName = value.split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.lastName = value.split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>计算属性不储存在<code>vm._data</code>中，而是作为源属性的计算结果直接存储在<code>vm</code>对象中。</p>\n<h4 id=\"1-4-2-计算属性特性\">1.4.2 计算属性特性</h4>\n<p>其中<code>get</code>函数仅在所依赖的数据发生变化时与初次读取调用，并进行结果的缓存，<strong>多次解析时使用缓存结果</strong>。</p>\n<p>计算属性底层使用了<code>Object.defineproperty</code>方法提供的<code>getter</code>与<code>setter</code>，内部有缓存机制，效率更高。</p>\n<p>若需要计算属性的结果被修改，则需要使用<code>set</code>函数响应，且其中要引起源数据的更改才能应用。</p>\n<p>另外若只需要读取计算属性，有下列简略形式实现<code>getter</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">fullName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5-监视属性\">1.5 监视属性</h3>\n<h4 id=\"1-5-1-监视案例\">1.5.1 监视案例</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">changeWeather</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.isHot = !<span class=\"built_in\">this</span>.isHot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 配置监视</span></span><br><span class=\"line\">    <span class=\"attr\">watch</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">isHot</span>: &#123;</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 初始化时即调用</span></span><br><span class=\"line\">    \t    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 监视到isHot变化时即调用</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newValue, oldValue</span>)</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外部配置监视</span></span><br><span class=\"line\">vm.$watch(<span class=\"string\">&#x27;isHot&#x27;</span>, &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 初始化时即调用</span></span><br><span class=\"line\">    \t<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t<span class=\"comment\">// 监视到isHot变化时即调用</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newValue, oldValue</span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>监视的属性必须存在，若写错时不会报错，仅会使参数变为<code>undifined</code>。</p>\n<h4 id=\"1-5-2-深度监视\">1.5.2 深度监视</h4>\n<p>监视数据对象内部的数据源，需要将</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置监视</span></span><br><span class=\"line\"><span class=\"attr\">watch</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;whether.isHot&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 监视多级对象内部所有成员的变化</span></span><br><span class=\"line\">        <span class=\"attr\">deep</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t<span class=\"comment\">// 监视到对象成员isHot变化时即调用</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newValue, oldValue</span>)</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-5-3-监视的简写\">1.5.3 监视的简写</h4>\n<p>当配置的监视项内仅有处理回调而没有其他配置项时，可以使用如下简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">isHot</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-5-4-watch与computed的对比\">1.5.4 <code>watch</code>与<code>computed</code>的对比</h4>\n<p>两者在大部分情况下没有明显区别。</p>\n<p>但是计算属性中无法开启异步数据更新，需要使用<code>watch</code>来实现。</p>\n<p>另外，所有不被<code>Vue</code>所管理的函数（定时器的回调函数，<code>AJAX</code>回调函数等）需要写为箭头函数，这样的<code>this</code>指向的才是<code>vm</code>或者组件实例对象。<strong>箭头函数没有自己的this值</strong>，箭头函数中所使用的this来自于函数作用域链。</p>\n<h3 id=\"1-6-class与style绑定\">1.6 <code>class</code>与<code>style</code>绑定</h3>\n<h4 id=\"1-6-1-class绑定\">1.6.1 <code>class</code>绑定</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 绑定class样式 数组写法 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Vue 会自动将两个class属性合并 且支持字符串指定 数组解析 对象指定等等--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;basic&quot;</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;mood&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeMood&quot;</span>&gt;</span></span><br><span class=\"line\">    \t&#123;&#123;name&#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Wayne&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">mood</span>: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">changeMood</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 字符串式</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mood = <span class=\"string\">&#x27;happy&#x27;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 数组式</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mood = [<span class=\"string\">&#x27;happy&#x27;</span>,<span class=\"string\">&#x27;normal&#x27;</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 对象式</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mood = &#123;</span><br><span class=\"line\">                <span class=\"attr\">happy</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">normal</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-6-2-style绑定\">1.6.2 <code>style</code>绑定</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 绑定style样式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;basic&quot;</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;styleObj&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeMood&quot;</span>&gt;</span></span><br><span class=\"line\">    \t&#123;&#123;name&#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Wayne&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">mood</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">styleObj</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;40px&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-7-渲染\">1.7 渲染</h3>\n<h4 id=\"1-7-1-条件渲染\">1.7.1 条件渲染</h4>\n<p><strong>控制标签的可见性</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    Welcome to Outspace!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>该方法只控制标签的<code>visibility</code>。</p>\n<p><strong>控制渲染是否进行</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    Welcome to Outspace!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">    Welcome to Tech World!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>另有<code>v-else-if</code>，此外该结构的正确执行必须使用相互关联的<code>v-if</code>，不能被其他标签阻隔。</p>\n<p>可以使用<code>template</code>标签保证不用引入额外的<code>div</code>嵌套来使<code>v-if</code>正常执行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&#x27;n===1&#x27;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t    Welcome to Outspace!</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>v-if</code>时，元素可能无法被获取到，而<code>v-show</code>一定能获取到。</p>\n<h4 id=\"1-7-2-列表渲染\">1.7.2 列表渲染</h4>\n<h5 id=\"v-for案例\"><code>v-for</code>案例</h5>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- index 为遍历的数组索引 key用于唯一区分DOM用以动态更新 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(p, index) in persons&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;p.id&#125;&#125; - &#123;&#123;p.name&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 该方法也可以遍历对象 以键值对形式--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(value, keyin) of car&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&#x27;keyin&#x27;</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">persons</span>: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;001&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;002&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;李四&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;003&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;王五&#x27;</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">car</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;BMW 750&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>该方法也可以遍历字符串，也可以遍历指定次数。</p>\n<h5 id=\"key的原理\"><code>:key</code>的原理</h5>\n<p>用于为节点更新时的<code>Diff</code>算法作为唯一标识符，对比同<code>key</code>的标签内容，若同则不进行DOM更新，直接复用，若不同则创建新的虚拟DOM以及真是DOM。</p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912141054846.png\" alt=\"image-20210912141054846\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912141414383.png\" alt=\"image-20210912141414383\"></p>\n<h5 id=\"列表过滤\">列表过滤</h5>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;keyword&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;p in persons&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;p.id&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;p.id&#125;&#125; - &#123;&#123;p.name&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">persons</span>:[</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;001&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;马冬梅&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">19</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;002&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;周冬雨&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;003&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;周杰伦&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">21</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;004&#x27;</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;温兆伦&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">    \t],</span><br><span class=\"line\">        <span class=\"attr\">filterPersons</span>: [],</span><br><span class=\"line\">        keyword,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 数据监视实现</span></span><br><span class=\"line\">    <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    \t<span class=\"attr\">keyword</span>:&#123;</span><br><span class=\"line\">    \t\t<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t\t<span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">    \t\t\t<span class=\"built_in\">this</span>.filterPersons = <span class=\"built_in\">this</span>.persons.filter(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p.name.indexOf(value) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>也可以使用计算属性的方法，并进行排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">filterPersons</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> arr = <span class=\"built_in\">this</span>.persons.filter(<span class=\"function\">(<span class=\"params\">p</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.name.indexOf(<span class=\"built_in\">this</span>.keyword) !== -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.sortType) &#123;</span><br><span class=\"line\">            arr.sort(<span class=\"function\">(<span class=\"params\">p1, p2</span>)=&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.sortType === <span class=\"number\">1</span> ? p2.age - p1.age : p1.age - p2.age;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-7-3-Vue检测数据的原理\">1.7.3 Vue检测数据的原理</h4>\n<h5 id=\"监测案例\">监测案例</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Wayne&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&#x27;Shanghai&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obs = <span class=\"keyword\">new</span> Observer(data);</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = data = obs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">    keys.forEach(<span class=\"function\">(<span class=\"params\">k</span>)=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">this</span>, k, &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj[k];</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">                obj[k] = val;</span><br><span class=\"line\">                <span class=\"comment\">// other additinal actions ...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法通过<code>Observer</code>设置了一个对于<code>data</code>的代理，且通过连续的赋值使得原<code>data</code>指针被指向了<code>Observer</code>实例，而又因为<code>Observer</code>中又保持着对原<code>data</code>的引用，所以<code>data</code>没有被销毁回收且只能通过<code>Observer</code>被访问到，类似于闭包的原理。其中对于每个非对象，非数组的属性都具有一对<code>getter</code>和<code>setter</code>，<code>setter</code>中又添加了功能逻辑用于监视属性值的改动，一旦改动就重新构建DOM，应用了一种修饰器的思想。</p>\n<p>另外，<code>Vue</code>中还设置了<code>vm._data</code>的数据代理，从而可以直接通过<code>vm.property</code>直接访问属性；对<code>Observer</code>做了递归处理，能够检测任意嵌套的多层数据改动。</p>\n<h5 id=\"Vue-set-方法\"><code>Vue.set()</code>方法</h5>\n<p>该方法可以用于后续的动态添加数据属性并设置监听。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.person, <span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>同理又有方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$set(vm.person, <span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是这<strong>两种方法不允许在<code>vm</code>对象与<code>vm._data</code>上直接添加属性。</strong></p>\n<h5 id=\"数组内的监视原理\">数组内的监视原理</h5>\n<p>Vue为数组统一设置了一个<code>Observer</code>并仅针对调用数组修改方法的操作予以响应，直接索引无法被检测到。</p>\n<p>而Vue托管的数组所调用的方法使用了装饰器，用于更新DOM。</p>\n<blockquote>\n<p><code>push()</code><br>\n<code>pop()</code><br>\n<code>shift()</code><br>\n<code>unshift()</code><br>\n<code>splice()</code><br>\n<code>sort()</code><br>\n<code>reverse()</code></p>\n</blockquote>\n<h5 id=\"数据监视总结\">数据监视总结</h5>\n<ol>\n<li><code>Vue</code>会监视<code>data</code>中所有的数据；</li>\n<li>通过<code>Observer</code>数据代理与闭包实现数据监视；</li>\n<li>对象追加的属性默认不做响应式处理，若需要则使用<code>Vue.set()</code>或<code>vm.$set()</code>；</li>\n<li>通过对数组常用方法的修饰器调用原生方法并添加重新解析模板的函数实现数组中数据的监测；</li>\n</ol>\n<h3 id=\"1-8-常用方法技巧\">1.8  常用方法技巧</h3>\n<h4 id=\"1-8-1-收集表单数据\">1.8.1 收集表单数据</h4>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912155026711.png\" alt=\"image-20210912155026711\"></p>\n<h4 id=\"1-8-2-过滤器\">1.8.2 过滤器</h4>\n<p>配置过滤器可以处理属性数据，仅限<code>Vue2</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;time | timeFormater(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">timeFormater</span>(<span class=\"params\">value, str</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayjs(value).format(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>上述均为局部过滤器，过滤器遵循链式原则。</p>\n<h3 id=\"1-9-其他Vue指令\">1.9 其他<code>Vue</code>指令</h3>\n<h4 id=\"1-9-1-v-text\">1.9.1 <code>v-text</code></h4>\n<p>向其所在的标签插入文本（整体替换<code>innerHTML</code>）；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-9-2-v-html\">1.9.2 <code>v-html</code></h4>\n<p>与<code>v-text</code>相似，但能够解析数据文本中的<code>html</code>元素。</p>\n<blockquote>\n<p>注意：该标签可能导致安全性问题，直接解析Javascript代码可能会被XSS攻击。一定要在可信的内容上使用。</p>\n</blockquote>\n<h4 id=\"1-9-3-v-vloak\">1.9.3 <code>v-vloak</code></h4>\n<p>该标签仅用于标记模板内容以用于在低网速情况下，配合CSS避免用户看到未经渲染的源码页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-attr\">[v-cloak]</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"attribute\">display</span>:none;</span></span><br><span class=\"line\"><span class=\"css\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;root&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;name&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;yourCDN&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-9-4-v-once\">1.9.4 <code>v-once</code></h4>\n<p>该指令使得所在节点经过初次动态渲染后，就被视为静态内容从而不再渲染。以后数据的改变不会影响<code>v-once</code>所在结构的更新，可用于优化性能。</p>\n<h4 id=\"1-9-5-v-pre\">1.9.5 <code>v-pre</code></h4>\n<p>该指令使得跳过指定阶段的渲染编译过程，可以优化性能或防止不同框架的冲突。</p>\n<h4 id=\"1-9-6-自定义指令\">1.9.6 自定义指令</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-times</span>=<span class=\"string\">&quot;n&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">n</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 自定义指令 函数式</span></span><br><span class=\"line\">    <span class=\"comment\">// 对象形式相比于函数形式 可更精细地控制</span></span><br><span class=\"line\">    <span class=\"attr\">directives</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一参数为真实DOM元素 第二元素为指定的Vue数据</span></span><br><span class=\"line\">        <span class=\"comment\">// 该函数在指令与元素成功绑定以及指令所在的模板被重新解析时被调用</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">times</span>(<span class=\"params\">element, binding</span>)</span> &#123;</span><br><span class=\"line\">            element.innerText = binding.value * <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象式</span></span><br><span class=\"line\"><span class=\"string\">&#x27;fbind&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指令与元素成功绑定时</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\">element, binding</span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 指令所在元素被插入页面时</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">inserted</span>(<span class=\"params\">element, binding</span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 指令所在的模板被重新解析时</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\">element, binding</span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：上述自定义指令均为局部指令且处理函数中的<code>this</code>都指向<code>Window</code>。</p>\n<p>可以通过<code>Vue.directive()</code>添加全局自定义指令。</p>\n<h3 id=\"1-10-Vue的生命周期\">1.10 Vue的生命周期</h3>\n<h4 id=\"1-10-1-生命周期简介\">1.10.1 生命周期简介</h4>\n<p>生命周期又名生命周期回调函数，生命周期钩子。</p>\n<p>Vue在操作执行的关键时刻调用一些特殊名称的函数，这些函数的名称不可更改，但其内容可以自定义。其中的<code>this</code>指针指向<code>vm</code>或者组件实例对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 该生命周期函数在Vue完成模板解析并把初始的真实DOM元素放入页面后（挂载完毕）调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    setIntervel(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.opacity -= <span class=\"number\">0.01</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.opacity &lt;= <span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"built_in\">this</span>.opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-10-2-生命周期流程\">1.10.2 生命周期流程</h4>\n<img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"实例的生命周期\" style=\"zoom:120%;\" />\n<p>上图中所有的红色边框的函数即为生命周期函数。</p>\n<ol>\n<li><code>beforeCreate</code> 初始化前：进行了生命周期、事件的配置但是数据代理还未开始；</li>\n<li><code>created</code> 初始化：数据监测，数据代理；</li>\n<li>上述两步完成后，Vue开始解析模板，生成虚拟DOM，但是还不能显示内容；</li>\n<li><code>beforeMount</code> 挂载前：页面呈现未经编译的DOM，此时所有DOM操作最终均无效；</li>\n<li>此时Vue 将虚拟DOM转换为真实DOM插入页面；</li>\n<li><code>mounted</code> 挂载：此时呈现Vue编译DOM，到此初始化结束。一般可在此自定义：开启定时器，发送网络请求，订阅小心，绑定自定义事件等初始化操作。</li>\n<li>初始化完成后，Vue仅在数据发生改变时进行DOM更新</li>\n<li><code>beforeUpdate</code> 更新前：此时数据是最新的，但是页面旧。</li>\n<li>虚拟DOM在此时进行重新渲染，应用Diff与旧虚拟DOM比较，然后完成页面更新。</li>\n<li><code>updated</code> 更新完成：数据是新的，页面也更新，保持同步。</li>\n<li>当<code>vm.$destroy</code> (Vue2) / <code>app.unmount</code> （Vue3）被调用时，Vue开始销毁流程。清理与其他实例的连接，解绑其全部指令及其自定义事件监听器（原生不会处理）。</li>\n<li><code>beforeUnmount</code> 销毁前：此时vm的所有内容都可用，一般可以在此阶段进行：关闭定时器，取消订阅消息，解绑自定义事件等操作，但是不会再进行页面的更新。</li>\n<li><code>unmounted</code>  完成销毁</li>\n</ol>\n<br>\n<h2 id=\"Chpater-2-组件\">Chpater 2 组件</h2>\n<h3 id=\"2-1-组件简介\">2.1 组件简介</h3>\n<p>原生的模式依赖关系混乱，不好维护且代码复用率不高。</p>\n<p>组件即实现提供特定功能的代码集合，划分合理能够做到提高代码的复用率，简化项目编码。</p>\n<p>组件分为非单位件组件与单文件组件（<code>.vue</code>文件）。</p>\n<h3 id=\"2-2-非单文件组件\">2.2 非单文件组件</h3>\n<h4 id=\"2-2-1-非单文件组件注册示例\">2.2.1 非单文件组件注册示例</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;root&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 编写组件标签 Vue自动替换 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">school</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">school</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">school</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">school</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 两组件相互独立 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过Vue API 实现组件的创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> school = Vue.extend(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Vue 开发者工具使用name进行展示</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;School&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 使用 tempate 组件化 html 代码结构</span></span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;div&gt; &lt;/div&gt;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 组件的数据设置需要使用函数返回 可以防止多个组件实例访问到同一个 data 对象造成不可预料的更改</span></span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">website</span>: <span class=\"string\">&#x27;Outspace&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">date</span>: <span class=\"string\">&#x27;2021/9/12&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 局部注册组件</span></span><br><span class=\"line\">    <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">school</span>:school,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-使用注意\">2.2.2 使用注意</h4>\n<p>全局注册组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;school&#x27;</span>, school);</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>组件名称如果使用驼峰式，则该组件只能在脚手架环境中正常工作。多单词写法建议使用全小写字符串形式并用<code>-</code>连接。</li>\n<li>自闭合标签在非脚手架环境下会导致后续标签无法渲染。</li>\n</ol>\n<h4 id=\"2-2-3-组件嵌套\">2.2.3 组件嵌套</h4>\n<p>组件的注册嵌套只需要在父组件中写入<code>component</code>注册即可，开发者工具会将层次结构显示出来。</p>\n<p>通常在<code>vm</code>实例下仅定义<code>app</code>组件，其他子组件均注册在<code>app</code>下。</p>\n<h4 id=\"2-2-4-VueComponent\">2.2.4 <code>VueComponent</code></h4>\n<p>组件本质是一个<code>VueComponent</code>函数，由<code>Vue.extend</code>生成。</p>\n<p>编写组件标签后，Vue会创建对应的组件实例对象，且每次调用返回全新组件实例。</p>\n<p>组件配置中的<code>data</code> <code>methods</code> <code>watch</code> <code>computed</code> 中函数的 <code>this</code> 均为 <code>VueComponent</code> 实例对象。</p>\n<h4 id=\"2-2-5-组件的原型关系\">2.2.5 组件的原型关系</h4>\n<p><code>VueComponent</code>对象与<code>Vue</code>对象非常相似，但是组件是一种可复用的<code>Vue</code>实例，其在创建时无法指定作用容器，也不创建实例，知识保存了一个构造函数的指针。</p>\n<p>实例的隐式原型对象指向自身创造者的原型对象。</p>\n<p><strong>但是<code>Vue</code>使得<code>VueComponent</code>的原型对象指向<code>Vue</code>原型对象实现原型继承链。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210912200021004.png\" alt=\"image-20210912200021004\"></p>\n<p>这样使得组件实例对象可以访问到<code>Vue</code>原型上的属性、方法。</p>\n<h3 id=\"2-3-单文件组件\">2.3 单文件组件</h3>\n<blockquote>\n<p>通过 <code>webpack</code>或者<code>vue-cli</code>将<code>vue</code>转译成<code>js</code>文件。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- template 标签内为组件的 html --&gt;</span><br><span class=\"line\">\t&lt;div class=&#x27;school&#x27;&gt;</span><br><span class=\"line\">        &lt;h2&gt;</span><br><span class=\"line\">            &#123;&#123;schoolName&#125;&#125;</span><br><span class=\"line\">    \t&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;</span><br><span class=\"line\">        \t&#123;&#123;address&#125;&#125;    </span><br><span class=\"line\">    \t&lt;/h2&gt;</span><br><span class=\"line\">        &lt;button @click=&#x27;showName&#x27;&gt;&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t// script 内为JS交互代码</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    \tname: &#x27;School&#x27;,</span><br><span class=\"line\">        data: function() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                schoolName: &#x27;Outspace&#x27;,</span><br><span class=\"line\">                address: &#x27;Shanghai&#x27;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            showName() &#123;</span><br><span class=\"line\">                alert(this.schoolName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t/* style 内为组件的样式表 */</span><br><span class=\"line\">    [school] &#123;</span><br><span class=\"line\">        backgroud-color: orange;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>在<code>App.js</code>内引入所有的二级组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> School <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./School&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Student <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Student&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        School,</span><br><span class=\"line\">        Student,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>main.js</code>内创建<code>Vue</code>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意该语句只能在脚手架内使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;App&gt;&lt;/App&gt;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        App,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>搭建<code>HTML</code>结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>单文件组件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;root&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<br>\n<h2 id=\"Chapter-3-使用Vue-Cli\">Chapter 3 使用<code>Vue-Cli</code></h2>\n<h3 id=\"3-1-初始化脚手架\">3.1 初始化脚手架</h3>\n<p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n<p>创建脚手架</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create vuetest</span><br></pre></td></tr></table></figure>\n<p>开启服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./vuetest</span><br><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n<p>开启脚手架后的目录结构</p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210913100522762.png\" alt=\"image-20210913100522762\"></p>\n<p>修改默认配置</p>\n<p>添加<code>vue.config.js</code>修改CLI的默认配置项。<a href=\"https://cli.vuejs.org/zh/config/#pages\">https://cli.vuejs.org/zh/config/#pages</a></p>\n<p>另外使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure>\n<p>可以命令脚手架输出其默认配置。</p>\n<h3 id=\"3-2-render函数\">3.2 <code>render</code>函数</h3>\n<p>在脚手架创建的<code>main.js</code>函数中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>存在<code>render</code>函数，用以将App组件放入容器中。</p>\n<p>而在运行时<code>Vue</code>库中，使用<code>render</code>函数将原来<code>template</code>中的模板创建出来</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">createElement</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(App);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般用于开发环境的<code>Vue</code>包含完整的核心功能与模板解析器，而生产部署环境没有模板解析器导致无法使用<code>template</code>配置。</p>\n<h3 id=\"3-3-ref属性\">3.3  <code>ref</code>属性</h3>\n<p><code>ref</code>为<code>Vue</code>设置的对于原始DOM中元素的标识符（可以替代<code>id</code>属性），可以通过<code>VueComponent</code>中的<code>$ref</code>方法取得。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;button ref=&quot;btn&quot; @click=&quot;showDom&quot;&gt;</span><br><span class=\"line\">        点我输出 Title</span><br><span class=\"line\">    &lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">        name: &#x27;App&#x27;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                msg:&#x27;Welcome!&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            showDom() &#123;</span><br><span class=\"line\">                console.log(this.$refs.title);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>其中<code>this.$refs</code>保存所有有<code>ref</code>属性的对象，对于普通标签储存DOM元素，对于子组件标签储存其实例对象。该方法可用于组件间通信。</strong></p>\n<h3 id=\"3-4-props配置\">3.4 <code>props</code>配置</h3>\n<p>可以使用子组件的<code>props</code>属性声明从外部接收的数据，在父组件内可以直接在组件标签上声明传入的数据。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">School</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Lisa&quot;</span> <span class=\"attr\">:age</span>=<span class=\"string\">&quot;9*2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">School</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">        name: &#x27;School&#x27;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                msg:&#x27;Welcome!&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        // 简单接收</span><br><span class=\"line\">        props: [&#x27;name&#x27;, &#x27;age&#x27;],</span><br><span class=\"line\">        // 限制接收类型、必须项与默认值</span><br><span class=\"line\">        props: &#123;</span><br><span class=\"line\">            &#x27;name&#x27; : &#123;</span><br><span class=\"line\">                type: String,</span><br><span class=\"line\">                required: true,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#x27;age&#x27; : &#123;</span><br><span class=\"line\">            \ttype: Number,</span><br><span class=\"line\">                default: 99,</span><br><span class=\"line\">        \t&#125;,</span><br><span class=\"line\">            &#x27;sex&#x27; : String,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>一般<code>props</code>是只读的，若需要进行修改，则需要在子组件的<code>data</code>内设置一个副本。<strong>但是<code>Vue</code>只检测<code>props</code>的地址变化，是一个浅层次监视，所以建议对于<code>props</code>传入的对象属性不要进行修改</strong>。</p>\n<p>在组件生成时<code>props</code>的接受要先于<code>data</code>的创建。</p>\n<h3 id=\"3-5-mixin混入\">3.5 <code>mixin</code>混入</h3>\n<p>多组件共享一个部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    import &#123;mix&#125; from &#x27;../mixin.js&#x27;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">        name: &#x27;School&#x27;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                msg:&#x27;Welcome!&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">\t\tmixins: [mix],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>可以单独定义一个<code>js</code>文件，然后在<code>Vue</code>组件内进行<code>mixin</code>引入从而实现<code>js</code>代码的复用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mix = &#123;</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">showMsg</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"built_in\">this</span>.msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件与外部混入的数据若发生冲突（生命周期函数接受双方）以组件内的数据为准。</p>\n<p>通过<code>Vue.mixin</code>全局引入这个混合。</p>\n<h3 id=\"3-6-插件\">3.6 插件</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> plugins = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对于引入的 插件 Vue会自动调用 install</span></span><br><span class=\"line\">    <span class=\"comment\">// 还可以传入其他参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">install</span>(<span class=\"params\">Vue, ...</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处可以统一地进行对Vue的配置与</span></span><br><span class=\"line\">        <span class=\"comment\">// 原型方法的增加等等强大功能</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(plugins);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-7-scoped样式\">3.7 <code>scoped</code>样式</h3>\n<p>默认<code>&lt;style&gt;</code>标签内的样式将会混用。造成CSS混乱。</p>\n<p>所以直接添加在标签内直接添加<code>scoped</code>即可使得该样式仅用于该组件。</p>\n<h3 id=\"3-8-组件化编码流程\">3.8 组件化编码流程</h3>\n<ol>\n<li>\n<p>实现静态组件：<br>\n抽取组件，使用组件实现静态页面效果；</p>\n</li>\n<li>\n<p>展示动态数据：数据存储位置，名称；数据保存在哪个组件，确定UUID；</p>\n</li>\n<li>\n<p>交互：绑定事件监听，组件间通讯</p>\n</li>\n<li>\n<p>组件化编码：</p>\n<ul>\n<li>拆分静态组件：组件按功能点拆分，命名不能与<code>html</code>元素冲突；</li>\n<li>实现动态组件：考虑数据的存放位置\n<ul>\n<li>单组件使用</li>\n<li>多组件使用则置于其父组件上</li>\n</ul>\n</li>\n<li>实现 交互：绑定事件监听，实现组件间通讯。</li>\n</ul>\n</li>\n<li>\n<p><code>props</code>适用于：</p>\n<ul>\n<li>父组件向子组件通讯；</li>\n<li>子组件通过获取到的父组件函数向父组件通讯。</li>\n</ul>\n</li>\n<li>\n<p><code>v-model</code>使用：</p>\n<ul>\n<li>不建议对<code>props</code>传入的参数使用<code>v-model</code>进行绑定修改；</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-9-浏览器本地存储\">3.9 浏览器本地存储</h3>\n<p><code>localStorage</code>与 <code>sessionStorage</code>的应用。可以用键值对在规定的时间内进行持久化操作。</p>\n<p>也包括<code>IndexedDB</code>以及<code>WebSQL</code>。</p>\n<p>均属于原生JS操作，但在本地Web应用中可以使用暂存。</p>\n<h3 id=\"3-10-组件的自定义事件\">3.10 组件的自定义事件</h3>\n<h4 id=\"3-10-1-绑定\">3.10.1 绑定</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- 为组件绑定自定义事件 --&gt;</span><br><span class=\"line\">\t&lt;Student v-on:myevent=&quot;demo&quot;&gt;&lt;/Student&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport Student from &#x27;./components/Student&#x27;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name:&#x27;App&#x27;,</span><br><span class=\"line\">        components: &#123;Student&#125;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                msg:&#x27;Hello!&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            // 收到传递事件的参数</span><br><span class=\"line\">            demo(name) &#123;</span><br><span class=\"line\">                console.log(&#x27;demo was invoked!&#x27; + &#x27;And student\\&#x27;s name is &#x27;+ name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- 绑定内部事件 --&gt;</span><br><span class=\"line\">\t&lt;button @click=&quot;sendStudentName&quot;&gt;</span><br><span class=\"line\">        Send</span><br><span class=\"line\">    &lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">        name:&#x27;Student&#x27;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                name: &#x27;Lisa&#x27;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            sendStudentName() &#123;</span><br><span class=\"line\">                // 释放事件触发信号</span><br><span class=\"line\">                // 还可以传递额外的参数</span><br><span class=\"line\">                this.$emit(&#x27;myevent&#x27;, this.name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以直接在组件实例对象上添加事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Student</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;student&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Student</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$refs.student.$on(<span class=\"string\">&#x27;myevent&#x27;</span>, <span class=\"built_in\">this</span>.getStudentName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义事件也可以使用所有的事件修饰符。</p>\n<h4 id=\"3-10-2-解绑与总结\">3.10.2 解绑与总结</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">unbind</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用组件实例$off解绑指定自定义事件</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$off([<span class=\"string\">&#x27;myevent&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>组件的自定义事件适用于子组件向父组件传递信息；</li>\n<li>组件上可以绑定原生DOM事件，使用<code>native</code>事件修饰符；</li>\n<li>注意绑定自定义事件时，注意回调中<code>this</code>的指向。</li>\n</ol>\n<h3 id=\"3-11-全局事件总线\">3.11 全局事件总线</h3>\n<p>全局事件总线可以进行任意组件间的通信，是一种<code>Vue</code>的编程模式。</p>\n<p>该总线必须对所有组件可见，可以调用对应组件的<code>$on</code> <code>$off</code> <code>$emit</code>等API。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将自身的指针挂载到 Vue 的原型对象上</span></span><br><span class=\"line\">        <span class=\"comment\">// 这样所有的组件均可见且可调用API</span></span><br><span class=\"line\">        Vue.prototype.$bus = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>只需要在执行回调的组件内全局绑定自定义事件，然后在触发组件内发出<code>emit</code>信号，那么借助信号与回调函数的机制就可以实现跨组件的数据传递。</p>\n<p>但是这种方法可能会污染<code>Vue</code>原型对象的命名空间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$bus.$on(<span class=\"string\">&#x27;myevent&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外需要在<code>beforeDestroy()</code>内按时解绑自定义事件以免资源浪费。</p>\n<h3 id=\"3-12-消息订阅与发布\">3.12 消息订阅与发布</h3>\n<p>使用<code>pubsub-js</code>等第三方库。</p>\n<p>PubSub 其实很简单，可以利用发布订阅原理自行实现。</p>\n<ul>\n<li>首先创建 PubSub 类，增加 handlers 变量用于保存事件列表；</li>\n<li>添加事件时，将监听器加到数组中；</li>\n<li>删除事件时，移除监听器；</li>\n<li>触发事件，循环遍历并触发所有的事件。</li>\n</ul>\n<p>从实现原理看上，Android中的广播也使用了观察者模式，基于消息的发布/订阅事件模型。因此，从实现的角度来看，Android中的广播将广播的发送者和接受者极大程度上解耦，使得系统能够方便集成，更易扩展。</p>\n<h3 id=\"3-13-nextTick\">3.13 <code>nextTick</code></h3>\n<p>组件内如遇到数据更新后需要对DOM元素进行操作，则可使用<code>nextTick</code>在DOM更新完毕后再进行指定的回调。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$refs.inputTitle.focus();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-14-过渡与动画\">3.14 过渡与动画</h3>\n<h4 id=\"3-14-1-动画\">3.14.1 动画</h4>\n<p>使用<code>&lt;transition&gt;</code>标签包含所需要动画的标签，然后使用CSS3创建动画，但选择器名称有规定：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 指定name以匹配对应选择器 appear 可以使得载入时就执行动画 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;hello&#x27;</span> <span class=\"attr\">appear</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        HelloWorld!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.hello-enter-active</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: helloworld <span class=\"number\">0.5s</span> linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.hello-leave-active</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: helloworld <span class=\"number\">0.5s</span> linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> helloworld &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">100%</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0px</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Vue会自行控制动画播放的时机。</p>\n<h4 id=\"3-14-2-过渡\">3.14.2 过渡</h4>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/image-20210914104838287.png\" alt=\"image-20210914104838287\"></p>\n<p>可以使用<code>transition-group</code>标签使得过渡被应用到多个内容中，为各个标签添加唯一的<code>key</code>值。</p>\n<p>也可以使用第三方库。</p>\n<p>下面是<code>Vue</code>中动画动作的时机标识。</p>\n<p><img src=\"https://raw.githubusercontent.com/xw1216/ImageHosting/main/img/transition.png\" alt=\"Transition Diagram\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckv6sg9o0000108t5b8rgacny","category_id":"ckv6sg9o4000308t54kba8xm4","_id":"ckv6sg9o7000808t50w630hw5"},{"post_id":"ckv6sg9oe000b08t52j4m00v7","category_id":"ckv6sg9o4000308t54kba8xm4","_id":"ckv6sg9of000d08t5100s2cqp"},{"post_id":"ckv7wmger0000yct5b20zgl0i","category_id":"ckv7wmgew0001yct597925oqu","_id":"ckv7wmgey0004yct57g749xzf"},{"post_id":"ckv7wmgf70009yct5f52s19sc","category_id":"ckv7wmgew0001yct597925oqu","_id":"ckv7wmgfe000cyct5d63f805r"}],"PostTag":[{"post_id":"ckv6sg9o0000108t5b8rgacny","tag_id":"ckv6sg9o5000408t535sf78hx","_id":"ckv6sg9o7000908t56w999s2l"},{"post_id":"ckv6sg9o0000108t5b8rgacny","tag_id":"ckv6sg9o7000708t59u3vh4e0","_id":"ckv6sg9o8000a08t5fls27v1d"},{"post_id":"ckv6sg9oe000b08t52j4m00v7","tag_id":"ckv6sg9of000c08t5eh505plx","_id":"ckv6sg9og000f08t57ont817e"},{"post_id":"ckv6sg9oe000b08t52j4m00v7","tag_id":"ckv6sg9o5000408t535sf78hx","_id":"ckv6sg9og000g08t570qkdm59"},{"post_id":"ckv6sg9oe000b08t52j4m00v7","tag_id":"ckv6sg9of000e08t5h9tn2lcu","_id":"ckv6sg9og000h08t56msxf5jh"},{"post_id":"ckv7wmger0000yct5b20zgl0i","tag_id":"ckv7wmgex0002yct52po3a3a5","_id":"ckv7wmgez0006yct58nocezjo"},{"post_id":"ckv7wmger0000yct5b20zgl0i","tag_id":"ckv7wmgey0003yct5f8wg9ebt","_id":"ckv7wmgez0007yct5g4q21q49"},{"post_id":"ckv7wmger0000yct5b20zgl0i","tag_id":"ckv7wmgey0005yct5dj71ckq1","_id":"ckv7wmgez0008yct56gwy5w0l"},{"post_id":"ckv7wmgf70009yct5f52s19sc","tag_id":"ckv7wmgex0002yct52po3a3a5","_id":"ckv7wmgfd000ayct55la440fj"},{"post_id":"ckv7wmgf70009yct5f52s19sc","tag_id":"ckv7wmgey0003yct5f8wg9ebt","_id":"ckv7wmgfe000byct55lm73em3"},{"post_id":"ckv7wmgf70009yct5f52s19sc","tag_id":"ckv7wmgey0005yct5dj71ckq1","_id":"ckv7wmgfe000dyct5e3nx3bfv"}],"Tag":[{"name":"教程","_id":"ckv6sg9o5000408t535sf78hx"},{"name":"Hexo","_id":"ckv6sg9o7000708t59u3vh4e0"},{"name":"指南","_id":"ckv6sg9of000c08t5eh505plx"},{"name":"Markdown","_id":"ckv6sg9of000e08t5h9tn2lcu"},{"name":"笔记","_id":"ckv7wmgex0002yct52po3a3a5"},{"name":"前端","_id":"ckv7wmgey0003yct5f8wg9ebt"},{"name":"Vue","_id":"ckv7wmgey0005yct5dj71ckq1"}]}}